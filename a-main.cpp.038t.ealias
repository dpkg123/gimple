
;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size (_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv, funcdef_no=3823, decl_uid=28521, cgraph_uid=1302, symbol_order=1866)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_3 = *this + 64

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_3 = { ESCAPED NONLOCAL }
_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv = { }


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to vars: { }

size_type std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size (const struct basic_string * const this)
{
  size_type _3;

  <bb 2> :
  gimple_assign <component_ref, _3, this_2(D)->_M_string_length, NULL, NULL>
  gimple_return <_3>

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::length (_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv, funcdef_no=3910, decl_uid=28523, cgraph_uid=1389, symbol_order=1955)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_3 = *this + 64

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_3 = { ESCAPED NONLOCAL }
_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv = { }


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::length() const

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to vars: { }

size_type std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::length (const struct basic_string * const this)
{
  size_type _3;

  <bb 2> :
  gimple_assign <component_ref, _3, this_2(D)->_M_string_length, NULL, NULL>
  gimple_return <_3>

}



;; Function std::ostream::operator<< (_ZNSolsEPFRSoS_E, funcdef_no=4083, decl_uid=44474, cgraph_uid=1562, symbol_order=2138)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__pf = &NONLOCAL
callescape(10) = NONLOCAL
CALLUSED(11) = callescape(10)
callarg(13) = this
callarg(13) = callarg(13) + UNKNOWN
callarg(13) = *callarg(13) + UNKNOWN
CALLUSED(11) = callarg(13)
*callarg(13) = callescape(10)
CALLCLOBBERED(12) = callarg(13)
callescape(10) = callarg(13)
ESCAPED = this
_6 = NONLOCAL
_6 = callarg(13)

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__pf = { NONLOCAL } same as this
callescape(10) = { ESCAPED NONLOCAL }
CALLUSED(11) = { ESCAPED NONLOCAL } same as callescape(10)
CALLCLOBBERED(12) = { ESCAPED NONLOCAL } same as callarg(13)
callarg(13) = { ESCAPED NONLOCAL }
_6 = { ESCAPED NONLOCAL } same as callescape(10)
_ZNSolsEPFRSoS_E = { }


Alias information for std::basic_ostream<char, std::char_traits<char> >::operator<<(std::basic_ostream<char, std::char_traits<char> >& (*)(std::basic_ostream<char, std::char_traits<char> >&))

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__pf_2(D), points-to non-local, points-to NULL, points-to vars: { }
this_4(D), points-to non-local, points-to vars: { }
_6, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

struct __ostream_type & std::ostream::operator<< (struct basic_ostream * const this, struct __ostream_type & (*<T720f>) (struct __ostream_type &) __pf)
{
  struct __ostream_type & _6;

  <bb 2> :
  gimple_call <__pf_2(D), _6, this_4(D)>
  gimple_return <_6>

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data (_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv, funcdef_no=4101, decl_uid=28201, cgraph_uid=1580, symbol_order=2156)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_3 = *this

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_3 = { ESCAPED NONLOCAL }
_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv = { }


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to vars: { }
_3, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

char * std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data (const struct basic_string * const this)
{
  char * _3;

  <bb 2> :
  gimple_assign <component_ref, _3, this_2(D)->_M_dataplus._M_p, NULL, NULL>
  gimple_return <_3>

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::data (_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv, funcdef_no=3909, decl_uid=28900, cgraph_uid=1388, symbol_order=1954)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_3 = *this

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_3 = { ESCAPED NONLOCAL }
_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv = { }


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::data() const

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to vars: { }
_3, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

const char * std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::data (const struct basic_string * const this)
{
  char * D.98174;
  char * _3;

  <bb 2> :
  gimple_assign <component_ref, _3, this_2(D)->_M_dataplus._M_p, NULL, NULL>
  gimple_return <_3>

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::c_str (_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv, funcdef_no=3729, decl_uid=28898, cgraph_uid=1208, symbol_order=1771)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_3 = *this

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_3 = { ESCAPED NONLOCAL }
_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv = { }


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::c_str() const

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to vars: { }
_3, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

const char * std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::c_str (const struct basic_string * const this)
{
  char * D.98177;
  char * _3;

  <bb 2> :
  gimple_assign <component_ref, _3, this_2(D)->_M_dataplus._M_p, NULL, NULL>
  gimple_return <_3>

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_get_allocator (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv, funcdef_no=4113, decl_uid=28242, cgraph_uid=1592, symbol_order=2168)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_2 = this + UNKNOWN

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_2 = { NONLOCAL }
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv = { }


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_get_allocator()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_1(D), points-to non-local, points-to vars: { }
_2, points-to non-local, points-to NULL, points-to vars: { }

struct allocator_type & std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_get_allocator (struct basic_string * const this)
{
  struct allocator_type & _2;

  <bb 2> :
  gimple_assign <addr_expr, _2, &this_1(D)->_M_dataplus, NULL, NULL>
  gimple_return <_2>

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc, funcdef_no=4119, decl_uid=28195, cgraph_uid=1598, symbol_order=2174)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__p = &NONLOCAL
*this = __p

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__p = { NONLOCAL } same as this


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data(char*)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to vars: { }
__p_3(D), points-to non-local, points-to NULL, points-to vars: { }

void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data (struct basic_string * const this, char * __p)
{
  <bb 2> :
  gimple_assign <ssa_name, this_2(D)->_M_dataplus._M_p, __p_3(D), NULL, NULL>
  gimple_return <NULL>

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_capacity (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEm, funcdef_no=4120, decl_uid=28207, cgraph_uid=1599, symbol_order=2175)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__capacity = &NONLOCAL
*this + 128 = __capacity

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__capacity = { NONLOCAL } same as this


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_capacity(unsigned long)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to vars: { }

void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_capacity (struct basic_string * const this, size_type __capacity)
{
  <bb 2> :
  gimple_assign <ssa_name, this_2(D)->D.28191._M_allocated_capacity, __capacity_3(D), NULL, NULL>
  gimple_return <NULL>

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_length (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_lengthEm, funcdef_no=4121, decl_uid=28198, cgraph_uid=1600, symbol_order=2176)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__length = &NONLOCAL
*this + 64 = __length

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__length = { NONLOCAL } same as this


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_length(unsigned long)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to vars: { }

void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_length (struct basic_string * const this, size_type __length)
{
  <bb 2> :
  gimple_assign <ssa_name, this_2(D)->_M_string_length, __length_3(D), NULL, NULL>
  gimple_return <NULL>

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_use_local_data (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE17_M_use_local_dataEv, funcdef_no=4225, decl_uid=28246, cgraph_uid=1704, symbol_order=2286)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
callescape(10) = NONLOCAL
CALLUSED(11) = callescape(10)
callarg(13) = this
callarg(13) = callarg(13) + UNKNOWN
callarg(13) = *callarg(13) + UNKNOWN
CALLUSED(11) = callarg(13)
*callarg(13) = callescape(10)
CALLCLOBBERED(12) = callarg(13)
callescape(10) = callarg(13)
ESCAPED = this
_4 = NONLOCAL
_4 = callarg(13)

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv = { }
callescape(10) = { ESCAPED NONLOCAL }
CALLUSED(11) = { ESCAPED NONLOCAL } same as callescape(10)
CALLCLOBBERED(12) = { ESCAPED NONLOCAL } same as callarg(13)
callarg(13) = { ESCAPED NONLOCAL }
_4 = { ESCAPED NONLOCAL } same as callescape(10)
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE17_M_use_local_dataEv = { }


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_use_local_data()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to vars: { }
_4, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

__attribute__((always_inline))
char * std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_use_local_data (struct basic_string * const this)
{
  char * _4;

  <bb 2> :
  gimple_call <_M_local_data, _4, this_2(D)>
  gimple_return <_4>

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_get_allocator (_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv, funcdef_no=4230, decl_uid=28244, cgraph_uid=1709, symbol_order=2291)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_2 = this + UNKNOWN

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_2 = { NONLOCAL }
_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv = { }


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_get_allocator() const

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_1(D), points-to non-local, points-to vars: { }
_2, points-to non-local, points-to NULL, points-to vars: { }

const struct allocator_type & std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_get_allocator (const struct basic_string * const this)
{
  const struct allocator_type & _2;

  <bb 2> :
  gimple_assign <addr_expr, _2, &this_1(D)->_M_dataplus, NULL, NULL>
  gimple_return <_2>

}



;; Function std::basic_ostream<char, std::char_traits<char> >::~basic_ostream (_ZNSoD2Ev, funcdef_no=4325, decl_uid=44640, cgraph_uid=1804, symbol_order=2388)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__vtt_parm = &NONLOCAL
_1 = *__vtt_parm
*this = _1
_2 = *this
_4 = *_2 + -192
_5 = _4
_6 = this + UNKNOWN
_7 = *__vtt_parm + 64
*_6 = _7

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _1
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__vtt_parm = { NONLOCAL } same as this
_1 = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL }
_4 = { ESCAPED }
_5 = { ESCAPED } same as _4
_6 = { NONLOCAL }
_7 = { ESCAPED NONLOCAL }


Alias information for std::basic_ostream<char, std::char_traits<char> >::~basic_ostream()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_2, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_6, points-to non-local, points-to NULL, points-to vars: { }
_7, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
__vtt_parm_9(D), points-to non-local, points-to NULL, points-to vars: { }
this_10(D), points-to non-local, points-to vars: { }

void std::basic_ostream<char, std::char_traits<char> >::~basic_ostream (struct basic_ostream * const this, const void * * __vtt_parm)
{
  const void * _1;
  int (*__vtbl_ptr_type) () * _2;
  long int _4;
  sizetype _5;
  struct basic_ostream * _6;
  const void * _7;

  <bb 2> :
  gimple_assign <mem_ref, _1, *__vtt_parm_9(D), NULL, NULL>
  gimple_assign <ssa_name, this_10(D)->_vptr.basic_ostream, _1, NULL, NULL>
  gimple_assign <component_ref, _2, this_10(D)->_vptr.basic_ostream, NULL, NULL>
  gimple_assign <mem_ref, _4, MEM[(long int *)_2 + -24B], NULL, NULL>
  gimple_assign <nop_expr, _5, _4, NULL, NULL>
  gimple_assign <pointer_plus_expr, _6, this_10(D), _5, NULL>
  gimple_assign <mem_ref, _7, MEM[(const void * *)__vtt_parm_9(D) + 8B], NULL, NULL>
  gimple_assign <ssa_name, MEM[(struct basic_ios *)_6].D.43795._vptr.ios_base, _7, NULL, NULL>
  gimple_return <NULL>

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_limit (_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_limitEmm, funcdef_no=4439, decl_uid=28257, cgraph_uid=1918, symbol_order=2502)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__pos = &NONLOCAL
__off = &NONLOCAL
_12 = *this + 64
_2 = _12 + UNKNOWN
_2 = __pos + UNKNOWN
_8 = *this + 64
iftmp.16_13 = _8 + UNKNOWN
iftmp.16_13 = __pos + UNKNOWN
iftmp.16_4 = __off
iftmp.16_4 = iftmp.16_13

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__pos = { NONLOCAL } same as this
__off = { NONLOCAL } same as this
_12 = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL }
_8 = { ESCAPED NONLOCAL }
iftmp.16_13 = { ESCAPED NONLOCAL }
iftmp.16_4 = { ESCAPED NONLOCAL }
_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_limitEmm = { }


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_limit(unsigned long, unsigned long) const

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_7(D), points-to non-local, points-to vars: { }

size_type std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_limit (const struct basic_string * const this, size_type __pos, size_type __off)
{
  size_type D.98189;
  size_type D.98187;
  const bool __testoff;
  long unsigned int _2;
  size_type iftmp.16_4;
  long unsigned int _8;
  long unsigned int _12;
  size_type iftmp.16_13;

  <bb 2> :
  gimple_assign <component_ref, _12, this_7(D)->_M_string_length, NULL, NULL>
  gimple_assign <minus_expr, _2, _12, __pos_9(D), NULL>
  gimple_cond <gt_expr, _2, __off_10(D), NULL, NULL>
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  gimple_assign <component_ref, _8, this_7(D)->_M_string_length, NULL, NULL>
  gimple_assign <minus_expr, iftmp.16_13, _8, __pos_9(D), NULL>

  <bb 4> :
  # gimple_phi <iftmp.16_4, __off_10(D)(2), iftmp.16_13(3)>
  gimple_return <iftmp.16_4>

}



;; Function std::basic_ios<char, std::char_traits<char> >::rdstate (_ZNKSt9basic_iosIcSt11char_traitsIcEE7rdstateEv, funcdef_no=4441, decl_uid=43677, cgraph_uid=1920, symbol_order=2504)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_3 = *this + 256

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_3 = { ESCAPED NONLOCAL }
_ZNKSt9basic_iosIcSt11char_traitsIcEE7rdstateEv = { }


Alias information for std::basic_ios<char, std::char_traits<char> >::rdstate() const

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to vars: { }

iostate std::basic_ios<char, std::char_traits<char> >::rdstate (const struct basic_ios * const this)
{
  iostate _3;

  <bb 2> :
  gimple_assign <component_ref, _3, this_2(D)->D.43795._M_streambuf_state, NULL, NULL>
  gimple_return <_3>

}



;; Function std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::_M_high_mark (_ZNKSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEE12_M_high_markEv, funcdef_no=4576, decl_uid=76537, cgraph_uid=2055, symbol_order=2639)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_1 = this + UNKNOWN
callescape(11) = NONLOCAL
CALLUSED(12) = callescape(11)
callarg(14) = _1
callarg(14) = callarg(14) + UNKNOWN
callarg(14) = *callarg(14) + UNKNOWN
CALLUSED(12) = callarg(14)
*callarg(14) = callescape(11)
CALLCLOBBERED(13) = callarg(14)
callescape(11) = callarg(14)
ESCAPED = _1
__pptr_11 = NONLOCAL
__pptr_11 = callarg(14)
_2 = this + UNKNOWN
callescape(18) = NONLOCAL
CALLUSED(19) = callescape(18)
callarg(21) = _2
callarg(21) = callarg(21) + UNKNOWN
callarg(21) = *callarg(21) + UNKNOWN
CALLUSED(19) = callarg(21)
*callarg(21) = callescape(18)
CALLCLOBBERED(20) = callarg(21)
callescape(18) = callarg(21)
ESCAPED = _2
__egptr_14 = NONLOCAL
__egptr_14 = callarg(21)
_5 = _3 + UNKNOWN
_5 = _4 + UNKNOWN
_6 = __pptr_11
_6 = __egptr_14
_6 = &NULL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_1 = { NONLOCAL }
_ZNKSt15basic_streambufIcSt11char_traitsIcEE4pptrEv = { }
callescape(11) = { ESCAPED NONLOCAL }
CALLUSED(12) = { ESCAPED NONLOCAL } same as callescape(11)
CALLCLOBBERED(13) = { ESCAPED NONLOCAL } same as callarg(14)
callarg(14) = { ESCAPED NONLOCAL }
__pptr_11 = { ESCAPED NONLOCAL } same as callescape(11)
_2 = { NONLOCAL }
_ZNKSt15basic_streambufIcSt11char_traitsIcEE5egptrEv = { }
callescape(18) = { ESCAPED NONLOCAL }
CALLUSED(19) = { ESCAPED NONLOCAL } same as callescape(18)
CALLCLOBBERED(20) = { ESCAPED NONLOCAL } same as callarg(21)
callarg(21) = { ESCAPED NONLOCAL }
__egptr_14 = { ESCAPED NONLOCAL } same as callescape(18)
_3 = { }
_4 = { }
_5 = { }
_6 = { NULL ESCAPED NONLOCAL }
_ZNKSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEE12_M_high_markEv = { }


Alias information for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::_M_high_mark() const

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to NULL, points-to vars: { }
_2, points-to non-local, points-to NULL, points-to vars: { }
_6, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
this_8(D), points-to non-local, points-to vars: { }
__pptr_11, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
__egptr_14, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

__attribute__((always_inline))
char_type * std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::_M_high_mark (const struct basic_stringbuf * const this)
{
  char_type * __egptr;
  char_type * __pptr;
  const struct basic_streambuf * _1;
  const struct basic_streambuf * _2;
  bool _3;
  bool _4;
  bool _5;
  char_type * _6;

  <bb 2> :
  gimple_assign <addr_expr, _1, &this_8(D)->D.76593, NULL, NULL>
  gimple_call <pptr, __pptr_11, _1>
  gimple_cond <ne_expr, __pptr_11, 0B, NULL, NULL>
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  gimple_assign <addr_expr, _2, &this_8(D)->D.76593, NULL, NULL>
  gimple_call <egptr, __egptr_14, _2>
  gimple_assign <eq_expr, _3, __egptr_14, 0B, NULL>
  gimple_assign <gt_expr, _4, __pptr_11, __egptr_14, NULL>
  gimple_assign <bit_ior_expr, _5, _3, _4, NULL>
  gimple_cond <ne_expr, _5, 0, NULL, NULL>
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 6>; [INV]

  <bb 5> :
  // predicted unlikely by early return (on trees) predictor.

  <bb 6> :
  # gimple_phi <_6, __pptr_11(4), __egptr_14(5), 0B(2)>
  gimple_return <_6>

}



;; Function std::basic_streambuf<char, std::char_traits<char> >::pbase (_ZNKSt15basic_streambufIcSt11char_traitsIcEE5pbaseEv, funcdef_no=4577, decl_uid=38973, cgraph_uid=2056, symbol_order=2640)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_3 = *this + 256

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_3 = { ESCAPED NONLOCAL }
_ZNKSt15basic_streambufIcSt11char_traitsIcEE5pbaseEv = { }


Alias information for std::basic_streambuf<char, std::char_traits<char> >::pbase() const

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to vars: { }
_3, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

char_type * std::basic_streambuf<char, std::char_traits<char> >::pbase (const struct basic_streambuf * const this)
{
  char_type * _3;

  <bb 2> :
  gimple_assign <component_ref, _3, this_2(D)->_M_out_beg, NULL, NULL>
  gimple_return <_3>

}



;; Function std::basic_streambuf<char, std::char_traits<char> >::pptr (_ZNKSt15basic_streambufIcSt11char_traitsIcEE4pptrEv, funcdef_no=4609, decl_uid=38975, cgraph_uid=2088, symbol_order=2672)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_3 = *this + 320

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_3 = { ESCAPED NONLOCAL }
_ZNKSt15basic_streambufIcSt11char_traitsIcEE4pptrEv = { }


Alias information for std::basic_streambuf<char, std::char_traits<char> >::pptr() const

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to vars: { }
_3, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

char_type * std::basic_streambuf<char, std::char_traits<char> >::pptr (const struct basic_streambuf * const this)
{
  char_type * _3;

  <bb 2> :
  gimple_assign <component_ref, _3, this_2(D)->_M_out_cur, NULL, NULL>
  gimple_return <_3>

}



;; Function std::basic_streambuf<char, std::char_traits<char> >::egptr (_ZNKSt15basic_streambufIcSt11char_traitsIcEE5egptrEv, funcdef_no=4610, decl_uid=38963, cgraph_uid=2089, symbol_order=2673)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_3 = *this + 192

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_3 = { ESCAPED NONLOCAL }
_ZNKSt15basic_streambufIcSt11char_traitsIcEE5egptrEv = { }


Alias information for std::basic_streambuf<char, std::char_traits<char> >::egptr() const

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to vars: { }
_3, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

char_type * std::basic_streambuf<char, std::char_traits<char> >::egptr (const struct basic_streambuf * const this)
{
  char_type * _3;

  <bb 2> :
  gimple_assign <component_ref, _3, this_2(D)->_M_in_end, NULL, NULL>
  gimple_return <_3>

}



;; Function std::flush<char, std::char_traits<char> > (_ZSt5flushIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, funcdef_no=4313, decl_uid=44694, cgraph_uid=1792, symbol_order=2376)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__os = &NONLOCAL
callescape(10) = NONLOCAL
CALLUSED(11) = callescape(10)
callarg(13) = __os
callarg(13) = callarg(13) + UNKNOWN
callarg(13) = *callarg(13) + UNKNOWN
CALLUSED(11) = callarg(13)
*callarg(13) = callescape(10)
CALLCLOBBERED(12) = callarg(13)
callescape(10) = callarg(13)
ESCAPED = __os
_4 = NONLOCAL
_4 = callarg(13)

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__os = { NONLOCAL }
_ZNSo5flushEv = { }
callescape(10) = { ESCAPED NONLOCAL }
CALLUSED(11) = { ESCAPED NONLOCAL } same as callescape(10)
CALLCLOBBERED(12) = { ESCAPED NONLOCAL } same as callarg(13)
callarg(13) = { ESCAPED NONLOCAL }
_4 = { ESCAPED NONLOCAL } same as callescape(10)
_ZSt5flushIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_ = { }


Alias information for std::flush<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)std::basic_ostream<char, std::char_traits<char> >&

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__os_2(D), points-to non-local, points-to vars: { }
_4, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

struct basic_ostream & std::flush<char, std::char_traits<char> > (struct basic_ostream & __os)
{
  struct basic_ostream & _4;

  <bb 2> :
  gimple_call <flush, _4, __os_2(D)>
  gimple_return <_4>

}



;; Function std::operator<< <char, std::char_traits<char>, std::allocator<char> > (_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKNSt7__cxx1112basic_stringIS4_S5_T1_EE, funcdef_no=4080, decl_uid=34761, cgraph_uid=1559, symbol_order=2135)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__os = &NONLOCAL
__str = &NONLOCAL
_6 = *__str
_7 = *__str + 64
_3 = _7
callescape(14) = NONLOCAL
CALLUSED(15) = callescape(14)
callarg(17) = __os
callarg(17) = callarg(17) + UNKNOWN
callarg(17) = *callarg(17) + UNKNOWN
CALLUSED(15) = callarg(17)
*callarg(17) = callescape(14)
CALLCLOBBERED(16) = callarg(17)
callescape(14) = callarg(17)
ESCAPED = __os
callarg(18) = _6
callarg(18) = callarg(18) + UNKNOWN
callarg(18) = *callarg(18) + UNKNOWN
CALLUSED(15) = callarg(18)
*callarg(18) = callescape(14)
CALLCLOBBERED(16) = callarg(18)
callescape(14) = callarg(18)
ESCAPED = _6
callarg(19) = _3
callarg(19) = callarg(19) + UNKNOWN
callarg(19) = *callarg(19) + UNKNOWN
CALLUSED(15) = callarg(19)
*callarg(19) = callescape(14)
CALLCLOBBERED(16) = callarg(19)
callescape(14) = callarg(19)
ESCAPED = _3
_10 = NONLOCAL
_10 = callarg(17)
_10 = callarg(18)
_10 = callarg(19)

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__os = { NONLOCAL }
__str = { NONLOCAL } same as __os
_6 = { ESCAPED NONLOCAL }
_7 = { ESCAPED NONLOCAL }
_3 = { ESCAPED NONLOCAL } same as _7
_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l = { }
callescape(14) = { ESCAPED NONLOCAL }
CALLUSED(15) = { ESCAPED NONLOCAL } same as callescape(14)
CALLCLOBBERED(16) = { ESCAPED NONLOCAL }
callarg(17) = { ESCAPED NONLOCAL }
callarg(18) = { ESCAPED NONLOCAL }
callarg(19) = { ESCAPED NONLOCAL }
_10 = { ESCAPED NONLOCAL } same as callescape(14)
_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKNSt7__cxx1112basic_stringIS4_S5_T1_EE = { }


Alias information for std::operator<< <char, std::char_traits<char>, std::allocator<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)std::basic_ostream<char, std::char_traits<char> >&

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__str_5(D), points-to non-local, points-to vars: { }
_6, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
__os_8(D), points-to non-local, points-to vars: { }
_10, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

struct basic_ostream & std::operator<< <char, std::char_traits<char>, std::allocator<char> > (struct basic_ostream & __os, const struct basic_string & __str)
{
  const char * D.98200;
  size_type D.98198;
  long int _3;
  char * _6;
  long unsigned int _7;
  struct basic_ostream & _10;

  <bb 2> :
  gimple_assign <component_ref, _6, __str_5(D)->_M_dataplus._M_p, NULL, NULL>
  gimple_assign <component_ref, _7, __str_5(D)->_M_string_length, NULL, NULL>
  gimple_assign <nop_expr, _3, _7, NULL, NULL>
  gimple_call <__ostream_insert, _10, __os_8(D), _6, _3>
  gimple_return <_10>

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check (_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEmPKc, funcdef_no=4302, decl_uid=28248, cgraph_uid=1781, symbol_order=2365)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__pos = &NONLOCAL
__s = &NONLOCAL
_9 = *this + 64
_5 = *this + 64
callescape(14) = NONLOCAL
CALLUSED(15) = callescape(14)
callarg(17) = &STRING
callarg(17) = callarg(17) + UNKNOWN
callarg(17) = *callarg(17) + UNKNOWN
CALLUSED(15) = callarg(17)
*callarg(17) = callescape(14)
CALLCLOBBERED(16) = callarg(17)
callescape(14) = callarg(17)
ESCAPED = &STRING
callarg(18) = __s
callarg(18) = callarg(18) + UNKNOWN
callarg(18) = *callarg(18) + UNKNOWN
CALLUSED(15) = callarg(18)
*callarg(18) = callescape(14)
CALLCLOBBERED(16) = callarg(18)
callescape(14) = callarg(18)
ESCAPED = __s
callarg(19) = __pos
callarg(19) = callarg(19) + UNKNOWN
callarg(19) = *callarg(19) + UNKNOWN
CALLUSED(15) = callarg(19)
*callarg(19) = callescape(14)
CALLCLOBBERED(16) = callarg(19)
callescape(14) = callarg(19)
ESCAPED = __pos
callarg(20) = _5
callarg(20) = callarg(20) + UNKNOWN
callarg(20) = *callarg(20) + UNKNOWN
CALLUSED(15) = callarg(20)
*callarg(20) = callescape(14)
CALLCLOBBERED(16) = callarg(20)
callescape(14) = callarg(20)
ESCAPED = _5

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { STRING ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__pos = { NONLOCAL } same as this
__s = { NONLOCAL } same as this
_9 = { ESCAPED NONLOCAL }
_5 = { ESCAPED NONLOCAL }
_ZSt24__throw_out_of_range_fmtPKcz = { }
callescape(14) = { STRING ESCAPED NONLOCAL }
CALLUSED(15) = { STRING ESCAPED NONLOCAL } same as callescape(14)
CALLCLOBBERED(16) = { STRING ESCAPED NONLOCAL }
callarg(17) = { STRING }
callarg(18) = { ESCAPED NONLOCAL }
callarg(19) = { ESCAPED NONLOCAL }
callarg(20) = { ESCAPED NONLOCAL }
_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEmPKc = { }


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_4(D), points-to non-local, points-to vars: { }
__s_10(D), points-to non-local, points-to NULL, points-to vars: { }

size_type std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check (const struct basic_string * const this, size_type __pos, const char * __s)
{
  size_type D.98205;
  size_type D.98203;
  long unsigned int _5;
  long unsigned int _9;

  <bb 2> :
  gimple_assign <component_ref, _9, this_4(D)->_M_string_length, NULL, NULL>
  gimple_cond <gt_expr, __pos_6(D), _9, NULL, NULL>
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  gimple_assign <component_ref, _5, this_4(D)->_M_string_length, NULL, NULL>
  gimple_call <__throw_out_of_range_fmt, NULL, "%s: __pos (which is %zu) > this->size() (which is %zu)", __s_10(D), __pos_6(D), _5>

  <bb 4> :
  gimple_return <__pos_6(D)>

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEmmPKcm, funcdef_no=4396, decl_uid=28756, cgraph_uid=1875, symbol_order=2459)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__pos = &NONLOCAL
__n1 = &NONLOCAL
__s = &NONLOCAL
__n2 = &NONLOCAL
_17 = *this + 64
callescape(15) = NONLOCAL
CALLUSED(16) = callescape(15)
callarg(18) = &STRING
callarg(18) = callarg(18) + UNKNOWN
callarg(18) = *callarg(18) + UNKNOWN
CALLUSED(16) = callarg(18)
*callarg(18) = callescape(15)
CALLCLOBBERED(17) = callarg(18)
callescape(15) = callarg(18)
ESCAPED = &STRING
callarg(19) = &STRING
callarg(19) = callarg(19) + UNKNOWN
callarg(19) = *callarg(19) + UNKNOWN
CALLUSED(16) = callarg(19)
*callarg(19) = callescape(15)
CALLCLOBBERED(17) = callarg(19)
callescape(15) = callarg(19)
ESCAPED = &STRING
callarg(20) = __pos
callarg(20) = callarg(20) + UNKNOWN
callarg(20) = *callarg(20) + UNKNOWN
CALLUSED(16) = callarg(20)
*callarg(20) = callescape(15)
CALLCLOBBERED(17) = callarg(20)
callescape(15) = callarg(20)
ESCAPED = __pos
callarg(21) = _17
callarg(21) = callarg(21) + UNKNOWN
callarg(21) = *callarg(21) + UNKNOWN
CALLUSED(16) = callarg(21)
*callarg(21) = callescape(15)
CALLCLOBBERED(17) = callarg(21)
callescape(15) = callarg(21)
ESCAPED = _17
_9 = *this + 64
_15 = _9 + UNKNOWN
_15 = __pos + UNKNOWN
_16 = __n1 + UNKNOWN
_16 = _15 + UNKNOWN
callescape(26) = NONLOCAL
CALLUSED(27) = callescape(26)
callarg(29) = this
callarg(29) = callarg(29) + UNKNOWN
callarg(29) = *callarg(29) + UNKNOWN
CALLUSED(27) = callarg(29)
*callarg(29) = callescape(26)
CALLCLOBBERED(28) = callarg(29)
callescape(26) = callarg(29)
ESCAPED = this
callarg(30) = __pos
callarg(30) = callarg(30) + UNKNOWN
callarg(30) = *callarg(30) + UNKNOWN
CALLUSED(27) = callarg(30)
*callarg(30) = callescape(26)
CALLCLOBBERED(28) = callarg(30)
callescape(26) = callarg(30)
ESCAPED = __pos
callarg(31) = _16
callarg(31) = callarg(31) + UNKNOWN
callarg(31) = *callarg(31) + UNKNOWN
CALLUSED(27) = callarg(31)
*callarg(31) = callescape(26)
CALLCLOBBERED(28) = callarg(31)
callescape(26) = callarg(31)
ESCAPED = _16
callarg(32) = __s
callarg(32) = callarg(32) + UNKNOWN
callarg(32) = *callarg(32) + UNKNOWN
CALLUSED(27) = callarg(32)
*callarg(32) = callescape(26)
CALLCLOBBERED(28) = callarg(32)
callescape(26) = callarg(32)
ESCAPED = __s
callarg(33) = __n2
callarg(33) = callarg(33) + UNKNOWN
callarg(33) = *callarg(33) + UNKNOWN
CALLUSED(27) = callarg(33)
*callarg(33) = callescape(26)
CALLCLOBBERED(28) = callarg(33)
callescape(26) = callarg(33)
ESCAPED = __n2
_13 = NONLOCAL
_13 = callarg(29)
_13 = callarg(30)
_13 = callarg(31)
_13 = callarg(32)
_13 = callarg(33)

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { STRING ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__pos = { NONLOCAL } same as this
__n1 = { NONLOCAL } same as this
__s = { NONLOCAL } same as this
__n2 = { NONLOCAL } same as this
_17 = { ESCAPED NONLOCAL }
_ZSt24__throw_out_of_range_fmtPKcz = { }
callescape(15) = { STRING ESCAPED NONLOCAL }
CALLUSED(16) = { STRING ESCAPED NONLOCAL } same as callescape(15)
CALLCLOBBERED(17) = { STRING ESCAPED NONLOCAL }
callarg(18) = { STRING }
callarg(19) = { STRING }
callarg(20) = { ESCAPED NONLOCAL }
callarg(21) = { ESCAPED NONLOCAL }
_9 = { ESCAPED NONLOCAL }
_15 = { ESCAPED NONLOCAL }
_16 = { ESCAPED NONLOCAL }
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm = { }
callescape(26) = { ESCAPED NONLOCAL }
CALLUSED(27) = { ESCAPED NONLOCAL } same as callescape(26)
CALLCLOBBERED(28) = { ESCAPED NONLOCAL }
callarg(29) = { ESCAPED NONLOCAL }
callarg(30) = { ESCAPED NONLOCAL }
callarg(31) = { ESCAPED NONLOCAL }
callarg(32) = { ESCAPED NONLOCAL }
callarg(33) = { ESCAPED NONLOCAL }
_13 = { ESCAPED NONLOCAL } same as callescape(26)
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEmmPKcm = { }


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*, unsigned long)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_4(D), points-to non-local, points-to vars: { }
__s_10(D), points-to non-local, points-to NULL, points-to vars: { }
_13, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

struct basic_string & std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace (struct basic_string * const this, size_type __pos, size_type __n1, const char * __s, size_type __n2)
{
  size_type D.98214;
  size_type D.98210;
  long unsigned int _9;
  struct basic_string & _13;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;

  <bb 2> :
  gimple_assign <component_ref, _17, MEM[(const struct basic_string *)this_4(D)]._M_string_length, NULL, NULL>
  gimple_cond <gt_expr, __pos_5(D), _17, NULL, NULL>
    goto <bb 3>; [0.04%]
  else
    goto <bb 4>; [99.96%]

  <bb 3> :
  gimple_call <__throw_out_of_range_fmt, NULL, "%s: __pos (which is %zu) > this->size() (which is %zu)", "basic_string::replace", __pos_5(D), _17>

  <bb 4> :
  gimple_assign <component_ref, _9, MEM[(const struct basic_string *)this_4(D)]._M_string_length, NULL, NULL>
  gimple_assign <minus_expr, _15, _9, __pos_5(D), NULL>
  gimple_assign <min_expr, _16, __n1_8(D), _15, NULL>
  gimple_call <_M_replace, _13, this_4(D), __pos_5(D), _16, __s_10(D), __n2_11(D)>
  gimple_return <_13>

}



;; Function std::basic_ostream<char, std::char_traits<char> >::basic_ostream (_ZNSoC2Ev, funcdef_no=4322, decl_uid=44618, cgraph_uid=1801, symbol_order=2385)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &PARM_NOALIAS.0+64
PARM_NOALIAS.0+64 = &NONLOCAL
PARM_NOALIAS.64+64 = &NONLOCAL
PARM_NOALIAS.128+224 = &NONLOCAL
PARM_NOALIAS.384+64 = &NONLOCAL
PARM_NOALIAS.448+64 = &NONLOCAL
PARM_NOALIAS.512+1120 = &NONLOCAL
PARM_NOALIAS.1664+64 = &NONLOCAL
PARM_NOALIAS.1728+64 = &NONLOCAL
PARM_NOALIAS.1792+64 = &NONLOCAL
PARM_NOALIAS.1856+16 = &NONLOCAL
PARM_NOALIAS.1920+64 = &NONLOCAL
PARM_NOALIAS.1984+64 = &NONLOCAL
PARM_NOALIAS.2048+64 = &NONLOCAL
PARM_NOALIAS.2112+64 = &NONLOCAL
__vtt_parm = &NONLOCAL
_1 = *__vtt_parm
*this = _1
_2 = *this
_4 = *_2 + -192
_5 = _4
_6 = this + UNKNOWN
_7 = *__vtt_parm + 64
*_6 = _7
_8 = *this
_10 = *_8 + -192
_11 = _10
_12 = this + UNKNOWN
callescape(35) = NONLOCAL
CALLUSED(36) = callescape(35)
callarg(38) = _12
callarg(38) = callarg(38) + UNKNOWN
callarg(38) = *callarg(38) + UNKNOWN
CALLUSED(36) = callarg(38)
*callarg(38) = callescape(35)
CALLCLOBBERED(37) = callarg(38)
callescape(35) = callarg(38)
ESCAPED = _12
callarg(39) = &NULL
callarg(39) = callarg(39) + UNKNOWN
callarg(39) = *callarg(39) + UNKNOWN
CALLUSED(36) = callarg(39)
*callarg(39) = callescape(35)
CALLCLOBBERED(37) = callarg(39)
callescape(35) = callarg(39)
ESCAPED = &NULL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+64 PARM_NOALIAS.128+224 PARM_NOALIAS.384+64 PARM_NOALIAS.448+64 PARM_NOALIAS.512+1120 PARM_NOALIAS.1664+64 PARM_NOALIAS.1728+64 PARM_NOALIAS.1792+64 PARM_NOALIAS.1856+16 PARM_NOALIAS.1920+64 PARM_NOALIAS.1984+64 PARM_NOALIAS.2048+64 PARM_NOALIAS.2112+64 }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
PARM_NOALIAS.0+64 = { ESCAPED NONLOCAL }
PARM_NOALIAS.64+64 = { NULL ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+64 PARM_NOALIAS.128+224 PARM_NOALIAS.384+64 PARM_NOALIAS.448+64 PARM_NOALIAS.512+1120 PARM_NOALIAS.1664+64 PARM_NOALIAS.1728+64 PARM_NOALIAS.1792+64 PARM_NOALIAS.1856+16 PARM_NOALIAS.1920+64 PARM_NOALIAS.1984+64 PARM_NOALIAS.2048+64 PARM_NOALIAS.2112+64 }
PARM_NOALIAS.128+224 = { NULL ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+64 PARM_NOALIAS.128+224 PARM_NOALIAS.384+64 PARM_NOALIAS.448+64 PARM_NOALIAS.512+1120 PARM_NOALIAS.1664+64 PARM_NOALIAS.1728+64 PARM_NOALIAS.1792+64 PARM_NOALIAS.1856+16 PARM_NOALIAS.1920+64 PARM_NOALIAS.1984+64 PARM_NOALIAS.2048+64 PARM_NOALIAS.2112+64 }
PARM_NOALIAS.384+64 = { NULL ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+64 PARM_NOALIAS.128+224 PARM_NOALIAS.384+64 PARM_NOALIAS.448+64 PARM_NOALIAS.512+1120 PARM_NOALIAS.1664+64 PARM_NOALIAS.1728+64 PARM_NOALIAS.1792+64 PARM_NOALIAS.1856+16 PARM_NOALIAS.1920+64 PARM_NOALIAS.1984+64 PARM_NOALIAS.2048+64 PARM_NOALIAS.2112+64 }
PARM_NOALIAS.448+64 = { NULL ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+64 PARM_NOALIAS.128+224 PARM_NOALIAS.384+64 PARM_NOALIAS.448+64 PARM_NOALIAS.512+1120 PARM_NOALIAS.1664+64 PARM_NOALIAS.1728+64 PARM_NOALIAS.1792+64 PARM_NOALIAS.1856+16 PARM_NOALIAS.1920+64 PARM_NOALIAS.1984+64 PARM_NOALIAS.2048+64 PARM_NOALIAS.2112+64 }
PARM_NOALIAS.512+1120 = { NULL ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+64 PARM_NOALIAS.128+224 PARM_NOALIAS.384+64 PARM_NOALIAS.448+64 PARM_NOALIAS.512+1120 PARM_NOALIAS.1664+64 PARM_NOALIAS.1728+64 PARM_NOALIAS.1792+64 PARM_NOALIAS.1856+16 PARM_NOALIAS.1920+64 PARM_NOALIAS.1984+64 PARM_NOALIAS.2048+64 PARM_NOALIAS.2112+64 }
PARM_NOALIAS.1664+64 = { NULL ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+64 PARM_NOALIAS.128+224 PARM_NOALIAS.384+64 PARM_NOALIAS.448+64 PARM_NOALIAS.512+1120 PARM_NOALIAS.1664+64 PARM_NOALIAS.1728+64 PARM_NOALIAS.1792+64 PARM_NOALIAS.1856+16 PARM_NOALIAS.1920+64 PARM_NOALIAS.1984+64 PARM_NOALIAS.2048+64 PARM_NOALIAS.2112+64 }
PARM_NOALIAS.1728+64 = { NULL ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+64 PARM_NOALIAS.128+224 PARM_NOALIAS.384+64 PARM_NOALIAS.448+64 PARM_NOALIAS.512+1120 PARM_NOALIAS.1664+64 PARM_NOALIAS.1728+64 PARM_NOALIAS.1792+64 PARM_NOALIAS.1856+16 PARM_NOALIAS.1920+64 PARM_NOALIAS.1984+64 PARM_NOALIAS.2048+64 PARM_NOALIAS.2112+64 }
PARM_NOALIAS.1792+64 = { NULL ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+64 PARM_NOALIAS.128+224 PARM_NOALIAS.384+64 PARM_NOALIAS.448+64 PARM_NOALIAS.512+1120 PARM_NOALIAS.1664+64 PARM_NOALIAS.1728+64 PARM_NOALIAS.1792+64 PARM_NOALIAS.1856+16 PARM_NOALIAS.1920+64 PARM_NOALIAS.1984+64 PARM_NOALIAS.2048+64 PARM_NOALIAS.2112+64 }
PARM_NOALIAS.1856+16 = { NULL ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+64 PARM_NOALIAS.128+224 PARM_NOALIAS.384+64 PARM_NOALIAS.448+64 PARM_NOALIAS.512+1120 PARM_NOALIAS.1664+64 PARM_NOALIAS.1728+64 PARM_NOALIAS.1792+64 PARM_NOALIAS.1856+16 PARM_NOALIAS.1920+64 PARM_NOALIAS.1984+64 PARM_NOALIAS.2048+64 PARM_NOALIAS.2112+64 }
PARM_NOALIAS.1920+64 = { NULL ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+64 PARM_NOALIAS.128+224 PARM_NOALIAS.384+64 PARM_NOALIAS.448+64 PARM_NOALIAS.512+1120 PARM_NOALIAS.1664+64 PARM_NOALIAS.1728+64 PARM_NOALIAS.1792+64 PARM_NOALIAS.1856+16 PARM_NOALIAS.1920+64 PARM_NOALIAS.1984+64 PARM_NOALIAS.2048+64 PARM_NOALIAS.2112+64 }
PARM_NOALIAS.1984+64 = { NULL ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+64 PARM_NOALIAS.128+224 PARM_NOALIAS.384+64 PARM_NOALIAS.448+64 PARM_NOALIAS.512+1120 PARM_NOALIAS.1664+64 PARM_NOALIAS.1728+64 PARM_NOALIAS.1792+64 PARM_NOALIAS.1856+16 PARM_NOALIAS.1920+64 PARM_NOALIAS.1984+64 PARM_NOALIAS.2048+64 PARM_NOALIAS.2112+64 }
PARM_NOALIAS.2048+64 = { NULL ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+64 PARM_NOALIAS.128+224 PARM_NOALIAS.384+64 PARM_NOALIAS.448+64 PARM_NOALIAS.512+1120 PARM_NOALIAS.1664+64 PARM_NOALIAS.1728+64 PARM_NOALIAS.1792+64 PARM_NOALIAS.1856+16 PARM_NOALIAS.1920+64 PARM_NOALIAS.1984+64 PARM_NOALIAS.2048+64 PARM_NOALIAS.2112+64 }
PARM_NOALIAS.2112+64 = { NULL ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+64 PARM_NOALIAS.128+224 PARM_NOALIAS.384+64 PARM_NOALIAS.448+64 PARM_NOALIAS.512+1120 PARM_NOALIAS.1664+64 PARM_NOALIAS.1728+64 PARM_NOALIAS.1792+64 PARM_NOALIAS.1856+16 PARM_NOALIAS.1920+64 PARM_NOALIAS.1984+64 PARM_NOALIAS.2048+64 PARM_NOALIAS.2112+64 }
this = { PARM_NOALIAS.0+64 }
__vtt_parm = { NONLOCAL }
_1 = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL }
_4 = { ESCAPED NONLOCAL }
_5 = { ESCAPED NONLOCAL } same as _4
_6 = { PARM_NOALIAS.0+64 PARM_NOALIAS.64+64 PARM_NOALIAS.128+224 PARM_NOALIAS.384+64 PARM_NOALIAS.448+64 PARM_NOALIAS.512+1120 PARM_NOALIAS.1664+64 PARM_NOALIAS.1728+64 PARM_NOALIAS.1792+64 PARM_NOALIAS.1856+16 PARM_NOALIAS.1920+64 PARM_NOALIAS.1984+64 PARM_NOALIAS.2048+64 PARM_NOALIAS.2112+64 }
_7 = { ESCAPED NONLOCAL }
_8 = { ESCAPED NONLOCAL } same as _2
_10 = { ESCAPED NONLOCAL }
_11 = { ESCAPED NONLOCAL } same as _10
_12 = { PARM_NOALIAS.0+64 PARM_NOALIAS.64+64 PARM_NOALIAS.128+224 PARM_NOALIAS.384+64 PARM_NOALIAS.448+64 PARM_NOALIAS.512+1120 PARM_NOALIAS.1664+64 PARM_NOALIAS.1728+64 PARM_NOALIAS.1792+64 PARM_NOALIAS.1856+16 PARM_NOALIAS.1920+64 PARM_NOALIAS.1984+64 PARM_NOALIAS.2048+64 PARM_NOALIAS.2112+64 }
_ZNSt9basic_iosIcSt11char_traitsIcEE4initEPSt15basic_streambufIcS1_E = { }
callescape(35) = { NULL ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+64 PARM_NOALIAS.128+224 PARM_NOALIAS.384+64 PARM_NOALIAS.448+64 PARM_NOALIAS.512+1120 PARM_NOALIAS.1664+64 PARM_NOALIAS.1728+64 PARM_NOALIAS.1792+64 PARM_NOALIAS.1856+16 PARM_NOALIAS.1920+64 PARM_NOALIAS.1984+64 PARM_NOALIAS.2048+64 PARM_NOALIAS.2112+64 }
CALLUSED(36) = { NULL ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+64 PARM_NOALIAS.128+224 PARM_NOALIAS.384+64 PARM_NOALIAS.448+64 PARM_NOALIAS.512+1120 PARM_NOALIAS.1664+64 PARM_NOALIAS.1728+64 PARM_NOALIAS.1792+64 PARM_NOALIAS.1856+16 PARM_NOALIAS.1920+64 PARM_NOALIAS.1984+64 PARM_NOALIAS.2048+64 PARM_NOALIAS.2112+64 } same as callescape(35)
CALLCLOBBERED(37) = { NULL ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+64 PARM_NOALIAS.128+224 PARM_NOALIAS.384+64 PARM_NOALIAS.448+64 PARM_NOALIAS.512+1120 PARM_NOALIAS.1664+64 PARM_NOALIAS.1728+64 PARM_NOALIAS.1792+64 PARM_NOALIAS.1856+16 PARM_NOALIAS.1920+64 PARM_NOALIAS.1984+64 PARM_NOALIAS.2048+64 PARM_NOALIAS.2112+64 }
callarg(38) = { NULL ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+64 PARM_NOALIAS.128+224 PARM_NOALIAS.384+64 PARM_NOALIAS.448+64 PARM_NOALIAS.512+1120 PARM_NOALIAS.1664+64 PARM_NOALIAS.1728+64 PARM_NOALIAS.1792+64 PARM_NOALIAS.1856+16 PARM_NOALIAS.1920+64 PARM_NOALIAS.1984+64 PARM_NOALIAS.2048+64 PARM_NOALIAS.2112+64 }
callarg(39) = { NULL }


Alias information for std::basic_ostream<char, std::char_traits<char> >::basic_ostream()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.98216 } (nonlocal, escaped, restrict)

Flow-insensitive points-to information

_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_2, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_6, points-to NULL, points-to vars: { D.98216 } (nonlocal, escaped, restrict)
_7, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_8, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_12, points-to NULL, points-to vars: { D.98216 } (nonlocal, escaped, restrict)
__vtt_parm_14(D), points-to non-local, points-to NULL, points-to vars: { }
this_15(D), points-to vars: { D.98216 } (nonlocal, escaped, restrict)

void std::basic_ostream<char, std::char_traits<char> >::basic_ostream (struct basic_ostream * const this, const void * * __vtt_parm)
{
  const void * _1;
  int (*__vtbl_ptr_type) () * _2;
  long int _4;
  sizetype _5;
  struct basic_ostream * _6;
  const void * _7;
  int (*__vtbl_ptr_type) () * _8;
  long int _10;
  sizetype _11;
  struct basic_ios * _12;

  <bb 2> :
  gimple_assign <mem_ref, _1, *__vtt_parm_14(D), NULL, NULL>
  gimple_assign <ssa_name, *this_15(D)._vptr.basic_ostream, _1, NULL, NULL>
  gimple_assign <component_ref, _2, *this_15(D)._vptr.basic_ostream, NULL, NULL>
  gimple_assign <mem_ref, _4, MEM[(long int *)_2 + -24B], NULL, NULL>
  gimple_assign <nop_expr, _5, _4, NULL, NULL>
  gimple_assign <pointer_plus_expr, _6, this_15(D), _5, NULL>
  gimple_assign <mem_ref, _7, MEM[(const void * *)__vtt_parm_14(D) + 8B], NULL, NULL>
  gimple_assign <ssa_name, MEM[(struct basic_ios *)_6].D.43795._vptr.ios_base, _7, NULL, NULL>
  gimple_assign <component_ref, _8, *this_15(D)._vptr.basic_ostream, NULL, NULL>
  gimple_assign <mem_ref, _10, MEM[(long int *)_8 + -24B], NULL, NULL>
  gimple_assign <nop_expr, _11, _10, NULL, NULL>
  gimple_assign <pointer_plus_expr, _12, this_15(D), _11, NULL>
  gimple_call <init, NULL, _12, 0B>
  gimple_return <NULL>

}



;; Function std::basic_ios<char, std::char_traits<char> >::basic_ios (_ZNSt9basic_iosIcSt11char_traitsIcEEC2Ev, funcdef_no=4315, decl_uid=43778, cgraph_uid=1794, symbol_order=2378)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &PARM_NOALIAS.0+64
PARM_NOALIAS.0+64 = &NONLOCAL
PARM_NOALIAS.64+224 = &NONLOCAL
PARM_NOALIAS.320+64 = &NONLOCAL
PARM_NOALIAS.384+64 = &NONLOCAL
PARM_NOALIAS.448+1120 = &NONLOCAL
PARM_NOALIAS.1600+64 = &NONLOCAL
PARM_NOALIAS.1664+64 = &NONLOCAL
PARM_NOALIAS.1728+64 = &NONLOCAL
PARM_NOALIAS.1792+16 = &NONLOCAL
PARM_NOALIAS.1856+64 = &NONLOCAL
PARM_NOALIAS.1920+64 = &NONLOCAL
PARM_NOALIAS.1984+64 = &NONLOCAL
PARM_NOALIAS.2048+64 = &NONLOCAL
_1 = this + UNKNOWN
callescape(24) = NONLOCAL
CALLUSED(25) = callescape(24)
callarg(27) = _1
callarg(27) = callarg(27) + UNKNOWN
callarg(27) = *callarg(27) + UNKNOWN
CALLUSED(25) = callarg(27)
*callarg(27) = callescape(24)
CALLCLOBBERED(26) = callarg(27)
callescape(24) = callarg(27)
ESCAPED = _1
_ZTVSt9basic_iosIcSt11char_traitsIcEE = NONLOCAL
derefaddrtmp(29) = &_ZTVSt9basic_iosIcSt11char_traitsIcEE
*this = derefaddrtmp(29)
derefaddrtmp(30) = &NULL
*this + 1728 = derefaddrtmp(30)
derefaddrtmp(31) = &NULL
*this + 1792 = derefaddrtmp(31)
derefaddrtmp(32) = &NULL
*this + 1800 = derefaddrtmp(32)
derefaddrtmp(33) = &NULL
*this + 1856 = derefaddrtmp(33)
derefaddrtmp(34) = &NULL
*this + 1920 = derefaddrtmp(34)
derefaddrtmp(35) = &NULL
*this + 1984 = derefaddrtmp(35)
derefaddrtmp(36) = &NULL
*this + 2048 = derefaddrtmp(36)

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+224 PARM_NOALIAS.320+64 PARM_NOALIAS.384+64 PARM_NOALIAS.448+1120 PARM_NOALIAS.1600+64 PARM_NOALIAS.1664+64 PARM_NOALIAS.1728+64 PARM_NOALIAS.1792+16 PARM_NOALIAS.1856+64 PARM_NOALIAS.1920+64 PARM_NOALIAS.1984+64 PARM_NOALIAS.2048+64 _ZTVSt9basic_iosIcSt11char_traitsIcEE }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
PARM_NOALIAS.0+64 = { NULL ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+224 PARM_NOALIAS.320+64 PARM_NOALIAS.384+64 PARM_NOALIAS.448+1120 PARM_NOALIAS.1600+64 PARM_NOALIAS.1664+64 PARM_NOALIAS.1728+64 PARM_NOALIAS.1792+16 PARM_NOALIAS.1856+64 PARM_NOALIAS.1920+64 PARM_NOALIAS.1984+64 PARM_NOALIAS.2048+64 _ZTVSt9basic_iosIcSt11char_traitsIcEE }
PARM_NOALIAS.64+224 = { NULL ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+224 PARM_NOALIAS.320+64 PARM_NOALIAS.384+64 PARM_NOALIAS.448+1120 PARM_NOALIAS.1600+64 PARM_NOALIAS.1664+64 PARM_NOALIAS.1728+64 PARM_NOALIAS.1792+16 PARM_NOALIAS.1856+64 PARM_NOALIAS.1920+64 PARM_NOALIAS.1984+64 PARM_NOALIAS.2048+64 _ZTVSt9basic_iosIcSt11char_traitsIcEE }
PARM_NOALIAS.320+64 = { NULL ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+224 PARM_NOALIAS.320+64 PARM_NOALIAS.384+64 PARM_NOALIAS.448+1120 PARM_NOALIAS.1600+64 PARM_NOALIAS.1664+64 PARM_NOALIAS.1728+64 PARM_NOALIAS.1792+16 PARM_NOALIAS.1856+64 PARM_NOALIAS.1920+64 PARM_NOALIAS.1984+64 PARM_NOALIAS.2048+64 _ZTVSt9basic_iosIcSt11char_traitsIcEE }
PARM_NOALIAS.384+64 = { NULL ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+224 PARM_NOALIAS.320+64 PARM_NOALIAS.384+64 PARM_NOALIAS.448+1120 PARM_NOALIAS.1600+64 PARM_NOALIAS.1664+64 PARM_NOALIAS.1728+64 PARM_NOALIAS.1792+16 PARM_NOALIAS.1856+64 PARM_NOALIAS.1920+64 PARM_NOALIAS.1984+64 PARM_NOALIAS.2048+64 _ZTVSt9basic_iosIcSt11char_traitsIcEE }
PARM_NOALIAS.448+1120 = { NULL ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+224 PARM_NOALIAS.320+64 PARM_NOALIAS.384+64 PARM_NOALIAS.448+1120 PARM_NOALIAS.1600+64 PARM_NOALIAS.1664+64 PARM_NOALIAS.1728+64 PARM_NOALIAS.1792+16 PARM_NOALIAS.1856+64 PARM_NOALIAS.1920+64 PARM_NOALIAS.1984+64 PARM_NOALIAS.2048+64 _ZTVSt9basic_iosIcSt11char_traitsIcEE }
PARM_NOALIAS.1600+64 = { NULL ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+224 PARM_NOALIAS.320+64 PARM_NOALIAS.384+64 PARM_NOALIAS.448+1120 PARM_NOALIAS.1600+64 PARM_NOALIAS.1664+64 PARM_NOALIAS.1728+64 PARM_NOALIAS.1792+16 PARM_NOALIAS.1856+64 PARM_NOALIAS.1920+64 PARM_NOALIAS.1984+64 PARM_NOALIAS.2048+64 _ZTVSt9basic_iosIcSt11char_traitsIcEE }
PARM_NOALIAS.1664+64 = { NULL ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+224 PARM_NOALIAS.320+64 PARM_NOALIAS.384+64 PARM_NOALIAS.448+1120 PARM_NOALIAS.1600+64 PARM_NOALIAS.1664+64 PARM_NOALIAS.1728+64 PARM_NOALIAS.1792+16 PARM_NOALIAS.1856+64 PARM_NOALIAS.1920+64 PARM_NOALIAS.1984+64 PARM_NOALIAS.2048+64 _ZTVSt9basic_iosIcSt11char_traitsIcEE }
PARM_NOALIAS.1728+64 = { NULL ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+224 PARM_NOALIAS.320+64 PARM_NOALIAS.384+64 PARM_NOALIAS.448+1120 PARM_NOALIAS.1600+64 PARM_NOALIAS.1664+64 PARM_NOALIAS.1728+64 PARM_NOALIAS.1792+16 PARM_NOALIAS.1856+64 PARM_NOALIAS.1920+64 PARM_NOALIAS.1984+64 PARM_NOALIAS.2048+64 _ZTVSt9basic_iosIcSt11char_traitsIcEE }
PARM_NOALIAS.1792+16 = { NULL ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+224 PARM_NOALIAS.320+64 PARM_NOALIAS.384+64 PARM_NOALIAS.448+1120 PARM_NOALIAS.1600+64 PARM_NOALIAS.1664+64 PARM_NOALIAS.1728+64 PARM_NOALIAS.1792+16 PARM_NOALIAS.1856+64 PARM_NOALIAS.1920+64 PARM_NOALIAS.1984+64 PARM_NOALIAS.2048+64 _ZTVSt9basic_iosIcSt11char_traitsIcEE }
PARM_NOALIAS.1856+64 = { NULL ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+224 PARM_NOALIAS.320+64 PARM_NOALIAS.384+64 PARM_NOALIAS.448+1120 PARM_NOALIAS.1600+64 PARM_NOALIAS.1664+64 PARM_NOALIAS.1728+64 PARM_NOALIAS.1792+16 PARM_NOALIAS.1856+64 PARM_NOALIAS.1920+64 PARM_NOALIAS.1984+64 PARM_NOALIAS.2048+64 _ZTVSt9basic_iosIcSt11char_traitsIcEE }
PARM_NOALIAS.1920+64 = { NULL ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+224 PARM_NOALIAS.320+64 PARM_NOALIAS.384+64 PARM_NOALIAS.448+1120 PARM_NOALIAS.1600+64 PARM_NOALIAS.1664+64 PARM_NOALIAS.1728+64 PARM_NOALIAS.1792+16 PARM_NOALIAS.1856+64 PARM_NOALIAS.1920+64 PARM_NOALIAS.1984+64 PARM_NOALIAS.2048+64 _ZTVSt9basic_iosIcSt11char_traitsIcEE }
PARM_NOALIAS.1984+64 = { NULL ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+224 PARM_NOALIAS.320+64 PARM_NOALIAS.384+64 PARM_NOALIAS.448+1120 PARM_NOALIAS.1600+64 PARM_NOALIAS.1664+64 PARM_NOALIAS.1728+64 PARM_NOALIAS.1792+16 PARM_NOALIAS.1856+64 PARM_NOALIAS.1920+64 PARM_NOALIAS.1984+64 PARM_NOALIAS.2048+64 _ZTVSt9basic_iosIcSt11char_traitsIcEE }
PARM_NOALIAS.2048+64 = { NULL ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+224 PARM_NOALIAS.320+64 PARM_NOALIAS.384+64 PARM_NOALIAS.448+1120 PARM_NOALIAS.1600+64 PARM_NOALIAS.1664+64 PARM_NOALIAS.1728+64 PARM_NOALIAS.1792+16 PARM_NOALIAS.1856+64 PARM_NOALIAS.1920+64 PARM_NOALIAS.1984+64 PARM_NOALIAS.2048+64 _ZTVSt9basic_iosIcSt11char_traitsIcEE }
_ZTVSt9basic_iosIcSt11char_traitsIcEE = { ESCAPED NONLOCAL }
this = { PARM_NOALIAS.0+64 }
_1 = { PARM_NOALIAS.0+64 PARM_NOALIAS.64+224 PARM_NOALIAS.320+64 PARM_NOALIAS.384+64 PARM_NOALIAS.448+1120 PARM_NOALIAS.1600+64 PARM_NOALIAS.1664+64 PARM_NOALIAS.1728+64 PARM_NOALIAS.1792+16 PARM_NOALIAS.1856+64 PARM_NOALIAS.1920+64 PARM_NOALIAS.1984+64 PARM_NOALIAS.2048+64 }
_ZNSt8ios_baseC2Ev = { }
callescape(24) = { NULL ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+224 PARM_NOALIAS.320+64 PARM_NOALIAS.384+64 PARM_NOALIAS.448+1120 PARM_NOALIAS.1600+64 PARM_NOALIAS.1664+64 PARM_NOALIAS.1728+64 PARM_NOALIAS.1792+16 PARM_NOALIAS.1856+64 PARM_NOALIAS.1920+64 PARM_NOALIAS.1984+64 PARM_NOALIAS.2048+64 _ZTVSt9basic_iosIcSt11char_traitsIcEE }
CALLUSED(25) = { NULL ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+224 PARM_NOALIAS.320+64 PARM_NOALIAS.384+64 PARM_NOALIAS.448+1120 PARM_NOALIAS.1600+64 PARM_NOALIAS.1664+64 PARM_NOALIAS.1728+64 PARM_NOALIAS.1792+16 PARM_NOALIAS.1856+64 PARM_NOALIAS.1920+64 PARM_NOALIAS.1984+64 PARM_NOALIAS.2048+64 _ZTVSt9basic_iosIcSt11char_traitsIcEE } same as callescape(24)
CALLCLOBBERED(26) = { NULL ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+224 PARM_NOALIAS.320+64 PARM_NOALIAS.384+64 PARM_NOALIAS.448+1120 PARM_NOALIAS.1600+64 PARM_NOALIAS.1664+64 PARM_NOALIAS.1728+64 PARM_NOALIAS.1792+16 PARM_NOALIAS.1856+64 PARM_NOALIAS.1920+64 PARM_NOALIAS.1984+64 PARM_NOALIAS.2048+64 _ZTVSt9basic_iosIcSt11char_traitsIcEE } same as callarg(27)
callarg(27) = { NULL ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+224 PARM_NOALIAS.320+64 PARM_NOALIAS.384+64 PARM_NOALIAS.448+1120 PARM_NOALIAS.1600+64 PARM_NOALIAS.1664+64 PARM_NOALIAS.1728+64 PARM_NOALIAS.1792+16 PARM_NOALIAS.1856+64 PARM_NOALIAS.1920+64 PARM_NOALIAS.1984+64 PARM_NOALIAS.2048+64 _ZTVSt9basic_iosIcSt11char_traitsIcEE }
derefaddrtmp(29) = { _ZTVSt9basic_iosIcSt11char_traitsIcEE }
derefaddrtmp(30) = { NULL }
derefaddrtmp(31) = { NULL } same as derefaddrtmp(30)
derefaddrtmp(32) = { NULL } same as derefaddrtmp(30)
derefaddrtmp(33) = { NULL } same as derefaddrtmp(30)
derefaddrtmp(34) = { NULL } same as derefaddrtmp(30)
derefaddrtmp(35) = { NULL } same as derefaddrtmp(30)
derefaddrtmp(36) = { NULL } same as derefaddrtmp(30)


Alias information for std::basic_ios<char, std::char_traits<char> >::basic_ios()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.43805 D.98218 } (nonlocal, escaped, restrict, interposable)

Flow-insensitive points-to information

_1, points-to NULL, points-to vars: { D.98218 } (nonlocal, escaped, restrict)
this_5(D), points-to vars: { D.98218 } (nonlocal, escaped, restrict)

void std::basic_ios<char, std::char_traits<char> >::basic_ios (struct basic_ios * const this)
{
  struct ios_base * _1;
  struct ios_base * _3;

  <bb 2> :
  gimple_assign <constructor, *this_5(D), {CLOBBER}, NULL, NULL>
  gimple_assign <addr_expr, _1, &this_5(D)->D.43795, NULL, NULL>
  gimple_call <__ct_base , NULL, _1>
  gimple_assign <addr_expr, *this_5(D).D.43795._vptr.ios_base, &MEM <int (*__vtbl_ptr_type) ()[4]> [(void *)&_ZTVSt9basic_iosIcSt11char_traitsIcEE + 16B], NULL, NULL>
  gimple_assign <integer_cst, *this_5(D)._M_tie, 0B, NULL, NULL>
  gimple_assign <integer_cst, *this_5(D)._M_fill, 0, NULL, NULL>
  gimple_assign <integer_cst, *this_5(D)._M_fill_init, 0, NULL, NULL>
  gimple_assign <integer_cst, *this_5(D)._M_streambuf, 0B, NULL, NULL>
  gimple_assign <integer_cst, *this_5(D)._M_ctype, 0B, NULL, NULL>
  gimple_assign <integer_cst, *this_5(D)._M_num_put, 0B, NULL, NULL>
  gimple_assign <integer_cst, *this_5(D)._M_num_get, 0B, NULL, NULL>
  gimple_return <NULL>

}



;; Function std::basic_streambuf<char, std::char_traits<char> >::basic_streambuf (_ZNSt15basic_streambufIcSt11char_traitsIcEEC2Ev, funcdef_no=4573, decl_uid=39053, cgraph_uid=2052, symbol_order=2636)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &PARM_NOALIAS.0+64
PARM_NOALIAS.0+64 = &NONLOCAL
PARM_NOALIAS.64+64 = &NONLOCAL
PARM_NOALIAS.128+64 = &NONLOCAL
PARM_NOALIAS.192+64 = &NONLOCAL
PARM_NOALIAS.256+64 = &NONLOCAL
PARM_NOALIAS.320+64 = &NONLOCAL
PARM_NOALIAS.384+64 = &NONLOCAL
PARM_NOALIAS.448+64 = &NONLOCAL
_ZTVSt15basic_streambufIcSt11char_traitsIcEE = NONLOCAL
derefaddrtmp(18) = &_ZTVSt15basic_streambufIcSt11char_traitsIcEE
*this = derefaddrtmp(18)
derefaddrtmp(19) = &NULL
*this + 64 = derefaddrtmp(19)
derefaddrtmp(20) = &NULL
*this + 128 = derefaddrtmp(20)
derefaddrtmp(21) = &NULL
*this + 192 = derefaddrtmp(21)
derefaddrtmp(22) = &NULL
*this + 256 = derefaddrtmp(22)
derefaddrtmp(23) = &NULL
*this + 320 = derefaddrtmp(23)
derefaddrtmp(24) = &NULL
*this + 384 = derefaddrtmp(24)
_2 = this + UNKNOWN
callescape(27) = NONLOCAL
CALLUSED(28) = callescape(27)
callarg(30) = _2
callarg(30) = callarg(30) + UNKNOWN
callarg(30) = *callarg(30) + UNKNOWN
CALLUSED(28) = callarg(30)
*callarg(30) = callescape(27)
CALLCLOBBERED(29) = callarg(30)
callescape(27) = callarg(30)
ESCAPED = _2

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+64 PARM_NOALIAS.128+64 PARM_NOALIAS.192+64 PARM_NOALIAS.256+64 PARM_NOALIAS.320+64 PARM_NOALIAS.384+64 PARM_NOALIAS.448+64 _ZTVSt15basic_streambufIcSt11char_traitsIcEE }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
PARM_NOALIAS.0+64 = { NULL ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+64 PARM_NOALIAS.128+64 PARM_NOALIAS.192+64 PARM_NOALIAS.256+64 PARM_NOALIAS.320+64 PARM_NOALIAS.384+64 PARM_NOALIAS.448+64 _ZTVSt15basic_streambufIcSt11char_traitsIcEE }
PARM_NOALIAS.64+64 = { NULL ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+64 PARM_NOALIAS.128+64 PARM_NOALIAS.192+64 PARM_NOALIAS.256+64 PARM_NOALIAS.320+64 PARM_NOALIAS.384+64 PARM_NOALIAS.448+64 _ZTVSt15basic_streambufIcSt11char_traitsIcEE }
PARM_NOALIAS.128+64 = { NULL ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+64 PARM_NOALIAS.128+64 PARM_NOALIAS.192+64 PARM_NOALIAS.256+64 PARM_NOALIAS.320+64 PARM_NOALIAS.384+64 PARM_NOALIAS.448+64 _ZTVSt15basic_streambufIcSt11char_traitsIcEE }
PARM_NOALIAS.192+64 = { NULL ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+64 PARM_NOALIAS.128+64 PARM_NOALIAS.192+64 PARM_NOALIAS.256+64 PARM_NOALIAS.320+64 PARM_NOALIAS.384+64 PARM_NOALIAS.448+64 _ZTVSt15basic_streambufIcSt11char_traitsIcEE }
PARM_NOALIAS.256+64 = { NULL ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+64 PARM_NOALIAS.128+64 PARM_NOALIAS.192+64 PARM_NOALIAS.256+64 PARM_NOALIAS.320+64 PARM_NOALIAS.384+64 PARM_NOALIAS.448+64 _ZTVSt15basic_streambufIcSt11char_traitsIcEE }
PARM_NOALIAS.320+64 = { NULL ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+64 PARM_NOALIAS.128+64 PARM_NOALIAS.192+64 PARM_NOALIAS.256+64 PARM_NOALIAS.320+64 PARM_NOALIAS.384+64 PARM_NOALIAS.448+64 _ZTVSt15basic_streambufIcSt11char_traitsIcEE }
PARM_NOALIAS.384+64 = { NULL ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+64 PARM_NOALIAS.128+64 PARM_NOALIAS.192+64 PARM_NOALIAS.256+64 PARM_NOALIAS.320+64 PARM_NOALIAS.384+64 PARM_NOALIAS.448+64 _ZTVSt15basic_streambufIcSt11char_traitsIcEE }
PARM_NOALIAS.448+64 = { NULL ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+64 PARM_NOALIAS.128+64 PARM_NOALIAS.192+64 PARM_NOALIAS.256+64 PARM_NOALIAS.320+64 PARM_NOALIAS.384+64 PARM_NOALIAS.448+64 _ZTVSt15basic_streambufIcSt11char_traitsIcEE }
_ZTVSt15basic_streambufIcSt11char_traitsIcEE = { ESCAPED NONLOCAL }
this = { PARM_NOALIAS.0+64 }
derefaddrtmp(18) = { _ZTVSt15basic_streambufIcSt11char_traitsIcEE }
derefaddrtmp(19) = { NULL }
derefaddrtmp(20) = { NULL } same as derefaddrtmp(19)
derefaddrtmp(21) = { NULL } same as derefaddrtmp(19)
derefaddrtmp(22) = { NULL } same as derefaddrtmp(19)
derefaddrtmp(23) = { NULL } same as derefaddrtmp(19)
derefaddrtmp(24) = { NULL } same as derefaddrtmp(19)
_2 = { PARM_NOALIAS.0+64 PARM_NOALIAS.64+64 PARM_NOALIAS.128+64 PARM_NOALIAS.192+64 PARM_NOALIAS.256+64 PARM_NOALIAS.320+64 PARM_NOALIAS.384+64 PARM_NOALIAS.448+64 }
_ZNSt6localeC1Ev = { }
callescape(27) = { NULL ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+64 PARM_NOALIAS.128+64 PARM_NOALIAS.192+64 PARM_NOALIAS.256+64 PARM_NOALIAS.320+64 PARM_NOALIAS.384+64 PARM_NOALIAS.448+64 _ZTVSt15basic_streambufIcSt11char_traitsIcEE }
CALLUSED(28) = { NULL ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+64 PARM_NOALIAS.128+64 PARM_NOALIAS.192+64 PARM_NOALIAS.256+64 PARM_NOALIAS.320+64 PARM_NOALIAS.384+64 PARM_NOALIAS.448+64 _ZTVSt15basic_streambufIcSt11char_traitsIcEE } same as callescape(27)
CALLCLOBBERED(29) = { NULL ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+64 PARM_NOALIAS.128+64 PARM_NOALIAS.192+64 PARM_NOALIAS.256+64 PARM_NOALIAS.320+64 PARM_NOALIAS.384+64 PARM_NOALIAS.448+64 _ZTVSt15basic_streambufIcSt11char_traitsIcEE } same as callarg(30)
callarg(30) = { NULL ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+64 PARM_NOALIAS.128+64 PARM_NOALIAS.192+64 PARM_NOALIAS.256+64 PARM_NOALIAS.320+64 PARM_NOALIAS.384+64 PARM_NOALIAS.448+64 _ZTVSt15basic_streambufIcSt11char_traitsIcEE }


Alias information for std::basic_streambuf<char, std::char_traits<char> >::basic_streambuf()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.39074 D.98220 } (nonlocal, escaped, restrict, interposable)

Flow-insensitive points-to information

_2, points-to NULL, points-to vars: { D.98220 } (nonlocal, escaped, restrict)
this_5(D), points-to vars: { D.98220 } (nonlocal, escaped, restrict)

void std::basic_streambuf<char, std::char_traits<char> >::basic_streambuf (struct basic_streambuf * const this)
{
  struct locale * _2;
  struct locale * _3;

  <bb 2> :
  gimple_assign <constructor, *this_5(D), {CLOBBER}, NULL, NULL>
  gimple_assign <addr_expr, *this_5(D)._vptr.basic_streambuf, &MEM <int (*__vtbl_ptr_type) ()[16]> [(void *)&_ZTVSt15basic_streambufIcSt11char_traitsIcEE + 16B], NULL, NULL>
  gimple_assign <integer_cst, *this_5(D)._M_in_beg, 0B, NULL, NULL>
  gimple_assign <integer_cst, *this_5(D)._M_in_cur, 0B, NULL, NULL>
  gimple_assign <integer_cst, *this_5(D)._M_in_end, 0B, NULL, NULL>
  gimple_assign <integer_cst, *this_5(D)._M_out_beg, 0B, NULL, NULL>
  gimple_assign <integer_cst, *this_5(D)._M_out_cur, 0B, NULL, NULL>
  gimple_assign <integer_cst, *this_5(D)._M_out_end, 0B, NULL, NULL>
  gimple_assign <addr_expr, _2, &this_5(D)->_M_buf_locale, NULL, NULL>
  gimple_call <__ct_comp , NULL, _2>
  gimple_return <NULL>

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignERKS4_, funcdef_no=4256, decl_uid=28628, cgraph_uid=1736, symbol_order=2320)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__str = &NONLOCAL
callescape(11) = NONLOCAL
CALLUSED(12) = callescape(11)
callarg(14) = this
callarg(14) = callarg(14) + UNKNOWN
callarg(14) = *callarg(14) + UNKNOWN
CALLUSED(12) = callarg(14)
*callarg(14) = callescape(11)
CALLCLOBBERED(13) = callarg(14)
callescape(11) = callarg(14)
ESCAPED = this
callarg(15) = __str
callarg(15) = callarg(15) + UNKNOWN
callarg(15) = *callarg(15) + UNKNOWN
CALLUSED(12) = callarg(15)
*callarg(15) = callescape(11)
CALLCLOBBERED(13) = callarg(15)
callescape(11) = callarg(15)
ESCAPED = __str

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__str = { NONLOCAL } same as this
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_ = { }
callescape(11) = { ESCAPED NONLOCAL }
CALLUSED(12) = { ESCAPED NONLOCAL } same as callescape(11)
CALLCLOBBERED(13) = { ESCAPED NONLOCAL }
callarg(14) = { ESCAPED NONLOCAL }
callarg(15) = { ESCAPED NONLOCAL }
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignERKS4_ = { }


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__str_6(D), points-to non-local, points-to vars: { }
this_8(D), points-to non-local, points-to vars: { }

struct basic_string & std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign (struct basic_string * const this, const struct basic_string & __str)
{
  <bb 2> :
  gimple_call <_M_assign, NULL, this_8(D), __str_6(D)>
  gimple_return <this_8(D)>

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator= (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_, funcdef_no=4084, decl_uid=28471, cgraph_uid=1563, symbol_order=2139)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__str = &NONLOCAL
callescape(11) = NONLOCAL
CALLUSED(12) = callescape(11)
callarg(14) = this
callarg(14) = callarg(14) + UNKNOWN
callarg(14) = *callarg(14) + UNKNOWN
CALLUSED(12) = callarg(14)
*callarg(14) = callescape(11)
CALLCLOBBERED(13) = callarg(14)
callescape(11) = callarg(14)
ESCAPED = this
callarg(15) = __str
callarg(15) = callarg(15) + UNKNOWN
callarg(15) = *callarg(15) + UNKNOWN
CALLUSED(12) = callarg(15)
*callarg(15) = callescape(11)
CALLCLOBBERED(13) = callarg(15)
callescape(11) = callarg(15)
ESCAPED = __str

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__str = { NONLOCAL } same as this
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_ = { }
callescape(11) = { ESCAPED NONLOCAL }
CALLUSED(12) = { ESCAPED NONLOCAL } same as callescape(11)
CALLCLOBBERED(13) = { ESCAPED NONLOCAL }
callarg(14) = { ESCAPED NONLOCAL }
callarg(15) = { ESCAPED NONLOCAL }
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_ = { }


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to vars: { }
__str_3(D), points-to non-local, points-to vars: { }

struct basic_string & std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator= (struct basic_string * const this, const struct basic_string & __str)
{
  struct basic_string & D.98225;

  <bb 2> :
  gimple_call <_M_assign, NULL, this_2(D), __str_3(D)>
  gimple_return <this_2(D)>

}



;; Function std::basic_filebuf<char, std::char_traits<char> >::open (_ZNSt13basic_filebufIcSt11char_traitsIcEE4openERKNSt7__cxx1112basic_stringIcS1_SaIcEEESt13_Ios_Openmode, funcdef_no=4447, decl_uid=51238, cgraph_uid=1926, symbol_order=2510)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__s = &NONLOCAL
__mode = &NONLOCAL
_4 = *__s
callescape(13) = NONLOCAL
CALLUSED(14) = callescape(13)
callarg(16) = this
callarg(16) = callarg(16) + UNKNOWN
callarg(16) = *callarg(16) + UNKNOWN
CALLUSED(14) = callarg(16)
*callarg(16) = callescape(13)
CALLCLOBBERED(15) = callarg(16)
callescape(13) = callarg(16)
ESCAPED = this
callarg(17) = _4
callarg(17) = callarg(17) + UNKNOWN
callarg(17) = *callarg(17) + UNKNOWN
CALLUSED(14) = callarg(17)
*callarg(17) = callescape(13)
CALLCLOBBERED(15) = callarg(17)
callescape(13) = callarg(17)
ESCAPED = _4
callarg(18) = __mode
callarg(18) = callarg(18) + UNKNOWN
callarg(18) = *callarg(18) + UNKNOWN
CALLUSED(14) = callarg(18)
*callarg(18) = callescape(13)
CALLCLOBBERED(15) = callarg(18)
callescape(13) = callarg(18)
ESCAPED = __mode
_8 = NONLOCAL
_8 = callarg(16)
_8 = callarg(17)
_8 = callarg(18)

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__s = { NONLOCAL } same as this
__mode = { NONLOCAL } same as this
_4 = { ESCAPED NONLOCAL }
_ZNSt13basic_filebufIcSt11char_traitsIcEE4openEPKcSt13_Ios_Openmode = { }
callescape(13) = { ESCAPED NONLOCAL }
CALLUSED(14) = { ESCAPED NONLOCAL } same as callescape(13)
CALLCLOBBERED(15) = { ESCAPED NONLOCAL }
callarg(16) = { ESCAPED NONLOCAL }
callarg(17) = { ESCAPED NONLOCAL }
callarg(18) = { ESCAPED NONLOCAL }
_8 = { ESCAPED NONLOCAL } same as callescape(13)
_ZNSt13basic_filebufIcSt11char_traitsIcEE4openERKNSt7__cxx1112basic_stringIcS1_SaIcEEESt13_Ios_Openmode = { }


Alias information for std::basic_filebuf<char, std::char_traits<char> >::open(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__s_3(D), points-to non-local, points-to vars: { }
_4, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
this_5(D), points-to non-local, points-to vars: { }
_8, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

struct __filebuf_type * std::basic_filebuf<char, std::char_traits<char> >::open (struct basic_filebuf * const this, const struct string & __s, openmode __mode)
{
  const char * D.98228;
  char * _4;
  struct __filebuf_type * _8;

  <bb 2> :
  gimple_assign <component_ref, _4, MEM[(const struct basic_string *)__s_3(D)]._M_dataplus._M_p, NULL, NULL>
  gimple_call <open, _8, this_5(D), _4, __mode_6(D)>
  gimple_return <_8>

}



;; Function std::basic_filebuf<char, std::char_traits<char> >::is_open (_ZNKSt13basic_filebufIcSt11char_traitsIcEE7is_openEv, funcdef_no=4333, decl_uid=51232, cgraph_uid=1812, symbol_order=2396)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_1 = this + UNKNOWN
callescape(11) = NONLOCAL
CALLUSED(12) = callescape(11)
callarg(14) = _1
callarg(14) = callarg(14) + UNKNOWN
callarg(14) = *callarg(14) + UNKNOWN
CALLUSED(12) = callarg(14)
_4 = NONLOCAL
_4 = callarg(14)

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as callescape(11)
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_1 = { NONLOCAL }
_ZNKSt12__basic_fileIcE7is_openEv = { }
callescape(11) = { ESCAPED NONLOCAL }
CALLUSED(12) = { ESCAPED NONLOCAL }
CALLCLOBBERED(13) = { }
callarg(14) = { ESCAPED NONLOCAL }
_4 = { ESCAPED NONLOCAL } same as CALLUSED(12)
_ZNKSt13basic_filebufIcSt11char_traitsIcEE7is_openEv = { }


Alias information for std::basic_filebuf<char, std::char_traits<char> >::is_open() const

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to NULL, points-to vars: { }
this_2(D), points-to non-local, points-to vars: { }

bool std::basic_filebuf<char, std::char_traits<char> >::is_open (const struct basic_filebuf * const this)
{
  const struct __file_type * _1;
  bool _4;

  <bb 2> :
  gimple_assign <addr_expr, _1, &this_2(D)->_M_file, NULL, NULL>
  gimple_call <is_open, _4, _1>
  gimple_return <_4>

}



;; Function std::basic_ofstream<char, std::char_traits<char> >::is_open (_ZNSt14basic_ofstreamIcSt11char_traitsIcEE7is_openEv, funcdef_no=4092, decl_uid=51631, cgraph_uid=1571, symbol_order=2147)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_4 = this + UNKNOWN
callescape(11) = NONLOCAL
CALLUSED(12) = callescape(11)
callarg(14) = _4
callarg(14) = callarg(14) + UNKNOWN
callarg(14) = *callarg(14) + UNKNOWN
CALLUSED(12) = callarg(14)
_6 = NONLOCAL
_6 = callarg(14)

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as callescape(11)
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_4 = { NONLOCAL }
_ZNKSt12__basic_fileIcE7is_openEv = { }
callescape(11) = { ESCAPED NONLOCAL }
CALLUSED(12) = { ESCAPED NONLOCAL }
CALLCLOBBERED(13) = { }
callarg(14) = { ESCAPED NONLOCAL }
_6 = { ESCAPED NONLOCAL } same as CALLUSED(12)
_ZNSt14basic_ofstreamIcSt11char_traitsIcEE7is_openEv = { }


Alias information for std::basic_ofstream<char, std::char_traits<char> >::is_open()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to vars: { }
_4, points-to non-local, points-to NULL, points-to vars: { }

bool std::basic_ofstream<char, std::char_traits<char> >::is_open (struct basic_ofstream * const this)
{
  bool D.98232;
  const struct __file_type * _4;
  bool _6;

  <bb 2> :
  gimple_assign <addr_expr, _4, &MEM[(const struct basic_filebuf *)this_2(D) + 8B]._M_file, NULL, NULL>
  gimple_call <is_open, _6, _4>
  gimple_return <_6>

}



;; Function std::__is_constant_evaluated (_ZSt23__is_constant_evaluatedv, funcdef_no=1, decl_uid=3980, cgraph_uid=2, symbol_order=1)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
_ZSt23__is_constant_evaluatedv = { }


Alias information for std::__is_constant_evaluated()

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information


bool std::__is_constant_evaluated ()
{
  <bb 2> :
  gimple_return <0>

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator[] (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEm, funcdef_no=3818, decl_uid=28550, cgraph_uid=1297, symbol_order=1860)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__pos = &NONLOCAL
_10 = *this
_16 = _10 + UNKNOWN

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__pos = { NONLOCAL } same as this
_10 = { ESCAPED NONLOCAL }
_16 = { ESCAPED NONLOCAL }
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEm = { }


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator[](unsigned long)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_9(D), points-to non-local, points-to vars: { }
_10, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_16, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

value_type & std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator[] (struct basic_string * const this, size_type __pos)
{
  char * D.98239;
  size_type D.98237;
  bool D.98235;
  char * _10;
  value_type & _16;

  <bb 2> :
  gimple_assign <component_ref, _10, MEM[(const struct basic_string *)this_9(D)]._M_dataplus._M_p, NULL, NULL>
  gimple_assign <pointer_plus_expr, _16, _10, __pos_11(D), NULL>
  gimple_return <_16>

}



;; Function std::char_traits<char>::assign (_ZNSt11char_traitsIcE6assignERcRKc, funcdef_no=118, decl_uid=9871, cgraph_uid=64, symbol_order=73)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__c1 = &NONLOCAL
__c2 = &NONLOCAL
_1 = *__c2
*__c1 = _1

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _1
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__c1 = { NONLOCAL }
__c2 = { NONLOCAL } same as __c1
_1 = { ESCAPED NONLOCAL }


Alias information for std::char_traits<char>::assign(char&, char const&)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__c2_3(D), points-to non-local, points-to vars: { }
__c1_4(D), points-to non-local, points-to vars: { }

void std::char_traits<char>::assign (char_type & __c1, const char_type & __c2)
{
  char _1;

  <bb 2> :
  gimple_assign <mem_ref, _1, *__c2_3(D), NULL, NULL>
  gimple_assign <ssa_name, *__c1_4(D), _1, NULL, NULL>
  gimple_return <NULL>

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_set_length (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm, funcdef_no=4122, decl_uid=28210, cgraph_uid=1601, symbol_order=2177)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__n = &NONLOCAL
*this + 64 = __n
_11 = *this
_2 = _11 + UNKNOWN
derefaddrtmp(12) = &NULL
*_2 = derefaddrtmp(12)

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__n = { NONLOCAL } same as this
_11 = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL }
derefaddrtmp(12) = { NULL }


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_set_length(unsigned long)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

_2, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
this_4(D), points-to non-local, points-to vars: { }
_11, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_set_length (struct basic_string * const this, size_type __n)
{
  char * D.98245;
  const char_type D.93657;
  char * _2;
  char * _11;
  const char_type _16(D);

  <bb 2> :
  gimple_assign <ssa_name, this_4(D)->_M_string_length, __n_5(D), NULL, NULL>
  gimple_assign <component_ref, _11, MEM[(const struct basic_string *)this_4(D)]._M_dataplus._M_p, NULL, NULL>
  gimple_assign <pointer_plus_expr, _2, _11, __n_5(D), NULL>
  gimple_assign <integer_cst, MEM[(char_type &)_2], 0, NULL, NULL>
  gimple_return <NULL>

}



;; Function std::char_traits<char>::copy (_ZNSt11char_traitsIcE4copyEPcPKcm, funcdef_no=125, decl_uid=9895, cgraph_uid=71, symbol_order=80)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__s1 = &NONLOCAL
__s2 = &NONLOCAL
__n = &NONLOCAL
_8 = __s1
doubledereftmp(12) = *__s2 + UNKNOWN
*__s1 + UNKNOWN = doubledereftmp(12)
_1 = __s1
_1 = _8

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__s1 = { NONLOCAL }
__s2 = { NONLOCAL } same as __s1
__n = { NONLOCAL } same as __s1
_8 = { NONLOCAL } same as __s1
doubledereftmp(12) = { ESCAPED NONLOCAL }
_1 = { NONLOCAL } same as __s1
_ZNSt11char_traitsIcE4copyEPcPKcm = { }


Alias information for std::char_traits<char>::copy(char*, char const*, unsigned long)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to NULL, points-to vars: { }
__s1_5(D), points-to non-local, points-to NULL, points-to vars: { }
__s2_6(D), points-to non-local, points-to NULL, points-to vars: { }
_8, points-to non-local, points-to NULL, points-to vars: { }

char_type * std::char_traits<char>::copy (char_type * __s1, const char_type * __s2, size_t __n)
{
  char_type * _1;
  char_type * _8;

  <bb 2> :
  gimple_cond <eq_expr, __n_3(D), 0, NULL, NULL>
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 5>; [INV]

  <bb 4> :
  gimple_call <__builtin_memcpy, _8, __s1_5(D), __s2_6(D), __n_3(D)>

  <bb 5> :
  # gimple_phi <_1, __s1_5(D)(3), _8(4)>
  gimple_return <_1>

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm, funcdef_no=4254, decl_uid=28264, cgraph_uid=1733, symbol_order=2317)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__d = &NONLOCAL
__s = &NONLOCAL
__n = &NONLOCAL
_8 = *__s
*__d = _8
_9 = __d
doubledereftmp(13) = *__s + UNKNOWN
*__d + UNKNOWN = doubledereftmp(13)
_10 = __d
_10 = _9

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _8
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__d = { NONLOCAL }
__s = { NONLOCAL } same as __d
__n = { NONLOCAL } same as __d
_8 = { ESCAPED NONLOCAL }
_9 = { NONLOCAL } same as __d
doubledereftmp(13) = { ESCAPED NONLOCAL }
_10 = { NONLOCAL } same as __d


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__d_4(D), points-to non-local, points-to NULL, points-to vars: { }
__s_5(D), points-to non-local, points-to NULL, points-to vars: { }
_9, points-to non-local, points-to NULL, points-to vars: { }
_10, points-to non-local, points-to NULL, points-to vars: { }

void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy (char * __d, const char * __s, size_type __n)
{
  char _8;
  char_type * _9;
  char_type * _10;

  <bb 2> :
  gimple_cond <eq_expr, __n_2(D), 1, NULL, NULL>
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  gimple_assign <mem_ref, _8, MEM[(const char_type &)__s_5(D)], NULL, NULL>
  gimple_assign <ssa_name, MEM[(char_type &)__d_4(D)], _8, NULL, NULL>
  goto <bb 7>; [100.00%]

  <bb 4> :
  gimple_cond <eq_expr, __n_2(D), 0, NULL, NULL>
    goto <bb 6>; [51.12%]
  else
    goto <bb 5>; [48.88%]

  <bb 5> :
  gimple_call <__builtin_memcpy, _9, __d_4(D), __s_5(D), __n_2(D)>

  <bb 6> :
  # gimple_phi <_10, __d_4(D)(4), _9(5)>

  <bb 7> :
  gimple_return <NULL>

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_, funcdef_no=4355, decl_uid=28294, cgraph_uid=1834, symbol_order=2418)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__p = &NONLOCAL
__k1 = &NONLOCAL
__k2 = &NONLOCAL
_2 = _1
_8 = *__k1
*__p = _8
callescape(15) = NONLOCAL
CALLUSED(16) = callescape(15)
callarg(18) = __p
callarg(18) = callarg(18) + UNKNOWN
callarg(18) = *callarg(18) + UNKNOWN
CALLUSED(16) = callarg(18)
*callarg(18) = callescape(15)
CALLCLOBBERED(17) = callarg(18)
callescape(15) = callarg(18)
ESCAPED = __p
callarg(19) = __k1
callarg(19) = callarg(19) + UNKNOWN
callarg(19) = *callarg(19) + UNKNOWN
CALLUSED(16) = callarg(19)
*callarg(19) = callescape(15)
CALLCLOBBERED(17) = callarg(19)
callescape(15) = callarg(19)
ESCAPED = __k1
callarg(20) = _2
callarg(20) = callarg(20) + UNKNOWN
callarg(20) = *callarg(20) + UNKNOWN
CALLUSED(16) = callarg(20)
*callarg(20) = callescape(15)
CALLCLOBBERED(17) = callarg(20)
callescape(15) = callarg(20)
ESCAPED = _2

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _8
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__p = { NONLOCAL }
__k1 = { NONLOCAL } same as __p
__k2 = { NONLOCAL } same as __p
_1 = { }
_2 = { }
_8 = { ESCAPED NONLOCAL }
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm.part.0 = { }
callescape(15) = { ESCAPED NONLOCAL }
CALLUSED(16) = { ESCAPED NONLOCAL } same as callescape(15)
CALLCLOBBERED(17) = { ESCAPED NONLOCAL }
callarg(18) = { ESCAPED NONLOCAL }
callarg(19) = { ESCAPED NONLOCAL }
callarg(20) = { }


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char const*, char const*)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__k2_3(D), points-to non-local, points-to NULL, points-to vars: { }
__k1_4(D), points-to non-local, points-to NULL, points-to vars: { }
__p_6(D), points-to non-local, points-to NULL, points-to vars: { }

void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars (char * __p, const char * __k1, const char * __k2)
{
  long int _1;
  long unsigned int _2;
  char _8;

  <bb 2> :
  gimple_assign <pointer_diff_expr, _1, __k2_3(D), __k1_4(D), NULL>
  gimple_assign <nop_expr, _2, _1, NULL, NULL>
  gimple_cond <eq_expr, _2, 1, NULL, NULL>
    goto <bb 3>; [34.00%]
  else
    goto <bb 4>; [66.00%]

  <bb 3> :
  gimple_assign <mem_ref, _8, MEM[(const char_type &)__k1_4(D)], NULL, NULL>
  gimple_assign <ssa_name, MEM[(char_type &)__p_6(D)], _8, NULL, NULL>
  goto <bb 5>; [100.00%]

  <bb 4> :
  gimple_call <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm.part.0, NULL, __p_6(D), __k1_4(D), _2>

  <bb 5> :
  gimple_return <NULL>

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_, funcdef_no=4408, decl_uid=28290, cgraph_uid=1887, symbol_order=2471)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__p = &NONLOCAL
__k1 = &NONLOCAL
__k2 = &NONLOCAL
_2 = _1
_8 = *__k1
*__p = _8
callescape(15) = NONLOCAL
CALLUSED(16) = callescape(15)
callarg(18) = __p
callarg(18) = callarg(18) + UNKNOWN
callarg(18) = *callarg(18) + UNKNOWN
CALLUSED(16) = callarg(18)
*callarg(18) = callescape(15)
CALLCLOBBERED(17) = callarg(18)
callescape(15) = callarg(18)
ESCAPED = __p
callarg(19) = __k1
callarg(19) = callarg(19) + UNKNOWN
callarg(19) = *callarg(19) + UNKNOWN
CALLUSED(16) = callarg(19)
*callarg(19) = callescape(15)
CALLCLOBBERED(17) = callarg(19)
callescape(15) = callarg(19)
ESCAPED = __k1
callarg(20) = _2
callarg(20) = callarg(20) + UNKNOWN
callarg(20) = *callarg(20) + UNKNOWN
CALLUSED(16) = callarg(20)
*callarg(20) = callescape(15)
CALLCLOBBERED(17) = callarg(20)
callescape(15) = callarg(20)
ESCAPED = _2

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _8
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__p = { NONLOCAL }
__k1 = { NONLOCAL } same as __p
__k2 = { NONLOCAL } same as __p
_1 = { }
_2 = { }
_8 = { ESCAPED NONLOCAL }
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm.part.0 = { }
callescape(15) = { ESCAPED NONLOCAL }
CALLUSED(16) = { ESCAPED NONLOCAL } same as callescape(15)
CALLCLOBBERED(17) = { ESCAPED NONLOCAL }
callarg(18) = { ESCAPED NONLOCAL }
callarg(19) = { ESCAPED NONLOCAL }
callarg(20) = { }


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char*, char*)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__k2_3(D), points-to non-local, points-to NULL, points-to vars: { }
__k1_4(D), points-to non-local, points-to NULL, points-to vars: { }
__p_6(D), points-to non-local, points-to NULL, points-to vars: { }

void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars (char * __p, char * __k1, char * __k2)
{
  long int _1;
  long unsigned int _2;
  char _8;

  <bb 2> :
  gimple_assign <pointer_diff_expr, _1, __k2_3(D), __k1_4(D), NULL>
  gimple_assign <nop_expr, _2, _1, NULL, NULL>
  gimple_cond <eq_expr, _2, 1, NULL, NULL>
    goto <bb 3>; [34.00%]
  else
    goto <bb 4>; [66.00%]

  <bb 3> :
  gimple_assign <mem_ref, _8, MEM[(const char_type &)__k1_4(D)], NULL, NULL>
  gimple_assign <ssa_name, MEM[(char_type &)__p_6(D)], _8, NULL, NULL>
  goto <bb 5>; [100.00%]

  <bb 4> :
  gimple_call <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm.part.0, NULL, __p_6(D), __k1_4(D), _2>

  <bb 5> :
  gimple_return <NULL>

}



;; Function std::operator| (_ZStorSt13_Ios_OpenmodeS_, funcdef_no=1375, decl_uid=37625, cgraph_uid=396, symbol_order=429)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__a = &NONLOCAL
__b = &NONLOCAL
_3 = __a + UNKNOWN
_3 = __b + UNKNOWN

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__a = { NONLOCAL }
__b = { NONLOCAL } same as __a
_3 = { NONLOCAL }
_ZStorSt13_Ios_OpenmodeS_ = { }


Alias information for std::operator|(std::_Ios_Openmode, std::_Ios_Openmode)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information


_Ios_Openmode std::operator| (_Ios_Openmode __a, _Ios_Openmode __b)
{
  _Ios_Openmode _3;

  <bb 2> :
  gimple_assign <bit_ior_expr, _3, __a_1(D), __b_2(D), NULL>
  gimple_return <_3>

}



;; Function std::operator| (_ZStorSt12_Ios_IostateS_, funcdef_no=1382, decl_uid=37671, cgraph_uid=403, symbol_order=436)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__a = &NONLOCAL
__b = &NONLOCAL
_3 = __a + UNKNOWN
_3 = __b + UNKNOWN

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__a = { NONLOCAL }
__b = { NONLOCAL } same as __a
_3 = { NONLOCAL }
_ZStorSt12_Ios_IostateS_ = { }


Alias information for std::operator|(std::_Ios_Iostate, std::_Ios_Iostate)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information


_Ios_Iostate std::operator| (_Ios_Iostate __a, _Ios_Iostate __b)
{
  _Ios_Iostate _3;

  <bb 2> :
  gimple_assign <bit_ior_expr, _3, __a_1(D), __b_2(D), NULL>
  gimple_return <_3>

}



;; Function std::basic_ios<char, std::char_traits<char> >::setstate (_ZNSt9basic_iosIcSt11char_traitsIcEE8setstateESt12_Ios_Iostate, funcdef_no=4311, decl_uid=43682, cgraph_uid=1790, symbol_order=2374)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__state = &NONLOCAL
_5 = *this + 256
_7 = _5 + UNKNOWN
_7 = __state + UNKNOWN
callescape(13) = NONLOCAL
CALLUSED(14) = callescape(13)
callarg(16) = this
callarg(16) = callarg(16) + UNKNOWN
callarg(16) = *callarg(16) + UNKNOWN
CALLUSED(14) = callarg(16)
*callarg(16) = callescape(13)
CALLCLOBBERED(15) = callarg(16)
callescape(13) = callarg(16)
ESCAPED = this
callarg(17) = _7
callarg(17) = callarg(17) + UNKNOWN
callarg(17) = *callarg(17) + UNKNOWN
CALLUSED(14) = callarg(17)
*callarg(17) = callescape(13)
CALLCLOBBERED(15) = callarg(17)
callescape(13) = callarg(17)
ESCAPED = _7

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__state = { NONLOCAL } same as this
_5 = { ESCAPED NONLOCAL }
_7 = { ESCAPED NONLOCAL }
_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate = { }
callescape(13) = { ESCAPED NONLOCAL }
CALLUSED(14) = { ESCAPED NONLOCAL } same as callescape(13)
CALLCLOBBERED(15) = { ESCAPED NONLOCAL }
callarg(16) = { ESCAPED NONLOCAL }
callarg(17) = { ESCAPED NONLOCAL }


Alias information for std::basic_ios<char, std::char_traits<char> >::setstate(std::_Ios_Iostate)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_4(D), points-to non-local, points-to vars: { }

void std::basic_ios<char, std::char_traits<char> >::setstate (struct basic_ios * const this, iostate __state)
{
  iostate D.98277;
  _Ios_Iostate D.98275;
  _Ios_Iostate _5;
  _Ios_Iostate _7;

  <bb 2> :
  gimple_assign <component_ref, _5, MEM[(const struct basic_ios *)this_4(D)].D.43795._M_streambuf_state, NULL, NULL>
  gimple_assign <bit_ior_expr, _7, _5, __state_6(D), NULL>
  gimple_call <clear, NULL, this_4(D), _7>
  gimple_return <NULL>

}



;; Function std::basic_ofstream<char, std::char_traits<char> >::open (_ZNSt14basic_ofstreamIcSt11char_traitsIcEE4openERKNSt7__cxx1112basic_stringIcS1_SaIcEEESt13_Ios_Openmode, funcdef_no=4332, decl_uid=51639, cgraph_uid=1811, symbol_order=2395)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__s = &NONLOCAL
__mode = &NONLOCAL
_1 = this + UNKNOWN
_26 = __mode + UNKNOWN
_26 = &NONLOCAL
_18 = *__s
callescape(15) = NONLOCAL
CALLUSED(16) = callescape(15)
callarg(18) = _1
callarg(18) = callarg(18) + UNKNOWN
callarg(18) = *callarg(18) + UNKNOWN
CALLUSED(16) = callarg(18)
*callarg(18) = callescape(15)
CALLCLOBBERED(17) = callarg(18)
callescape(15) = callarg(18)
ESCAPED = _1
callarg(19) = _18
callarg(19) = callarg(19) + UNKNOWN
callarg(19) = *callarg(19) + UNKNOWN
CALLUSED(16) = callarg(19)
*callarg(19) = callescape(15)
CALLCLOBBERED(17) = callarg(19)
callescape(15) = callarg(19)
ESCAPED = _18
callarg(20) = _26
callarg(20) = callarg(20) + UNKNOWN
callarg(20) = *callarg(20) + UNKNOWN
CALLUSED(16) = callarg(20)
*callarg(20) = callescape(15)
CALLCLOBBERED(17) = callarg(20)
callescape(15) = callarg(20)
ESCAPED = _26
_25 = NONLOCAL
_25 = callarg(18)
_25 = callarg(19)
_25 = callarg(20)
_4 = *this
_6 = *_4 + -192
_7 = _6
_8 = this + UNKNOWN
_27 = *_8 + 256
_28 = _27 + UNKNOWN
_28 = &NONLOCAL
callescape(29) = NONLOCAL
CALLUSED(30) = callescape(29)
callarg(32) = _8
callarg(32) = callarg(32) + UNKNOWN
callarg(32) = *callarg(32) + UNKNOWN
CALLUSED(30) = callarg(32)
*callarg(32) = callescape(29)
CALLCLOBBERED(31) = callarg(32)
callescape(29) = callarg(32)
ESCAPED = _8
callarg(33) = _28
callarg(33) = callarg(33) + UNKNOWN
callarg(33) = *callarg(33) + UNKNOWN
CALLUSED(30) = callarg(33)
*callarg(33) = callescape(29)
CALLCLOBBERED(31) = callarg(33)
callescape(29) = callarg(33)
ESCAPED = _28
_9 = *this
_11 = *_9 + -192
_12 = _11
_13 = this + UNKNOWN
callescape(38) = NONLOCAL
CALLUSED(39) = callescape(38)
callarg(41) = _13
callarg(41) = callarg(41) + UNKNOWN
callarg(41) = *callarg(41) + UNKNOWN
CALLUSED(39) = callarg(41)
*callarg(41) = callescape(38)
CALLCLOBBERED(40) = callarg(41)
callescape(38) = callarg(41)
ESCAPED = _13
callarg(42) = &NULL
callarg(42) = callarg(42) + UNKNOWN
callarg(42) = *callarg(42) + UNKNOWN
CALLUSED(39) = callarg(42)
*callarg(42) = callescape(38)
CALLCLOBBERED(40) = callarg(42)
callescape(38) = callarg(42)
ESCAPED = &NULL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__s = { NONLOCAL } same as this
__mode = { NONLOCAL } same as this
_1 = { NONLOCAL }
_26 = { NONLOCAL }
_18 = { ESCAPED NONLOCAL }
_ZNSt13basic_filebufIcSt11char_traitsIcEE4openEPKcSt13_Ios_Openmode = { }
callescape(15) = { ESCAPED NONLOCAL }
CALLUSED(16) = { ESCAPED NONLOCAL } same as callescape(15)
CALLCLOBBERED(17) = { ESCAPED NONLOCAL }
callarg(18) = { ESCAPED NONLOCAL }
callarg(19) = { ESCAPED NONLOCAL }
callarg(20) = { ESCAPED NONLOCAL }
_25 = { ESCAPED NONLOCAL } same as callescape(15)
_4 = { ESCAPED NONLOCAL }
_6 = { ESCAPED NONLOCAL }
_7 = { ESCAPED NONLOCAL } same as _6
_8 = { NONLOCAL }
_27 = { ESCAPED NONLOCAL }
_28 = { ESCAPED NONLOCAL }
_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate = { }
callescape(29) = { ESCAPED NONLOCAL }
CALLUSED(30) = { ESCAPED NONLOCAL } same as callescape(29)
CALLCLOBBERED(31) = { ESCAPED NONLOCAL }
callarg(32) = { ESCAPED NONLOCAL }
callarg(33) = { ESCAPED NONLOCAL }
_9 = { ESCAPED NONLOCAL } same as _4
_11 = { ESCAPED NONLOCAL }
_12 = { ESCAPED NONLOCAL } same as _11
_13 = { NONLOCAL }
callescape(38) = { NULL ESCAPED NONLOCAL }
CALLUSED(39) = { NULL ESCAPED NONLOCAL } same as callescape(38)
CALLCLOBBERED(40) = { NULL ESCAPED NONLOCAL }
callarg(41) = { ESCAPED NONLOCAL }
callarg(42) = { NULL }


Alias information for std::basic_ofstream<char, std::char_traits<char> >::open(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to NULL, points-to vars: { }
_4, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_8, points-to non-local, points-to NULL, points-to vars: { }
_9, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_13, points-to non-local, points-to NULL, points-to vars: { }
this_15(D), points-to non-local, points-to vars: { }
_18, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
__s_19(D), points-to non-local, points-to vars: { }
_25, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

void std::basic_ofstream<char, std::char_traits<char> >::open (struct basic_ofstream * const this, const struct string & __s, openmode __mode)
{
  _Ios_Openmode D.98285;
  struct __filebuf_type * D.98282;
  struct __filebuf_type * _1;
  int (*__vtbl_ptr_type) () * _4;
  long int _6;
  sizetype _7;
  struct basic_ios * _8;
  int (*__vtbl_ptr_type) () * _9;
  long int _11;
  sizetype _12;
  struct basic_ios * _13;
  char * _18;
  struct __filebuf_type * _25;
  _Ios_Openmode _26;
  _Ios_Iostate _27;
  _Ios_Iostate _28;

  <bb 2> :
  gimple_assign <addr_expr, _1, &this_15(D)->_M_filebuf, NULL, NULL>
  gimple_assign <bit_ior_expr, _26, __mode_17(D), 16, NULL>
  gimple_assign <component_ref, _18, MEM[(const struct basic_string *)__s_19(D)]._M_dataplus._M_p, NULL, NULL>
  gimple_call <open, _25, _1, _18, _26>
  gimple_cond <eq_expr, _25, 0B, NULL, NULL>
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  gimple_assign <component_ref, _4, this_15(D)->D.51725._vptr.basic_ostream, NULL, NULL>
  gimple_assign <mem_ref, _6, MEM[(long int *)_4 + -24B], NULL, NULL>
  gimple_assign <nop_expr, _7, _6, NULL, NULL>
  gimple_assign <pointer_plus_expr, _8, this_15(D), _7, NULL>
  gimple_assign <component_ref, _27, MEM[(const struct basic_ios *)_8].D.43795._M_streambuf_state, NULL, NULL>
  gimple_assign <bit_ior_expr, _28, _27, 4, NULL>
  gimple_call <clear, NULL, _8, _28>
  goto <bb 5>; [100.00%]

  <bb 4> :
  gimple_assign <component_ref, _9, this_15(D)->D.51725._vptr.basic_ostream, NULL, NULL>
  gimple_assign <mem_ref, _11, MEM[(long int *)_9 + -24B], NULL, NULL>
  gimple_assign <nop_expr, _12, _11, NULL, NULL>
  gimple_assign <pointer_plus_expr, _13, this_15(D), _12, NULL>
  gimple_call <clear, NULL, _13, 0>

  <bb 5> :
  gimple_return <NULL>

}



;; Function std::basic_ofstream<char, std::char_traits<char> >::close (_ZNSt14basic_ofstreamIcSt11char_traitsIcEE5closeEv, funcdef_no=4093, decl_uid=51649, cgraph_uid=1572, symbol_order=2148)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_1 = this + UNKNOWN
callescape(11) = NONLOCAL
CALLUSED(12) = callescape(11)
callarg(14) = _1
callarg(14) = callarg(14) + UNKNOWN
callarg(14) = *callarg(14) + UNKNOWN
CALLUSED(12) = callarg(14)
*callarg(14) = callescape(11)
CALLCLOBBERED(13) = callarg(14)
callescape(11) = callarg(14)
ESCAPED = _1
_12 = NONLOCAL
_12 = callarg(14)
_3 = *this
_5 = *_3 + -192
_6 = _5
_7 = this + UNKNOWN
_15 = *_7 + 256
_16 = _15 + UNKNOWN
_16 = &NONLOCAL
callescape(23) = NONLOCAL
CALLUSED(24) = callescape(23)
callarg(26) = _7
callarg(26) = callarg(26) + UNKNOWN
callarg(26) = *callarg(26) + UNKNOWN
CALLUSED(24) = callarg(26)
*callarg(26) = callescape(23)
CALLCLOBBERED(25) = callarg(26)
callescape(23) = callarg(26)
ESCAPED = _7
callarg(27) = _16
callarg(27) = callarg(27) + UNKNOWN
callarg(27) = *callarg(27) + UNKNOWN
CALLUSED(24) = callarg(27)
*callarg(27) = callescape(23)
CALLCLOBBERED(25) = callarg(27)
callescape(23) = callarg(27)
ESCAPED = _16

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_1 = { NONLOCAL }
_ZNSt13basic_filebufIcSt11char_traitsIcEE5closeEv = { }
callescape(11) = { ESCAPED NONLOCAL }
CALLUSED(12) = { ESCAPED NONLOCAL } same as callescape(11)
CALLCLOBBERED(13) = { ESCAPED NONLOCAL } same as callarg(14)
callarg(14) = { ESCAPED NONLOCAL }
_12 = { ESCAPED NONLOCAL } same as callescape(11)
_3 = { ESCAPED NONLOCAL }
_5 = { ESCAPED NONLOCAL }
_6 = { ESCAPED NONLOCAL } same as _5
_7 = { NONLOCAL }
_15 = { ESCAPED NONLOCAL }
_16 = { ESCAPED NONLOCAL }
_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate = { }
callescape(23) = { ESCAPED NONLOCAL }
CALLUSED(24) = { ESCAPED NONLOCAL } same as callescape(23)
CALLCLOBBERED(25) = { ESCAPED NONLOCAL }
callarg(26) = { ESCAPED NONLOCAL }
callarg(27) = { ESCAPED NONLOCAL }


Alias information for std::basic_ofstream<char, std::char_traits<char> >::close()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to NULL, points-to vars: { }
_3, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_7, points-to non-local, points-to NULL, points-to vars: { }
this_9(D), points-to non-local, points-to vars: { }
_12, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

void std::basic_ofstream<char, std::char_traits<char> >::close (struct basic_ofstream * const this)
{
  struct __filebuf_type * _1;
  int (*__vtbl_ptr_type) () * _3;
  long int _5;
  sizetype _6;
  struct basic_ios * _7;
  struct __filebuf_type * _12;
  _Ios_Iostate _15;
  _Ios_Iostate _16;

  <bb 2> :
  gimple_assign <addr_expr, _1, &this_9(D)->_M_filebuf, NULL, NULL>
  gimple_call <close, _12, _1>
  gimple_cond <eq_expr, _12, 0B, NULL, NULL>
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  gimple_assign <component_ref, _3, this_9(D)->D.51725._vptr.basic_ostream, NULL, NULL>
  gimple_assign <mem_ref, _5, MEM[(long int *)_3 + -24B], NULL, NULL>
  gimple_assign <nop_expr, _6, _5, NULL, NULL>
  gimple_assign <pointer_plus_expr, _7, this_9(D), _6, NULL>
  gimple_assign <component_ref, _15, MEM[(const struct basic_ios *)_7].D.43795._M_streambuf_state, NULL, NULL>
  gimple_assign <bit_ior_expr, _16, _15, 4, NULL>
  gimple_call <clear, NULL, _7, _16>

  <bb 4> :
  gimple_return <NULL>

}



;; Function std::ios_base::width (_ZNKSt8ios_base5widthEv, funcdef_no=1405, decl_uid=37977, cgraph_uid=426, symbol_order=459)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_3 = *this + 128

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_3 = { ESCAPED NONLOCAL }
_ZNKSt8ios_base5widthEv = { }


Alias information for std::ios_base::width() const

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to vars: { }

streamsize std::ios_base::width (const struct ios_base * const this)
{
  streamsize _3;

  <bb 2> :
  gimple_assign <component_ref, _3, this_2(D)->_M_width, NULL, NULL>
  gimple_return <_3>

}



;; Function std::operator<< <std::char_traits<char> > (_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c, funcdef_no=4459, decl_uid=44699, cgraph_uid=1938, symbol_order=2522)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__out = &NONLOCAL
__c = &NONLOCAL
_1 = *__out
_3 = *_1 + -192
_4 = _3
_5 = __out + UNKNOWN
_12 = *_5 + 128
callescape(16) = NONLOCAL
CALLUSED(17) = callescape(16)
callarg(19) = __out
callarg(19) = callarg(19) + UNKNOWN
callarg(19) = *callarg(19) + UNKNOWN
CALLUSED(17) = callarg(19)
*callarg(19) = callescape(16)
CALLCLOBBERED(18) = callarg(19)
callescape(16) = callarg(19)
ESCAPED = __out
callarg(20) = &__c
callarg(20) = callarg(20) + UNKNOWN
callarg(20) = *callarg(20) + UNKNOWN
CALLUSED(17) = callarg(20)
*callarg(20) = callescape(16)
CALLCLOBBERED(18) = callarg(20)
callescape(16) = callarg(20)
ESCAPED = &__c
callarg(21) = &NONLOCAL
callarg(21) = callarg(21) + UNKNOWN
callarg(21) = *callarg(21) + UNKNOWN
CALLUSED(17) = callarg(21)
*callarg(21) = callescape(16)
CALLCLOBBERED(18) = callarg(21)
callescape(16) = callarg(21)
ESCAPED = &NONLOCAL
_17 = NONLOCAL
_17 = callarg(19)
_17 = callarg(20)
_17 = callarg(21)
__c.21_7 = __c
callescape(25) = NONLOCAL
CALLUSED(26) = callescape(25)
callarg(28) = __out
callarg(28) = callarg(28) + UNKNOWN
callarg(28) = *callarg(28) + UNKNOWN
CALLUSED(26) = callarg(28)
*callarg(28) = callescape(25)
CALLCLOBBERED(27) = callarg(28)
callescape(25) = callarg(28)
ESCAPED = __out
callarg(29) = __c.21_7
callarg(29) = callarg(29) + UNKNOWN
callarg(29) = *callarg(29) + UNKNOWN
CALLUSED(26) = callarg(29)
*callarg(29) = callescape(25)
CALLCLOBBERED(27) = callarg(29)
callescape(25) = callarg(29)
ESCAPED = __c.21_7
_8 = _17
_8 = __out

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL __c }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__c = { ESCAPED NONLOCAL __c } same as __c.21_7
__out = { NONLOCAL }
_1 = { ESCAPED NONLOCAL }
_3 = { ESCAPED NONLOCAL }
_4 = { ESCAPED NONLOCAL } same as _3
_5 = { NONLOCAL }
_12 = { ESCAPED NONLOCAL }
_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l = { }
callescape(16) = { ESCAPED NONLOCAL __c }
CALLUSED(17) = { ESCAPED NONLOCAL __c } same as callescape(16)
CALLCLOBBERED(18) = { ESCAPED NONLOCAL __c }
callarg(19) = { ESCAPED NONLOCAL }
callarg(20) = { ESCAPED NONLOCAL __c }
callarg(21) = { ESCAPED NONLOCAL }
_17 = { ESCAPED NONLOCAL __c } same as callescape(16)
__c.21_7 = { ESCAPED NONLOCAL __c }
_ZNSo3putEc = { }
callescape(25) = { ESCAPED NONLOCAL __c }
CALLUSED(26) = { ESCAPED NONLOCAL __c } same as callescape(25)
CALLCLOBBERED(27) = { ESCAPED NONLOCAL __c }
callarg(28) = { ESCAPED NONLOCAL }
callarg(29) = { ESCAPED NONLOCAL __c }
_8 = { ESCAPED NONLOCAL __c } same as callescape(16)
_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c = { }


Alias information for std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char)std::basic_ostream<char, std::char_traits<char> >&

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.96325 } (escaped)

Flow-insensitive points-to information

_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_5, points-to non-local, points-to NULL, points-to vars: { }
_8, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.96325 } (escaped)
__out_11(D), points-to non-local, points-to vars: { }
_17, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.96325 } (escaped)

struct basic_ostream & std::operator<< <std::char_traits<char> > (struct basic_ostream & __out, char __c)
{
  streamsize D.98306;
  int (*__vtbl_ptr_type) () * _1;
  long int _3;
  sizetype _4;
  struct ios_base * _5;
  char __c.21_7;
  struct basic_ostream & _8;
  long int _12;
  struct basic_ostream & _17;

  <bb 2> :
  gimple_assign <component_ref, _1, __out_11(D)->_vptr.basic_ostream, NULL, NULL>
  gimple_assign <mem_ref, _3, MEM[(long int *)_1 + -24B], NULL, NULL>
  gimple_assign <nop_expr, _4, _3, NULL, NULL>
  gimple_assign <pointer_plus_expr, _5, __out_11(D), _4, NULL>
  gimple_assign <component_ref, _12, MEM[(const struct ios_base *)_5]._M_width, NULL, NULL>
  gimple_cond <ne_expr, _12, 0, NULL, NULL>
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  gimple_call <__ostream_insert, _17, __out_11(D), &__c, 1>
  goto <bb 5>; [INV]

  <bb 4> :
  gimple_assign <parm_decl, __c.21_7, __c, NULL, NULL>
  gimple_call <put, NULL, __out_11(D), __c.21_7>

  <bb 5> :
  # gimple_phi <_8, _17(3), __out_11(D)(4)>
  gimple_return <_8>

}



;; Function std::ctype<char>::widen (_ZNKSt5ctypeIcE5widenEc, funcdef_no=1528, decl_uid=40200, cgraph_uid=461, symbol_order=494)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__c = &NONLOCAL
_1 = *this + 448
_2 = __c
_15 = *this + UNKNOWN
callescape(14) = NONLOCAL
CALLUSED(15) = callescape(14)
callarg(17) = this
callarg(17) = callarg(17) + UNKNOWN
callarg(17) = *callarg(17) + UNKNOWN
CALLUSED(15) = callarg(17)
*callarg(17) = callescape(14)
CALLCLOBBERED(16) = callarg(17)
callescape(14) = callarg(17)
ESCAPED = this
_3 = *this
_5 = *_3 + 384
callescape(20) = NONLOCAL
CALLUSED(21) = callescape(20)
callarg(23) = this
callarg(23) = callarg(23) + UNKNOWN
callarg(23) = *callarg(23) + UNKNOWN
CALLUSED(21) = callarg(23)
*callarg(23) = callescape(20)
CALLCLOBBERED(22) = callarg(23)
callescape(20) = callarg(23)
ESCAPED = this
callarg(24) = __c
callarg(24) = callarg(24) + UNKNOWN
callarg(24) = *callarg(24) + UNKNOWN
CALLUSED(21) = callarg(24)
*callarg(24) = callescape(20)
CALLCLOBBERED(22) = callarg(24)
callescape(20) = callarg(24)
ESCAPED = __c
_13 = NONLOCAL
_13 = callarg(23)
_13 = callarg(24)
_6 = _15
_6 = _13

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__c = { NONLOCAL } same as this
_1 = { ESCAPED NONLOCAL }
_2 = { NONLOCAL } same as this
_15 = { ESCAPED NONLOCAL }
_ZNKSt5ctypeIcE13_M_widen_initEv = { }
callescape(14) = { ESCAPED NONLOCAL }
CALLUSED(15) = { ESCAPED NONLOCAL } same as callescape(14)
CALLCLOBBERED(16) = { ESCAPED NONLOCAL } same as callarg(17)
callarg(17) = { ESCAPED NONLOCAL }
_3 = { ESCAPED NONLOCAL }
_5 = { ESCAPED NONLOCAL }
callescape(20) = { ESCAPED NONLOCAL }
CALLUSED(21) = { ESCAPED NONLOCAL } same as callescape(20)
CALLCLOBBERED(22) = { ESCAPED NONLOCAL }
callarg(23) = { ESCAPED NONLOCAL }
callarg(24) = { ESCAPED NONLOCAL }
_13 = { ESCAPED NONLOCAL } same as callescape(20)
_6 = { ESCAPED NONLOCAL }
_ZNKSt5ctypeIcE5widenEc = { }


Alias information for std::ctype<char>::widen(char) const

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_3, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_5, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
this_9(D), points-to non-local, points-to vars: { }

char_type std::ctype<char>::widen (const struct ctype * const this, char __c)
{
  char _1;
  int _2;
  int (*__vtbl_ptr_type) () * _3;
  int (*__vtbl_ptr_type) () _5;
  char_type _6;
  char_type _13;
  char_type _15;

  <bb 2> :
  gimple_assign <component_ref, _1, this_9(D)->_M_widen_ok, NULL, NULL>
  gimple_cond <ne_expr, _1, 0, NULL, NULL>
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  gimple_assign <nop_expr, _2, __c_11(D), NULL, NULL>
  gimple_assign <array_ref, _15, this_9(D)->_M_widen[_2], NULL, NULL>
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 5>; [INV]

  <bb 4> :
  gimple_call <_M_widen_init, NULL, this_9(D)>
  gimple_assign <component_ref, _3, this_9(D)->D.40314._vptr.facet, NULL, NULL>
  gimple_assign <mem_ref, _5, MEM[(int (*__vtbl_ptr_type) () *)_3 + 48B], NULL, NULL>
  gimple_call <OBJ_TYPE_REF(_5;(const struct ctype)this_9(D)->6B), _13, this_9(D), __c_11(D)>

  <bb 5> :
  # gimple_phi <_6, _15(3), _13(4)>
  gimple_return <_6>

}



;; Function std::ctype<char>::do_widen (_ZNKSt5ctypeIcE8do_widenEc, funcdef_no=1533, decl_uid=40248, cgraph_uid=466, symbol_order=499)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__c = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__c = { NONLOCAL } same as this
_ZNKSt5ctypeIcE8do_widenEc = { }


Alias information for std::ctype<char>::do_widen(char) const

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information


char_type std::ctype<char>::do_widen (const struct ctype * const this, char __c)
{
  <bb 2> :
  gimple_return <__c_1(D)>

}



;; Function register_signal (_Z15register_signalv, funcdef_no=3695, decl_uid=88794, cgraph_uid=1174, symbol_order=1737)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
callescape(9) = NONLOCAL
CALLUSED(10) = callescape(9)
callarg(12) = &NONLOCAL
callarg(12) = callarg(12) + UNKNOWN
callarg(12) = *callarg(12) + UNKNOWN
CALLUSED(10) = callarg(12)
*callarg(12) = callescape(9)
CALLCLOBBERED(11) = callarg(12)
callescape(9) = callarg(12)
ESCAPED = &NONLOCAL
callarg(13) = &_ZL9sighandlei
callarg(13) = callarg(13) + UNKNOWN
callarg(13) = *callarg(13) + UNKNOWN
CALLUSED(10) = callarg(13)
*callarg(13) = callescape(9)
CALLCLOBBERED(11) = callarg(13)
callescape(9) = callarg(13)
ESCAPED = &_ZL9sighandlei
callescape(15) = NONLOCAL
CALLUSED(16) = callescape(15)
callarg(18) = &NONLOCAL
callarg(18) = callarg(18) + UNKNOWN
callarg(18) = *callarg(18) + UNKNOWN
CALLUSED(16) = callarg(18)
*callarg(18) = callescape(15)
CALLCLOBBERED(17) = callarg(18)
callescape(15) = callarg(18)
ESCAPED = &NONLOCAL
callarg(19) = &_ZL9sighandlei
callarg(19) = callarg(19) + UNKNOWN
callarg(19) = *callarg(19) + UNKNOWN
CALLUSED(16) = callarg(19)
*callarg(19) = callescape(15)
CALLCLOBBERED(17) = callarg(19)
callescape(15) = callarg(19)
ESCAPED = &_ZL9sighandlei
callescape(20) = NONLOCAL
CALLUSED(21) = callescape(20)
callarg(23) = &NONLOCAL
callarg(23) = callarg(23) + UNKNOWN
callarg(23) = *callarg(23) + UNKNOWN
CALLUSED(21) = callarg(23)
*callarg(23) = callescape(20)
CALLCLOBBERED(22) = callarg(23)
callescape(20) = callarg(23)
ESCAPED = &NONLOCAL
callarg(24) = &_ZL9sighandlei
callarg(24) = callarg(24) + UNKNOWN
callarg(24) = *callarg(24) + UNKNOWN
CALLUSED(21) = callarg(24)
*callarg(24) = callescape(20)
CALLCLOBBERED(22) = callarg(24)
callescape(20) = callarg(24)
ESCAPED = &_ZL9sighandlei
callescape(25) = NONLOCAL
CALLUSED(26) = callescape(25)
callarg(28) = &NONLOCAL
callarg(28) = callarg(28) + UNKNOWN
callarg(28) = *callarg(28) + UNKNOWN
CALLUSED(26) = callarg(28)
*callarg(28) = callescape(25)
CALLCLOBBERED(27) = callarg(28)
callescape(25) = callarg(28)
ESCAPED = &NONLOCAL
callarg(29) = &_ZL9sighandlei
callarg(29) = callarg(29) + UNKNOWN
callarg(29) = *callarg(29) + UNKNOWN
CALLUSED(26) = callarg(29)
*callarg(29) = callescape(25)
CALLCLOBBERED(27) = callarg(29)
callescape(25) = callarg(29)
ESCAPED = &_ZL9sighandlei
callescape(30) = NONLOCAL
CALLUSED(31) = callescape(30)
callarg(33) = &NONLOCAL
callarg(33) = callarg(33) + UNKNOWN
callarg(33) = *callarg(33) + UNKNOWN
CALLUSED(31) = callarg(33)
*callarg(33) = callescape(30)
CALLCLOBBERED(32) = callarg(33)
callescape(30) = callarg(33)
ESCAPED = &NONLOCAL
callarg(34) = &_ZL9sighandlei
callarg(34) = callarg(34) + UNKNOWN
callarg(34) = *callarg(34) + UNKNOWN
CALLUSED(31) = callarg(34)
*callarg(34) = callescape(30)
CALLCLOBBERED(32) = callarg(34)
callescape(30) = callarg(34)
ESCAPED = &_ZL9sighandlei
callescape(35) = NONLOCAL
CALLUSED(36) = callescape(35)
callarg(38) = &NONLOCAL
callarg(38) = callarg(38) + UNKNOWN
callarg(38) = *callarg(38) + UNKNOWN
CALLUSED(36) = callarg(38)
*callarg(38) = callescape(35)
CALLCLOBBERED(37) = callarg(38)
callescape(35) = callarg(38)
ESCAPED = &NONLOCAL
callarg(39) = &_ZL9sighandlei
callarg(39) = callarg(39) + UNKNOWN
callarg(39) = *callarg(39) + UNKNOWN
CALLUSED(36) = callarg(39)
*callarg(39) = callescape(35)
CALLCLOBBERED(37) = callarg(39)
callescape(35) = callarg(39)
ESCAPED = &_ZL9sighandlei
callescape(40) = NONLOCAL
CALLUSED(41) = callescape(40)
callarg(43) = &NONLOCAL
callarg(43) = callarg(43) + UNKNOWN
callarg(43) = *callarg(43) + UNKNOWN
CALLUSED(41) = callarg(43)
*callarg(43) = callescape(40)
CALLCLOBBERED(42) = callarg(43)
callescape(40) = callarg(43)
ESCAPED = &NONLOCAL
callarg(44) = &_ZL9sighandlei
callarg(44) = callarg(44) + UNKNOWN
callarg(44) = *callarg(44) + UNKNOWN
CALLUSED(41) = callarg(44)
*callarg(44) = callescape(40)
CALLCLOBBERED(42) = callarg(44)
callescape(40) = callarg(44)
ESCAPED = &_ZL9sighandlei
callescape(45) = NONLOCAL
CALLUSED(46) = callescape(45)
callarg(48) = &NONLOCAL
callarg(48) = callarg(48) + UNKNOWN
callarg(48) = *callarg(48) + UNKNOWN
CALLUSED(46) = callarg(48)
*callarg(48) = callescape(45)
CALLCLOBBERED(47) = callarg(48)
callescape(45) = callarg(48)
ESCAPED = &NONLOCAL
callarg(49) = &_ZL9sighandlei
callarg(49) = callarg(49) + UNKNOWN
callarg(49) = *callarg(49) + UNKNOWN
CALLUSED(46) = callarg(49)
*callarg(49) = callescape(45)
CALLCLOBBERED(47) = callarg(49)
callescape(45) = callarg(49)
ESCAPED = &_ZL9sighandlei
callescape(50) = NONLOCAL
CALLUSED(51) = callescape(50)
callarg(53) = &NONLOCAL
callarg(53) = callarg(53) + UNKNOWN
callarg(53) = *callarg(53) + UNKNOWN
CALLUSED(51) = callarg(53)
*callarg(53) = callescape(50)
CALLCLOBBERED(52) = callarg(53)
callescape(50) = callarg(53)
ESCAPED = &NONLOCAL
callarg(54) = &_ZL9sighandlei
callarg(54) = callarg(54) + UNKNOWN
callarg(54) = *callarg(54) + UNKNOWN
CALLUSED(51) = callarg(54)
*callarg(54) = callescape(50)
CALLCLOBBERED(52) = callarg(54)
callescape(50) = callarg(54)
ESCAPED = &_ZL9sighandlei
callescape(55) = NONLOCAL
CALLUSED(56) = callescape(55)
callarg(58) = &NONLOCAL
callarg(58) = callarg(58) + UNKNOWN
callarg(58) = *callarg(58) + UNKNOWN
CALLUSED(56) = callarg(58)
*callarg(58) = callescape(55)
CALLCLOBBERED(57) = callarg(58)
callescape(55) = callarg(58)
ESCAPED = &NONLOCAL
callarg(59) = &_ZL9sighandlei
callarg(59) = callarg(59) + UNKNOWN
callarg(59) = *callarg(59) + UNKNOWN
CALLUSED(56) = callarg(59)
*callarg(59) = callescape(55)
CALLCLOBBERED(57) = callarg(59)
callescape(55) = callarg(59)
ESCAPED = &_ZL9sighandlei

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL _ZL9sighandlei }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
_ZL9sighandlei = { ESCAPED NONLOCAL _ZL9sighandlei }
signal = { }
callescape(9) = { ESCAPED NONLOCAL _ZL9sighandlei }
CALLUSED(10) = { ESCAPED NONLOCAL _ZL9sighandlei } same as callescape(9)
CALLCLOBBERED(11) = { ESCAPED NONLOCAL _ZL9sighandlei }
callarg(12) = { ESCAPED NONLOCAL }
callarg(13) = { ESCAPED NONLOCAL _ZL9sighandlei }
callescape(15) = { ESCAPED NONLOCAL _ZL9sighandlei }
CALLUSED(16) = { ESCAPED NONLOCAL _ZL9sighandlei } same as callescape(15)
CALLCLOBBERED(17) = { ESCAPED NONLOCAL _ZL9sighandlei }
callarg(18) = { ESCAPED NONLOCAL }
callarg(19) = { ESCAPED NONLOCAL _ZL9sighandlei }
callescape(20) = { ESCAPED NONLOCAL _ZL9sighandlei }
CALLUSED(21) = { ESCAPED NONLOCAL _ZL9sighandlei } same as callescape(20)
CALLCLOBBERED(22) = { ESCAPED NONLOCAL _ZL9sighandlei }
callarg(23) = { ESCAPED NONLOCAL }
callarg(24) = { ESCAPED NONLOCAL _ZL9sighandlei }
callescape(25) = { ESCAPED NONLOCAL _ZL9sighandlei }
CALLUSED(26) = { ESCAPED NONLOCAL _ZL9sighandlei } same as callescape(25)
CALLCLOBBERED(27) = { ESCAPED NONLOCAL _ZL9sighandlei }
callarg(28) = { ESCAPED NONLOCAL }
callarg(29) = { ESCAPED NONLOCAL _ZL9sighandlei }
callescape(30) = { ESCAPED NONLOCAL _ZL9sighandlei }
CALLUSED(31) = { ESCAPED NONLOCAL _ZL9sighandlei } same as callescape(30)
CALLCLOBBERED(32) = { ESCAPED NONLOCAL _ZL9sighandlei }
callarg(33) = { ESCAPED NONLOCAL }
callarg(34) = { ESCAPED NONLOCAL _ZL9sighandlei }
callescape(35) = { ESCAPED NONLOCAL _ZL9sighandlei }
CALLUSED(36) = { ESCAPED NONLOCAL _ZL9sighandlei } same as callescape(35)
CALLCLOBBERED(37) = { ESCAPED NONLOCAL _ZL9sighandlei }
callarg(38) = { ESCAPED NONLOCAL }
callarg(39) = { ESCAPED NONLOCAL _ZL9sighandlei }
callescape(40) = { ESCAPED NONLOCAL _ZL9sighandlei }
CALLUSED(41) = { ESCAPED NONLOCAL _ZL9sighandlei } same as callescape(40)
CALLCLOBBERED(42) = { ESCAPED NONLOCAL _ZL9sighandlei }
callarg(43) = { ESCAPED NONLOCAL }
callarg(44) = { ESCAPED NONLOCAL _ZL9sighandlei }
callescape(45) = { ESCAPED NONLOCAL _ZL9sighandlei }
CALLUSED(46) = { ESCAPED NONLOCAL _ZL9sighandlei } same as callescape(45)
CALLCLOBBERED(47) = { ESCAPED NONLOCAL _ZL9sighandlei }
callarg(48) = { ESCAPED NONLOCAL }
callarg(49) = { ESCAPED NONLOCAL _ZL9sighandlei }
callescape(50) = { ESCAPED NONLOCAL _ZL9sighandlei }
CALLUSED(51) = { ESCAPED NONLOCAL _ZL9sighandlei } same as callescape(50)
CALLCLOBBERED(52) = { ESCAPED NONLOCAL _ZL9sighandlei }
callarg(53) = { ESCAPED NONLOCAL }
callarg(54) = { ESCAPED NONLOCAL _ZL9sighandlei }
callescape(55) = { ESCAPED NONLOCAL _ZL9sighandlei }
CALLUSED(56) = { ESCAPED NONLOCAL _ZL9sighandlei } same as callescape(55)
CALLCLOBBERED(57) = { ESCAPED NONLOCAL _ZL9sighandlei }
callarg(58) = { ESCAPED NONLOCAL }
callarg(59) = { ESCAPED NONLOCAL _ZL9sighandlei }


Alias information for register_signal()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { } (nonlocal, escaped)

Flow-insensitive points-to information


void register_signal ()
{
  <bb 2> :
  gimple_call <signal, NULL, 6, sighandle>
  gimple_call <signal, NULL, 7, sighandle>
  gimple_call <signal, NULL, 8, sighandle>
  gimple_call <signal, NULL, 4, sighandle>
  gimple_call <signal, NULL, 3, sighandle>
  gimple_call <signal, NULL, 11, sighandle>
  gimple_call <signal, NULL, 31, sighandle>
  gimple_call <signal, NULL, 5, sighandle>
  gimple_call <signal, NULL, 24, sighandle>
  gimple_call <signal, NULL, 25, sighandle>
  gimple_return <NULL>

}



;; Function std::__array_traits<char, 128ul>::_S_ptr (_ZNSt14__array_traitsIcLm128EE6_S_ptrERA128_Kc, funcdef_no=3699, decl_uid=89183, cgraph_uid=1177, symbol_order=1740)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__t = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__t = { NONLOCAL }
_ZNSt14__array_traitsIcLm128EE6_S_ptrERA128_Kc = { }


Alias information for std::__array_traits<char, 128ul>::_S_ptr(char const (&) [128])

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information

__t_1(D), points-to non-local, points-to vars: { }

char * std::__array_traits<char, 128ul>::_S_ptr (const char[128] & __t)
{
  <bb 2> :
  gimple_return <__t_1(D)>

}



;; Function std::array<char, 128ul>::data (_ZNSt5arrayIcLm128EE4dataEv, funcdef_no=3698, decl_uid=89243, cgraph_uid=1176, symbol_order=1739)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_1 = this + UNKNOWN

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_1 = { NONLOCAL }
_ZNSt5arrayIcLm128EE4dataEv = { }


Alias information for std::array<char, 128ul>::data()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to NULL, points-to vars: { }
this_2(D), points-to non-local, points-to vars: { }

__attribute__((nodiscard, const))
value_type * std::array<char, 128ul>::data (struct array * const this)
{
  char * D.98318;
  char[128] * _1;

  <bb 2> :
  gimple_assign <addr_expr, _1, &this_2(D)->_M_elems, NULL, NULL>
  gimple_return <_1>

}



;; Function std::__detail::__to_chars_len<unsigned int> (_ZNSt8__detail14__to_chars_lenIjEEjT_i, funcdef_no=3802, decl_uid=29357, cgraph_uid=1281, symbol_order=1844)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__value = &NONLOCAL
__base = &NONLOCAL
_1 = __base + UNKNOWN
_1 = __base + UNKNOWN
__b2_14 = _1
__base.10_2 = __base
__b3_15 = __base.10_2 + UNKNOWN
__b3_15 = __b2_14 + UNKNOWN
__base.11_3 = __base
_4 = __base.11_3 + UNKNOWN
_4 = __b3_15 + UNKNOWN
__b4_16 = _4
__value_9 = __value
__value_9 = __value_18
__n_10 = &NONLOCAL
__n_10 = __n_19
__base.12_5 = __base
_22 = __n_10 + UNKNOWN
_22 = &NONLOCAL
_21 = __n_10 + UNKNOWN
_21 = &NONLOCAL
_6 = __value_9
_20 = __n_10 + UNKNOWN
_20 = &NONLOCAL
_7 = __value_9
_8 = _7 + UNKNOWN
__value_18 = _8
__n_19 = __n_10 + UNKNOWN
__n_19 = &NONLOCAL
_11 = __n_10
_11 = _22
_11 = _21
_11 = _20

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__value = { NONLOCAL }
__base = { NONLOCAL } same as __value
_1 = { NONLOCAL }
__b2_14 = { NONLOCAL } same as _1
__base.10_2 = { NONLOCAL } same as __value
__b3_15 = { NONLOCAL }
__base.11_3 = { NONLOCAL } same as __value
_4 = { NONLOCAL }
__b4_16 = { NONLOCAL } same as _4
__value_9 = { NONLOCAL }
__value_18 = { NONLOCAL }
__n_10 = { NONLOCAL }
__n_19 = { NONLOCAL } same as __n_10
__base.12_5 = { NONLOCAL } same as __value
_22 = { NONLOCAL }
_21 = { NONLOCAL }
_6 = { NONLOCAL } same as __value_9
_20 = { NONLOCAL }
_7 = { NONLOCAL } same as __value_9
_8 = { NONLOCAL } same as __value_18
_11 = { NONLOCAL }
_ZNSt8__detail14__to_chars_lenIjEEjT_i = { }


Alias information for std::__detail::__to_chars_len<unsigned int>(unsigned int, int)unsigned int

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information


unsigned int std::__detail::__to_chars_len<unsigned int> (unsigned int __value, int __base)
{
  const long unsigned int __b4;
  const unsigned int __b3;
  const unsigned int __b2;
  unsigned int __n;
  int _1;
  unsigned int __base.10_2;
  unsigned int __base.11_3;
  unsigned int _4;
  unsigned int __base.12_5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  unsigned int _11;
  unsigned int _20;
  unsigned int _21;
  unsigned int _22;

  <bb 2> :
  gimple_assign <mult_expr, _1, __base_13(D), __base_13(D), NULL>
  gimple_assign <nop_expr, __b2_14, _1, NULL, NULL>
  gimple_assign <nop_expr, __base.10_2, __base_13(D), NULL, NULL>
  gimple_assign <mult_expr, __b3_15, __base.10_2, __b2_14, NULL>
  gimple_assign <nop_expr, __base.11_3, __base_13(D), NULL, NULL>
  gimple_assign <mult_expr, _4, __base.11_3, __b3_15, NULL>
  gimple_assign <nop_expr, __b4_16, _4, NULL, NULL>

  <bb 3> :
  # gimple_phi <__value_9, __value_17(D)(2), __value_18(11)>
  # gimple_phi <__n_10, 1(2), __n_19(11)>
  gimple_assign <nop_expr, __base.12_5, __base_13(D), NULL, NULL>
  gimple_cond <gt_expr, __base.12_5, __value_9, NULL, NULL>
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 12>; [INV]

  <bb 5> :
  gimple_cond <lt_expr, __value_9, __b2_14, NULL, NULL>
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  gimple_assign <plus_expr, _22, __n_10, 1, NULL>
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 12>; [INV]

  <bb 7> :
  gimple_cond <lt_expr, __value_9, __b3_15, NULL, NULL>
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  gimple_assign <plus_expr, _21, __n_10, 2, NULL>
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 12>; [INV]

  <bb 9> :
  gimple_assign <nop_expr, _6, __value_9, NULL, NULL>
  gimple_cond <gt_expr, _4, __value_9, NULL, NULL>
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  gimple_assign <plus_expr, _20, __n_10, 3, NULL>
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 12>; [INV]

  <bb 11> :
  gimple_assign <nop_expr, _7, __value_9, NULL, NULL>
  gimple_assign <trunc_div_expr, _8, _7, __b4_16, NULL>
  gimple_assign <nop_expr, __value_18, _8, NULL, NULL>
  gimple_assign <plus_expr, __n_19, __n_10, 4, NULL>
  goto <bb 3>; [INV]

  <bb 12> :
  # gimple_phi <_11, __n_10(4), _22(6), _21(8), _20(10)>
  gimple_return <_11>

}



;; Function std::__detail::__to_chars_10_impl<unsigned int> (_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_, funcdef_no=3819, decl_uid=29566, cgraph_uid=1298, symbol_order=1862)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__first = &NONLOCAL
__len = &NONLOCAL
__val = &NONLOCAL
__pos_21 = __len + UNKNOWN
__pos_21 = &NONLOCAL
_1 = __val_16 + UNKNOWN
__num_29 = _1 + UNKNOWN
__num_29 = &NONLOCAL
__val_30 = __val_16 + UNKNOWN
_2 = __num_29 + UNKNOWN
_2 = &NONLOCAL
_3 = __pos_17
_4 = __first + UNKNOWN
_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits = NONLOCAL
_5 = _ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits
*_4 = _5
_6 = __pos_17 + UNKNOWN
_6 = &NONLOCAL
_7 = _6
_8 = __first + UNKNOWN
_9 = _ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits
*_8 = _9
__pos_33 = __pos_17 + UNKNOWN
__pos_33 = &NONLOCAL
__val_16 = __val
__val_16 = __val_30
__pos_17 = __pos_21
__pos_17 = __pos_33
__num_26 = __val_16 + UNKNOWN
__num_26 = &NONLOCAL
_10 = __num_26 + UNKNOWN
_10 = &NONLOCAL
_12 = _ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits
*__first + 8 = _12
_13 = _ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits
*__first = _13
_14 = __val_16
_15 = _14 + UNKNOWN
_15 = &NONLOCAL
*__first = _15

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__first = { NONLOCAL }
__len = { NONLOCAL } same as __first
__val = { NONLOCAL } same as __first
__pos_21 = { NONLOCAL }
_1 = { NONLOCAL }
__val_16 = { NONLOCAL }
__num_29 = { NONLOCAL }
__val_30 = { NONLOCAL }
_2 = { NONLOCAL }
_3 = { NONLOCAL }
__pos_17 = { NONLOCAL } same as _3
_4 = { NONLOCAL }
_5 = { ESCAPED NONLOCAL } same as _ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits
_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits = { ESCAPED NONLOCAL }
_6 = { NONLOCAL }
_7 = { NONLOCAL } same as _6
_8 = { NONLOCAL }
_9 = { ESCAPED NONLOCAL } same as _ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits
__pos_33 = { NONLOCAL }
__num_26 = { NONLOCAL }
_10 = { NONLOCAL }
_12 = { ESCAPED NONLOCAL } same as _ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits
_13 = { ESCAPED NONLOCAL } same as _ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits
_14 = { NONLOCAL } same as __val_16
_15 = { NONLOCAL }


Alias information for std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)void

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_4, points-to non-local, points-to NULL, points-to vars: { }
_8, points-to non-local, points-to NULL, points-to vars: { }
__first_24(D), points-to non-local, points-to NULL, points-to vars: { }

void std::__detail::__to_chars_10_impl<unsigned int> (char * __first, unsigned int __len, unsigned int __val)
{
  const unsigned int __num;
  const unsigned int __num;
  unsigned int __pos;
  static const char __digits[201] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899";
  unsigned int _1;
  unsigned int _2;
  sizetype _3;
  char * _4;
  char _5;
  unsigned int _6;
  sizetype _7;
  char * _8;
  char _9;
  unsigned int _10;
  char _12;
  char _13;
  char _14;
  char _15;

  <bb 2> :
  gimple_assign <plus_expr, __pos_21, __len_20(D), 4294967295, NULL>
  goto <bb 4>; [INV]

  <bb 3> :
  gimple_assign <trunc_mod_expr, _1, __val_16, 100, NULL>
  gimple_assign <mult_expr, __num_29, _1, 2, NULL>
  gimple_assign <trunc_div_expr, __val_30, __val_16, 100, NULL>
  gimple_assign <plus_expr, _2, __num_29, 1, NULL>
  gimple_assign <nop_expr, _3, __pos_17, NULL, NULL>
  gimple_assign <pointer_plus_expr, _4, __first_24(D), _3, NULL>
  gimple_assign <array_ref, _5, __digits[_2], NULL, NULL>
  gimple_assign <ssa_name, *_4, _5, NULL, NULL>
  gimple_assign <plus_expr, _6, __pos_17, 4294967295, NULL>
  gimple_assign <nop_expr, _7, _6, NULL, NULL>
  gimple_assign <pointer_plus_expr, _8, __first_24(D), _7, NULL>
  gimple_assign <array_ref, _9, __digits[__num_29], NULL, NULL>
  gimple_assign <ssa_name, *_8, _9, NULL, NULL>
  gimple_assign <plus_expr, __pos_33, __pos_17, 4294967294, NULL>

  <bb 4> :
  # gimple_phi <__val_16, __val_22(D)(2), __val_30(3)>
  # gimple_phi <__pos_17, __pos_21(2), __pos_33(3)>
  gimple_cond <gt_expr, __val_16, 99, NULL, NULL>
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  gimple_cond <gt_expr, __val_16, 9, NULL, NULL>
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  gimple_assign <mult_expr, __num_26, __val_16, 2, NULL>
  gimple_assign <plus_expr, _10, __num_26, 1, NULL>
  gimple_assign <array_ref, _12, __digits[_10], NULL, NULL>
  gimple_assign <ssa_name, MEM[(char *)__first_24(D) + 1B], _12, NULL, NULL>
  gimple_assign <array_ref, _13, __digits[__num_26], NULL, NULL>
  gimple_assign <ssa_name, *__first_24(D), _13, NULL, NULL>
  goto <bb 8>; [INV]

  <bb 7> :
  gimple_assign <nop_expr, _14, __val_16, NULL, NULL>
  gimple_assign <plus_expr, _15, _14, 48, NULL>
  gimple_assign <ssa_name, *__first_24(D), _15, NULL, NULL>

  <bb 8> :
  gimple_return <NULL>

}



;; Function __gnu_cxx::char_traits<char>::eq (_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_, funcdef_no=4098, decl_uid=9954, cgraph_uid=1577, symbol_order=2153)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__c1 = &NONLOCAL
__c2 = &NONLOCAL
_1 = *__c1
_2 = *__c2

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__c1 = { NONLOCAL }
__c2 = { NONLOCAL } same as __c1
_1 = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL }
_6 = { }
_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_ = { }


Alias information for __gnu_cxx::char_traits<char>::eq(char const&, char const&)

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information

__c1_4(D), points-to non-local, points-to vars: { }
__c2_5(D), points-to non-local, points-to vars: { }

bool __gnu_cxx::char_traits<char>::eq (const char_type & __c1, const char_type & __c2)
{
  char _1;
  char _2;
  bool _6;

  <bb 2> :
  gimple_assign <mem_ref, _1, *__c1_4(D), NULL, NULL>
  gimple_assign <mem_ref, _2, *__c2_5(D), NULL, NULL>
  gimple_assign <eq_expr, _6, _1, _2, NULL>
  gimple_return <_6>

}



;; Function __gnu_cxx::char_traits<char>::length (_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc, funcdef_no=3702, decl_uid=9964, cgraph_uid=1181, symbol_order=1744)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__p = &NONLOCAL
__i_13 = __i_3 + UNKNOWN
__i_13 = &NONLOCAL
__i_3 = &NULL
__i_3 = __i_13
_1 = __p + UNKNOWN
_9 = *_1

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__p = { NONLOCAL }
__i_13 = { NULL NONLOCAL }
__i_3 = { NULL NONLOCAL }
_1 = { NONLOCAL }
_9 = { ESCAPED NONLOCAL }
_15 = { }
_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc = { }


Alias information for __gnu_cxx::char_traits<char>::length(char const*)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to NULL, points-to vars: { }
__p_7(D), points-to non-local, points-to NULL, points-to vars: { }

size_t __gnu_cxx::char_traits<char>::length (const char_type * __p)
{
  bool D.98325;
  size_t __i;
  const char_type D.89317;
  const char_type * _1;
  char _9;
  bool _15;
  const char_type _18(D);

  <bb 2> :
  goto <bb 4>; [INV]

  <bb 3> :
  gimple_assign <plus_expr, __i_13, __i_3, 1, NULL>

  <bb 4> :
  # gimple_phi <__i_3, 0(2), __i_13(3)>
  gimple_assign <pointer_plus_expr, _1, __p_7(D), __i_3, NULL>
  gimple_assign <mem_ref, _9, *_1, NULL, NULL>
  gimple_assign <eq_expr, _15, _9, 0, NULL>
  gimple_cond <ne_expr, _9, 0, NULL, NULL>
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  gimple_return <__i_3>

}



;; Function std::char_traits<char>::length (_ZNSt11char_traitsIcE6lengthEPKc, funcdef_no=122, decl_uid=9883, cgraph_uid=68, symbol_order=77)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__s = &NONLOCAL
CALLUSED(9) = CALLUSED(9) + UNKNOWN
CALLUSED(9) = __s

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__s = { NONLOCAL }
CALLUSED(9) = { NONLOCAL }
CALLCLOBBERED(10) = { }
_ZNSt11char_traitsIcE6lengthEPKc = { }


Alias information for std::char_traits<char>::length(char const*)

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information

__s_6(D), points-to non-local, points-to NULL, points-to vars: { }

size_t std::char_traits<char>::length (const char_type * __s)
{
  size_t __i;
  size_t D.98330;
  bool D.98327;
  size_t _7;

  <bb 2> :
  gimple_call <__builtin_strlen, _7, __s_6(D)>
  gimple_return <_7>

}



;; Function std::operator<< <std::char_traits<char> > (_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc, funcdef_no=4081, decl_uid=44729, cgraph_uid=1560, symbol_order=2136)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__out = &NONLOCAL
__s = &NONLOCAL
_1 = *__out
_3 = *_1 + -192
_4 = _3
_5 = __out + UNKNOWN
_11 = *_5 + 256
_17 = _11 + UNKNOWN
_17 = &NONLOCAL
callescape(17) = NONLOCAL
CALLUSED(18) = callescape(17)
callarg(20) = _5
callarg(20) = callarg(20) + UNKNOWN
callarg(20) = *callarg(20) + UNKNOWN
CALLUSED(18) = callarg(20)
*callarg(20) = callescape(17)
CALLCLOBBERED(19) = callarg(20)
callescape(17) = callarg(20)
ESCAPED = _5
callarg(21) = _17
callarg(21) = callarg(21) + UNKNOWN
callarg(21) = *callarg(21) + UNKNOWN
CALLUSED(18) = callarg(21)
*callarg(21) = callescape(17)
CALLCLOBBERED(19) = callarg(21)
callescape(17) = callarg(21)
ESCAPED = _17
CALLUSED(22) = CALLUSED(22) + UNKNOWN
CALLUSED(22) = __s
_7 = _18
callescape(27) = NONLOCAL
CALLUSED(28) = callescape(27)
callarg(30) = __out
callarg(30) = callarg(30) + UNKNOWN
callarg(30) = *callarg(30) + UNKNOWN
CALLUSED(28) = callarg(30)
*callarg(30) = callescape(27)
CALLCLOBBERED(29) = callarg(30)
callescape(27) = callarg(30)
ESCAPED = __out
callarg(31) = __s
callarg(31) = callarg(31) + UNKNOWN
callarg(31) = *callarg(31) + UNKNOWN
CALLUSED(28) = callarg(31)
*callarg(31) = callescape(27)
CALLCLOBBERED(29) = callarg(31)
callescape(27) = callarg(31)
ESCAPED = __s
callarg(32) = _7
callarg(32) = callarg(32) + UNKNOWN
callarg(32) = *callarg(32) + UNKNOWN
CALLUSED(28) = callarg(32)
*callarg(32) = callescape(27)
CALLCLOBBERED(29) = callarg(32)
callescape(27) = callarg(32)
ESCAPED = _7

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__out = { NONLOCAL }
__s = { NONLOCAL } same as __out
_1 = { ESCAPED NONLOCAL }
_3 = { ESCAPED NONLOCAL }
_4 = { ESCAPED NONLOCAL } same as _3
_5 = { NONLOCAL }
_11 = { ESCAPED NONLOCAL }
_17 = { ESCAPED NONLOCAL }
_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate = { }
callescape(17) = { ESCAPED NONLOCAL }
CALLUSED(18) = { ESCAPED NONLOCAL } same as callescape(17)
CALLCLOBBERED(19) = { ESCAPED NONLOCAL }
callarg(20) = { ESCAPED NONLOCAL }
callarg(21) = { ESCAPED NONLOCAL }
CALLUSED(22) = { NONLOCAL }
CALLCLOBBERED(23) = { }
_7 = { }
_18 = { }
_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l = { }
callescape(27) = { ESCAPED NONLOCAL }
CALLUSED(28) = { ESCAPED NONLOCAL } same as callescape(27)
CALLCLOBBERED(29) = { ESCAPED NONLOCAL }
callarg(30) = { ESCAPED NONLOCAL }
callarg(31) = { ESCAPED NONLOCAL }
callarg(32) = { }
_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc = { }


Alias information for std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)std::basic_ostream<char, std::char_traits<char> >&

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_5, points-to non-local, points-to NULL, points-to vars: { }
__s_9(D), points-to non-local, points-to NULL, points-to vars: { }
__out_13(D), points-to non-local, points-to vars: { }

struct basic_ostream & std::operator<< <std::char_traits<char> > (struct basic_ostream & __out, const char * __s)
{
  size_t D.98335;
  int (*__vtbl_ptr_type) () * _1;
  long int _3;
  sizetype _4;
  struct basic_ios * _5;
  long int _7;
  _Ios_Iostate _11;
  _Ios_Iostate _17;
  long unsigned int _18;

  <bb 2> :
  gimple_cond <eq_expr, __s_9(D), 0B, NULL, NULL>
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  gimple_assign <component_ref, _1, __out_13(D)->_vptr.basic_ostream, NULL, NULL>
  gimple_assign <mem_ref, _3, MEM[(long int *)_1 + -24B], NULL, NULL>
  gimple_assign <nop_expr, _4, _3, NULL, NULL>
  gimple_assign <pointer_plus_expr, _5, __out_13(D), _4, NULL>
  gimple_assign <component_ref, _11, MEM[(const struct basic_ios *)_5].D.43795._M_streambuf_state, NULL, NULL>
  gimple_assign <bit_ior_expr, _17, _11, 1, NULL>
  gimple_call <clear, NULL, _5, _17>
  goto <bb 5>; [100.00%]

  <bb 4> :
  gimple_call <__builtin_strlen, _18, __s_9(D)>
  gimple_assign <nop_expr, _7, _18, NULL, NULL>
  gimple_call <__ostream_insert, NULL, __out_13(D), __s_9(D), _7>

  <bb 5> :
  gimple_return <__out_13(D)>

}



;; Function monitor_child (_Z13monitor_childi, funcdef_no=3700, decl_uid=88798, cgraph_uid=1179, symbol_order=1742)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
pid = &NONLOCAL
callescape(10) = NONLOCAL
CALLUSED(11) = callescape(10)
callarg(13) = pid
callarg(13) = callarg(13) + UNKNOWN
callarg(13) = *callarg(13) + UNKNOWN
CALLUSED(11) = callarg(13)
*callarg(13) = callescape(10)
CALLCLOBBERED(12) = callarg(13)
callescape(10) = callarg(13)
ESCAPED = pid
callarg(14) = &status
callarg(14) = callarg(14) + UNKNOWN
callarg(14) = *callarg(14) + UNKNOWN
CALLUSED(11) = callarg(14)
*callarg(14) = callescape(10)
CALLCLOBBERED(12) = callarg(14)
callescape(10) = callarg(14)
ESCAPED = &status
callarg(16) = &NONLOCAL
callarg(16) = callarg(16) + UNKNOWN
callarg(16) = *callarg(16) + UNKNOWN
CALLUSED(11) = callarg(16)
*callarg(16) = callescape(10)
CALLCLOBBERED(12) = callarg(16)
callescape(10) = callarg(16)
ESCAPED = &NONLOCAL
_37 = NONLOCAL
_37 = callarg(13)
_37 = callarg(14)
_37 = callarg(16)
status.39_2 = status
_3 = status.39_2 + UNKNOWN
callescape(21) = NONLOCAL
CALLUSED(22) = callescape(21)
_ZSt4cout.0+64 = NONLOCAL
_ZSt4cout.64+64 = NONLOCAL
_ZSt4cout.128+224 = NONLOCAL
_ZSt4cout.384+64 = NONLOCAL
_ZSt4cout.448+64 = NONLOCAL
_ZSt4cout.512+1120 = NONLOCAL
_ZSt4cout.1664+64 = NONLOCAL
_ZSt4cout.1728+64 = NONLOCAL
_ZSt4cout.1792+64 = NONLOCAL
_ZSt4cout.1856+16 = NONLOCAL
_ZSt4cout.1920+64 = NONLOCAL
_ZSt4cout.1984+64 = NONLOCAL
_ZSt4cout.2048+64 = NONLOCAL
_ZSt4cout.2112+64 = NONLOCAL
callarg(24) = &_ZSt4cout.0+64
callarg(24) = callarg(24) + UNKNOWN
callarg(24) = *callarg(24) + UNKNOWN
CALLUSED(22) = callarg(24)
*callarg(24) = callescape(21)
CALLCLOBBERED(23) = callarg(24)
callescape(21) = callarg(24)
ESCAPED = &_ZSt4cout.0+64
callarg(39) = &STRING
callarg(39) = callarg(39) + UNKNOWN
callarg(39) = *callarg(39) + UNKNOWN
CALLUSED(22) = callarg(39)
*callarg(39) = callescape(21)
CALLCLOBBERED(23) = callarg(39)
callescape(21) = callarg(39)
ESCAPED = &STRING
callarg(40) = &NONLOCAL
callarg(40) = callarg(40) + UNKNOWN
callarg(40) = *callarg(40) + UNKNOWN
CALLUSED(22) = callarg(40)
*callarg(40) = callescape(21)
CALLCLOBBERED(23) = callarg(40)
callescape(21) = callarg(40)
ESCAPED = &NONLOCAL
status.40_5 = status
_6 = status.40_5 + UNKNOWN
_6 = &NONLOCAL
_7 = _6 + UNKNOWN
callescape(45) = NONLOCAL
CALLUSED(46) = callescape(45)
callarg(48) = &_ZSt4cout.0+64
callarg(48) = callarg(48) + UNKNOWN
callarg(48) = *callarg(48) + UNKNOWN
CALLUSED(46) = callarg(48)
*callarg(48) = callescape(45)
CALLCLOBBERED(47) = callarg(48)
callescape(45) = callarg(48)
ESCAPED = &_ZSt4cout.0+64
callarg(49) = _7
callarg(49) = callarg(49) + UNKNOWN
callarg(49) = *callarg(49) + UNKNOWN
CALLUSED(46) = callarg(49)
*callarg(49) = callescape(45)
CALLCLOBBERED(47) = callarg(49)
callescape(45) = callarg(49)
ESCAPED = _7
_49 = NONLOCAL
_49 = callarg(48)
_49 = callarg(49)
callescape(52) = NONLOCAL
CALLUSED(53) = callescape(52)
callarg(55) = _49
callarg(55) = callarg(55) + UNKNOWN
callarg(55) = *callarg(55) + UNKNOWN
CALLUSED(53) = callarg(55)
*callarg(55) = callescape(52)
CALLCLOBBERED(54) = callarg(55)
callescape(52) = callarg(55)
ESCAPED = _49
_55 = NONLOCAL
_55 = callarg(55)
status.41_9 = status
_10 = status.41_9
_11 = _10 + UNKNOWN
_12 = _11 + UNKNOWN
_12 = &NONLOCAL
_13 = _12
_14 = _13 + UNKNOWN
_14 = &NONLOCAL
callescape(63) = NONLOCAL
CALLUSED(64) = callescape(63)
callarg(66) = &_ZSt4cout.0+64
callarg(66) = callarg(66) + UNKNOWN
callarg(66) = *callarg(66) + UNKNOWN
CALLUSED(64) = callarg(66)
*callarg(66) = callescape(63)
CALLCLOBBERED(65) = callarg(66)
callescape(63) = callarg(66)
ESCAPED = &_ZSt4cout.0+64
callarg(67) = &STRING
callarg(67) = callarg(67) + UNKNOWN
callarg(67) = *callarg(67) + UNKNOWN
CALLUSED(64) = callarg(67)
*callarg(67) = callescape(63)
CALLCLOBBERED(65) = callarg(67)
callescape(63) = callarg(67)
ESCAPED = &STRING
callarg(68) = &NONLOCAL
callarg(68) = callarg(68) + UNKNOWN
callarg(68) = *callarg(68) + UNKNOWN
CALLUSED(64) = callarg(68)
*callarg(68) = callescape(63)
CALLCLOBBERED(65) = callarg(68)
callescape(63) = callarg(68)
ESCAPED = &NONLOCAL
status.42_16 = status
_17 = status.42_16 + UNKNOWN
callescape(71) = NONLOCAL
CALLUSED(72) = callescape(71)
callarg(74) = &_ZSt4cout.0+64
callarg(74) = callarg(74) + UNKNOWN
callarg(74) = *callarg(74) + UNKNOWN
CALLUSED(72) = callarg(74)
*callarg(74) = callescape(71)
CALLCLOBBERED(73) = callarg(74)
callescape(71) = callarg(74)
ESCAPED = &_ZSt4cout.0+64
callarg(75) = _17
callarg(75) = callarg(75) + UNKNOWN
callarg(75) = *callarg(75) + UNKNOWN
CALLUSED(72) = callarg(75)
*callarg(75) = callescape(71)
CALLCLOBBERED(73) = callarg(75)
callescape(71) = callarg(75)
ESCAPED = _17
_44 = NONLOCAL
_44 = callarg(74)
_44 = callarg(75)
callescape(77) = NONLOCAL
CALLUSED(78) = callescape(77)
callarg(80) = _44
callarg(80) = callarg(80) + UNKNOWN
callarg(80) = *callarg(80) + UNKNOWN
CALLUSED(78) = callarg(80)
*callarg(80) = callescape(77)
CALLCLOBBERED(79) = callarg(80)
callescape(77) = callarg(80)
ESCAPED = _44
_58 = NONLOCAL
_58 = callarg(80)
callescape(83) = NONLOCAL
CALLUSED(84) = callescape(83)
callarg(86) = &NONLOCAL
callarg(86) = callarg(86) + UNKNOWN
callarg(86) = *callarg(86) + UNKNOWN
CALLUSED(84) = callarg(86)
*callarg(86) = callescape(83)
CALLCLOBBERED(85) = callarg(86)
callescape(83) = callarg(86)
ESCAPED = &NONLOCAL
i_40 = i_20 + UNKNOWN
i_40 = &NONLOCAL
i_20 = &NULL
i_20 = i_40
callescape(90) = NONLOCAL
CALLUSED(91) = callescape(90)
callarg(93) = pid
callarg(93) = callarg(93) + UNKNOWN
callarg(93) = *callarg(93) + UNKNOWN
CALLUSED(91) = callarg(93)
*callarg(93) = callescape(90)
CALLCLOBBERED(92) = callarg(93)
callescape(90) = callarg(93)
ESCAPED = pid
callarg(94) = &NONLOCAL
callarg(94) = callarg(94) + UNKNOWN
callarg(94) = *callarg(94) + UNKNOWN
CALLUSED(91) = callarg(94)
*callarg(94) = callescape(90)
CALLCLOBBERED(92) = callarg(94)
callescape(90) = callarg(94)
ESCAPED = &NONLOCAL
_19 = NONLOCAL
_19 = callarg(93)
_19 = callarg(94)
callescape(96) = NONLOCAL
CALLUSED(97) = callescape(96)
callarg(99) = pid
callarg(99) = callarg(99) + UNKNOWN
callarg(99) = *callarg(99) + UNKNOWN
CALLUSED(97) = callarg(99)
*callarg(99) = callescape(96)
CALLCLOBBERED(98) = callarg(99)
callescape(96) = callarg(99)
ESCAPED = pid
callarg(100) = &status
callarg(100) = callarg(100) + UNKNOWN
callarg(100) = *callarg(100) + UNKNOWN
CALLUSED(97) = callarg(100)
*callarg(100) = callescape(96)
CALLCLOBBERED(98) = callarg(100)
callescape(96) = callarg(100)
ESCAPED = &status
callarg(101) = &NULL
callarg(101) = callarg(101) + UNKNOWN
callarg(101) = *callarg(101) + UNKNOWN
CALLUSED(97) = callarg(101)
*callarg(101) = callescape(96)
CALLCLOBBERED(98) = callarg(101)
callescape(96) = callarg(101)
ESCAPED = &NULL
callescape(103) = NONLOCAL
CALLUSED(104) = callescape(103)
_ZSt4cerr.0+64 = NONLOCAL
_ZSt4cerr.64+64 = NONLOCAL
_ZSt4cerr.128+224 = NONLOCAL
_ZSt4cerr.384+64 = NONLOCAL
_ZSt4cerr.448+64 = NONLOCAL
_ZSt4cerr.512+1120 = NONLOCAL
_ZSt4cerr.1664+64 = NONLOCAL
_ZSt4cerr.1728+64 = NONLOCAL
_ZSt4cerr.1792+64 = NONLOCAL
_ZSt4cerr.1856+16 = NONLOCAL
_ZSt4cerr.1920+64 = NONLOCAL
_ZSt4cerr.1984+64 = NONLOCAL
_ZSt4cerr.2048+64 = NONLOCAL
_ZSt4cerr.2112+64 = NONLOCAL
callarg(106) = &_ZSt4cerr.0+64
callarg(106) = callarg(106) + UNKNOWN
callarg(106) = *callarg(106) + UNKNOWN
CALLUSED(104) = callarg(106)
*callarg(106) = callescape(103)
CALLCLOBBERED(105) = callarg(106)
callescape(103) = callarg(106)
ESCAPED = &_ZSt4cerr.0+64
callarg(121) = &STRING
callarg(121) = callarg(121) + UNKNOWN
callarg(121) = *callarg(121) + UNKNOWN
CALLUSED(104) = callarg(121)
*callarg(121) = callescape(103)
CALLCLOBBERED(105) = callarg(121)
callescape(103) = callarg(121)
ESCAPED = &STRING
callescape(122) = NONLOCAL
CALLUSED(123) = callescape(122)
callarg(125) = &_ZSt4cerr.0+64
callarg(125) = callarg(125) + UNKNOWN
callarg(125) = *callarg(125) + UNKNOWN
CALLUSED(123) = callarg(125)
*callarg(125) = callescape(122)
CALLCLOBBERED(124) = callarg(125)
callescape(122) = callarg(125)
ESCAPED = &_ZSt4cerr.0+64
callarg(126) = &STRING
callarg(126) = callarg(126) + UNKNOWN
callarg(126) = *callarg(126) + UNKNOWN
CALLUSED(123) = callarg(126)
*callarg(126) = callescape(122)
CALLCLOBBERED(124) = callarg(126)
callescape(122) = callarg(126)
ESCAPED = &STRING
callescape(128) = NONLOCAL
CALLUSED(129) = callescape(128)
callarg(131) = &NONLOCAL
callarg(131) = callarg(131) + UNKNOWN
callarg(131) = *callarg(131) + UNKNOWN
CALLUSED(129) = callarg(131)
*callarg(131) = callescape(128)
CALLCLOBBERED(130) = callarg(131)
callescape(128) = callarg(131)
ESCAPED = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL STRING ESCAPED NONLOCAL status _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
status = { NULL ESCAPED NONLOCAL status } same as status.39_2
_ZSt4cout.0+64 = { NULL STRING ESCAPED NONLOCAL status _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 }
_ZSt4cout.64+64 = { ESCAPED NONLOCAL }
_ZSt4cout.128+224 = { ESCAPED NONLOCAL }
_ZSt4cout.384+64 = { ESCAPED NONLOCAL }
_ZSt4cout.448+64 = { ESCAPED NONLOCAL }
_ZSt4cout.512+1120 = { ESCAPED NONLOCAL }
_ZSt4cout.1664+64 = { ESCAPED NONLOCAL }
_ZSt4cout.1728+64 = { ESCAPED NONLOCAL }
_ZSt4cout.1792+64 = { ESCAPED NONLOCAL }
_ZSt4cout.1856+16 = { ESCAPED NONLOCAL }
_ZSt4cout.1920+64 = { ESCAPED NONLOCAL }
_ZSt4cout.1984+64 = { ESCAPED NONLOCAL }
_ZSt4cout.2048+64 = { ESCAPED NONLOCAL }
_ZSt4cout.2112+64 = { ESCAPED NONLOCAL }
_ZSt4cerr.0+64 = { STRING ESCAPED NONLOCAL _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 }
_ZSt4cerr.64+64 = { ESCAPED NONLOCAL }
_ZSt4cerr.128+224 = { ESCAPED NONLOCAL }
_ZSt4cerr.384+64 = { ESCAPED NONLOCAL }
_ZSt4cerr.448+64 = { ESCAPED NONLOCAL }
_ZSt4cerr.512+1120 = { ESCAPED NONLOCAL }
_ZSt4cerr.1664+64 = { ESCAPED NONLOCAL }
_ZSt4cerr.1728+64 = { ESCAPED NONLOCAL }
_ZSt4cerr.1792+64 = { ESCAPED NONLOCAL }
_ZSt4cerr.1856+16 = { ESCAPED NONLOCAL }
_ZSt4cerr.1920+64 = { ESCAPED NONLOCAL }
_ZSt4cerr.1984+64 = { ESCAPED NONLOCAL }
_ZSt4cerr.2048+64 = { ESCAPED NONLOCAL }
_ZSt4cerr.2112+64 = { ESCAPED NONLOCAL }
pid = { NONLOCAL }
waitpid = { }
callescape(10) = { NULL ESCAPED NONLOCAL status }
CALLUSED(11) = { NULL ESCAPED NONLOCAL status } same as callescape(10)
CALLCLOBBERED(12) = { NULL ESCAPED NONLOCAL status }
callarg(13) = { ESCAPED NONLOCAL }
callarg(14) = { NULL ESCAPED NONLOCAL status }
callarg(16) = { ESCAPED NONLOCAL }
_37 = { NULL ESCAPED NONLOCAL status } same as callescape(10)
status.39_2 = { NULL ESCAPED NONLOCAL status }
_3 = { NULL ESCAPED NONLOCAL status }
_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l = { }
callescape(21) = { NULL STRING ESCAPED NONLOCAL status _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 }
CALLUSED(22) = { NULL STRING ESCAPED NONLOCAL status _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 } same as callescape(21)
CALLCLOBBERED(23) = { NULL STRING ESCAPED NONLOCAL status _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 }
callarg(24) = { NULL STRING ESCAPED NONLOCAL status _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 }
callarg(39) = { STRING }
callarg(40) = { ESCAPED NONLOCAL }
status.40_5 = { NULL ESCAPED NONLOCAL status } same as status.39_2
_6 = { NULL ESCAPED NONLOCAL status }
_7 = { NULL ESCAPED NONLOCAL status }
_ZNSolsEi = { }
callescape(45) = { NULL STRING ESCAPED NONLOCAL status _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 }
CALLUSED(46) = { NULL STRING ESCAPED NONLOCAL status _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 } same as callescape(45)
CALLCLOBBERED(47) = { NULL STRING ESCAPED NONLOCAL status _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 }
callarg(48) = { NULL STRING ESCAPED NONLOCAL status _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 }
callarg(49) = { NULL ESCAPED NONLOCAL status }
_49 = { NULL STRING ESCAPED NONLOCAL status _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 } same as callescape(45)
_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_ = { }
callescape(52) = { NULL STRING ESCAPED NONLOCAL status _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 }
CALLUSED(53) = { NULL STRING ESCAPED NONLOCAL status _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 } same as callescape(52)
CALLCLOBBERED(54) = { NULL STRING ESCAPED NONLOCAL status _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 } same as callescape(52)
callarg(55) = { NULL STRING ESCAPED NONLOCAL status _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 } same as callescape(52)
_55 = { NULL STRING ESCAPED NONLOCAL status _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 } same as callescape(52)
status.41_9 = { NULL ESCAPED NONLOCAL status } same as status.39_2
_10 = { NULL ESCAPED NONLOCAL status } same as status.39_2
_11 = { NULL ESCAPED NONLOCAL status }
_12 = { NULL ESCAPED NONLOCAL status }
_13 = { NULL ESCAPED NONLOCAL status } same as _12
_14 = { NULL ESCAPED NONLOCAL status }
callescape(63) = { NULL STRING ESCAPED NONLOCAL status _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 }
CALLUSED(64) = { NULL STRING ESCAPED NONLOCAL status _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 } same as callescape(63)
CALLCLOBBERED(65) = { NULL STRING ESCAPED NONLOCAL status _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 }
callarg(66) = { NULL STRING ESCAPED NONLOCAL status _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 }
callarg(67) = { STRING }
callarg(68) = { ESCAPED NONLOCAL }
status.42_16 = { NULL ESCAPED NONLOCAL status } same as status.39_2
_17 = { NULL ESCAPED NONLOCAL status }
callescape(71) = { NULL STRING ESCAPED NONLOCAL status _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 }
CALLUSED(72) = { NULL STRING ESCAPED NONLOCAL status _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 } same as callescape(71)
CALLCLOBBERED(73) = { NULL STRING ESCAPED NONLOCAL status _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 }
callarg(74) = { NULL STRING ESCAPED NONLOCAL status _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 }
callarg(75) = { NULL ESCAPED NONLOCAL status }
_44 = { NULL STRING ESCAPED NONLOCAL status _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 } same as callescape(71)
callescape(77) = { NULL STRING ESCAPED NONLOCAL status _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 }
CALLUSED(78) = { NULL STRING ESCAPED NONLOCAL status _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 } same as callescape(77)
CALLCLOBBERED(79) = { NULL STRING ESCAPED NONLOCAL status _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 } same as callescape(77)
callarg(80) = { NULL STRING ESCAPED NONLOCAL status _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 } same as callescape(77)
_58 = { NULL STRING ESCAPED NONLOCAL status _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 } same as callescape(77)
sleep = { }
callescape(83) = { ESCAPED NONLOCAL }
CALLUSED(84) = { ESCAPED NONLOCAL } same as callescape(83)
CALLCLOBBERED(85) = { ESCAPED NONLOCAL } same as callarg(86)
callarg(86) = { ESCAPED NONLOCAL }
i_40 = { NULL NONLOCAL }
i_20 = { NULL NONLOCAL }
kill = { }
callescape(90) = { ESCAPED NONLOCAL }
CALLUSED(91) = { ESCAPED NONLOCAL } same as callescape(90)
CALLCLOBBERED(92) = { ESCAPED NONLOCAL }
callarg(93) = { ESCAPED NONLOCAL }
callarg(94) = { ESCAPED NONLOCAL }
_19 = { ESCAPED NONLOCAL } same as callescape(90)
callescape(96) = { NULL ESCAPED NONLOCAL status }
CALLUSED(97) = { NULL ESCAPED NONLOCAL status } same as callescape(96)
CALLCLOBBERED(98) = { NULL ESCAPED NONLOCAL status }
callarg(99) = { ESCAPED NONLOCAL }
callarg(100) = { NULL ESCAPED NONLOCAL status }
callarg(101) = { NULL }
_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc = { }
callescape(103) = { STRING ESCAPED NONLOCAL _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 }
CALLUSED(104) = { STRING ESCAPED NONLOCAL _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 } same as callescape(103)
CALLCLOBBERED(105) = { STRING ESCAPED NONLOCAL _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 }
callarg(106) = { STRING ESCAPED NONLOCAL _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 }
callarg(121) = { STRING }
callescape(122) = { STRING ESCAPED NONLOCAL _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 }
CALLUSED(123) = { STRING ESCAPED NONLOCAL _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 } same as callescape(122)
CALLCLOBBERED(124) = { STRING ESCAPED NONLOCAL _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 }
callarg(125) = { STRING ESCAPED NONLOCAL _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 }
callarg(126) = { STRING }
exit = { }
callescape(128) = { ESCAPED NONLOCAL }
CALLUSED(129) = { ESCAPED NONLOCAL } same as callescape(128)
CALLCLOBBERED(130) = { ESCAPED NONLOCAL } same as callarg(131)
callarg(131) = { ESCAPED NONLOCAL }


Alias information for monitor_child(int)

Aliased symbols

status, UID D.89301, int, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.47220 D.47221 D.89301 } (nonlocal, escaped, interposable)

Flow-insensitive points-to information

_44, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.47220 D.89301 } (nonlocal, escaped, interposable)
_49, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.47220 D.89301 } (nonlocal, escaped, interposable)
_55, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.47220 D.89301 } (nonlocal, escaped, interposable)
_58, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.47220 D.89301 } (nonlocal, escaped, interposable)

void monitor_child (pid_t pid)
{
  struct basic_ostream & D.98352;
  struct basic_ostream & D.98346;
  int i;
  const int timeout;
  int status;
  int status.39_2;
  int _3;
  int status.40_5;
  int _6;
  int _7;
  int status.41_9;
  unsigned char _10;
  unsigned char _11;
  unsigned char _12;
  signed char _13;
  signed char _14;
  int status.42_16;
  int _17;
  int _19;
  int _37;
  struct basic_ostream & _44;
  struct basic_ostream & _49;
  struct __ostream_type & _55;
  struct __ostream_type & _58;

  <bb 2> :
  goto <bb 16>; [INV]

  <bb 3> :
  gimple_call <waitpid, _37, pid_28(D), &status, 1>

  <bb 4> :
  gimple_cond <eq_expr, pid_28(D), _37, NULL, NULL>
    goto <bb 5>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 5> :
  gimple_assign <var_decl, status.39_2, status, NULL, NULL>
  gimple_assign <bit_and_expr, _3, status.39_2, 127, NULL>
  gimple_cond <eq_expr, _3, 0, NULL, NULL>
    goto <bb 6>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 6> :
  gimple_call <__ostream_insert, NULL, &cout, "[INFO] Script exited with status ", 33>

  <bb 7> :
  gimple_assign <var_decl, status.40_5, status, NULL, NULL>
  gimple_assign <rshift_expr, _6, status.40_5, 8, NULL>
  gimple_assign <bit_and_expr, _7, _6, 255, NULL>
  gimple_call <operator<<, _49, &cout, _7>

  <bb 8> :
  gimple_call <endl, _55, _49>
  goto <bb 13>; [100.00%]

  <bb 9> :
  gimple_assign <var_decl, status.41_9, status, NULL, NULL>
  gimple_assign <nop_expr, _10, status.41_9, NULL, NULL>
  gimple_assign <bit_and_expr, _11, _10, 127, NULL>
  gimple_assign <plus_expr, _12, _11, 1, NULL>
  gimple_assign <nop_expr, _13, _12, NULL, NULL>
  gimple_assign <rshift_expr, _14, _13, 1, NULL>
  gimple_cond <gt_expr, _14, 0, NULL, NULL>
    goto <bb 10>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 10> :
  gimple_call <__ostream_insert, NULL, &cout, "[ERROR] Script terminated by signal ", 36>

  <bb 11> :
  gimple_assign <var_decl, status.42_16, status, NULL, NULL>
  gimple_assign <bit_and_expr, _17, status.42_16, 127, NULL>
  gimple_call <operator<<, _44, &cout, _17>

  <bb 12> :
  gimple_call <endl, _58, _44>

  <bb 13> :
  // predicted unlikely by early return (on trees) predictor.
  gimple_assign <constructor, status, {CLOBBER(eol)}, NULL, NULL>
  goto <bb 23>; [INV]

  <bb 14> :
  gimple_call <sleep, NULL, 1>

  <bb 15> :
  gimple_assign <plus_expr, i_40, i_20, 1, NULL>

  <bb 16> :
  # gimple_phi <i_20, 0(2), i_40(15)>
  gimple_cond <le_expr, i_20, 399, NULL, NULL>
    goto <bb 3>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 17> :
  gimple_call <kill, _19, pid_28(D), 9>
  gimple_cond <eq_expr, _19, 0, NULL, NULL>
    goto <bb 18>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 18> :
  gimple_call <waitpid, NULL, pid_28(D), &status, 0>

  <bb 19> :
  gimple_call <operator<<, NULL, &cerr, "[INFO] Child process killed due to timeout.\n">
  goto <bb 22>; [INV]

  <bb 20> :
  gimple_call <operator<<, NULL, &cerr, "[ERROR] Failed to kill child process.\n">

  <bb 21> :
  gimple_call <exit, NULL, 4>

  <bb 22> :
  gimple_assign <constructor, status, {CLOBBER(eol)}, NULL, NULL>

  <bb 23> :
  gimple_return <NULL>

  <bb 24> :
gimple_label <<L17>>
  gimple_assign <constructor, status, {CLOBBER(eol)}, NULL, NULL>
  gimple_resx <1>

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEmPKc, funcdef_no=4199, decl_uid=28704, cgraph_uid=1678, symbol_order=2254)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__pos = &NONLOCAL
__s = &NONLOCAL
CALLUSED(11) = CALLUSED(11) + UNKNOWN
CALLUSED(11) = __s
callescape(14) = NONLOCAL
CALLUSED(15) = callescape(14)
callarg(17) = this
callarg(17) = callarg(17) + UNKNOWN
callarg(17) = *callarg(17) + UNKNOWN
CALLUSED(15) = callarg(17)
*callarg(17) = callescape(14)
CALLCLOBBERED(16) = callarg(17)
callescape(14) = callarg(17)
ESCAPED = this
callarg(18) = __pos
callarg(18) = callarg(18) + UNKNOWN
callarg(18) = *callarg(18) + UNKNOWN
CALLUSED(15) = callarg(18)
*callarg(18) = callescape(14)
CALLCLOBBERED(16) = callarg(18)
callescape(14) = callarg(18)
ESCAPED = __pos
callarg(19) = &NULL
callarg(19) = callarg(19) + UNKNOWN
callarg(19) = *callarg(19) + UNKNOWN
CALLUSED(15) = callarg(19)
*callarg(19) = callescape(14)
CALLCLOBBERED(16) = callarg(19)
callescape(14) = callarg(19)
ESCAPED = &NULL
callarg(20) = __s
callarg(20) = callarg(20) + UNKNOWN
callarg(20) = *callarg(20) + UNKNOWN
CALLUSED(15) = callarg(20)
*callarg(20) = callescape(14)
CALLCLOBBERED(16) = callarg(20)
callescape(14) = callarg(20)
ESCAPED = __s
callarg(21) = _4
callarg(21) = callarg(21) + UNKNOWN
callarg(21) = *callarg(21) + UNKNOWN
CALLUSED(15) = callarg(21)
*callarg(21) = callescape(14)
CALLCLOBBERED(16) = callarg(21)
callescape(14) = callarg(21)
ESCAPED = _4
_9 = NONLOCAL
_9 = callarg(17)
_9 = callarg(18)
_9 = callarg(19)
_9 = callarg(20)
_9 = callarg(21)

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__pos = { NONLOCAL } same as this
__s = { NONLOCAL } same as this
CALLUSED(11) = { NONLOCAL }
CALLCLOBBERED(12) = { }
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEmmPKcm = { }
callescape(14) = { NULL ESCAPED NONLOCAL }
CALLUSED(15) = { NULL ESCAPED NONLOCAL } same as callescape(14)
CALLCLOBBERED(16) = { NULL ESCAPED NONLOCAL }
callarg(17) = { ESCAPED NONLOCAL }
callarg(18) = { ESCAPED NONLOCAL }
callarg(19) = { NULL }
callarg(20) = { ESCAPED NONLOCAL }
callarg(21) = { }
_4 = { }
_9 = { NULL ESCAPED NONLOCAL } same as callescape(14)
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEmPKc = { }


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

__s_3(D), points-to non-local, points-to NULL, points-to vars: { }
this_6(D), points-to non-local, points-to vars: { }
_9, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

struct basic_string & std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert (struct basic_string * const this, size_type __pos, const char * __s)
{
  size_t D.98358;
  long unsigned int _4;
  struct basic_string & _9;

  <bb 2> :
  gimple_call <__builtin_strlen, _4, __s_3(D)>
  gimple_call <replace, _9, this_6(D), __pos_7(D), 0, __s_3(D), _4>
  gimple_return <_9>

}



;; Function std::__new_allocator<char>::__new_allocator (_ZNSt15__new_allocatorIcEC2Ev, funcdef_no=4103, decl_uid=12259, cgraph_uid=1582, symbol_order=2158)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &PARM_NOALIAS(9)
PARM_NOALIAS(9) = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
PARM_NOALIAS(9) = { NONLOCAL }
this = { PARM_NOALIAS(9) }


Alias information for std::__new_allocator<char>::__new_allocator()

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information


void std::__new_allocator<char>::__new_allocator (struct __new_allocator * const this)
{
  <bb 2> :
  gimple_return <NULL>

}



;; Function std::allocator<char>::allocator (_ZNSaIcEC2Ev, funcdef_no=3804, decl_uid=12332, cgraph_uid=1283, symbol_order=1846)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &PARM_NOALIAS(9)
PARM_NOALIAS(9) = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
PARM_NOALIAS(9) = { NONLOCAL }
this = { PARM_NOALIAS(9) }


Alias information for std::allocator<char>::allocator()

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to vars: { D.98363 } (nonlocal, restrict)

void std::allocator<char>::allocator (struct allocator * const this)
{
  <bb 2> :
  gimple_return <NULL>

}



;; Function std::__new_allocator<char>::~__new_allocator (_ZNSt15__new_allocatorIcED2Ev, funcdef_no=4106, decl_uid=12264, cgraph_uid=1585, symbol_order=2161)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }


Alias information for std::__new_allocator<char>::~__new_allocator()

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information


void std::__new_allocator<char>::~__new_allocator (struct __new_allocator * const this)
{
  <bb 2> :
  gimple_return <NULL>

}



;; Function std::allocator<char>::~allocator (_ZNSaIcED2Ev, funcdef_no=3807, decl_uid=12337, cgraph_uid=1286, symbol_order=1849)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }


Alias information for std::allocator<char>::~allocator()

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to vars: { }

void std::allocator<char>::~allocator (struct allocator * const this)
{
  <bb 2> :
  gimple_return <NULL>

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::~_Alloc_hider (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderD2Ev, funcdef_no=3811, decl_uid=29563, cgraph_uid=1289, symbol_order=1852)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::~_Alloc_hider()

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to vars: { }

void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::~_Alloc_hider (struct _Alloc_hider * const this)
{
  <bb 2> :
  gimple_assign <constructor, *this_2(D), {CLOBBER}, NULL, NULL>
  gimple_return <NULL>

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)::_Guard::_Guard (_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardC2EPS4_, funcdef_no=4137, decl_uid=93732, cgraph_uid=1615, symbol_order=2191)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &PARM_NOALIAS(9)
PARM_NOALIAS(9) = &NONLOCAL
__s = &NONLOCAL
*this = __s

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
PARM_NOALIAS(9) = { NONLOCAL }
this = { PARM_NOALIAS(9) }
__s = { NONLOCAL }


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)::_Guard::_Guard(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to vars: { D.98370 } (nonlocal, restrict)
__s_4(D), points-to non-local, points-to NULL, points-to vars: { }

void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)::_Guard::_Guard (struct _Guard * const this, struct basic_string * __s)
{
  <bb 2> :
  gimple_assign <constructor, *this_2(D), {CLOBBER}, NULL, NULL>
  gimple_assign <ssa_name, *this_2(D)._M_guarded, __s_4(D), NULL, NULL>
  gimple_return <NULL>

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)::_Guard::_Guard (_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tagEN6_GuardC2EPS4_, funcdef_no=4234, decl_uid=94928, cgraph_uid=1712, symbol_order=2294)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &PARM_NOALIAS(9)
PARM_NOALIAS(9) = &NONLOCAL
__s = &NONLOCAL
*this = __s

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
PARM_NOALIAS(9) = { NONLOCAL }
this = { PARM_NOALIAS(9) }
__s = { NONLOCAL }


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)::_Guard::_Guard(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to vars: { D.98372 } (nonlocal, restrict)
__s_4(D), points-to non-local, points-to NULL, points-to vars: { }

void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)::_Guard::_Guard (struct _Guard * const this, struct basic_string * __s)
{
  <bb 2> :
  gimple_assign <constructor, *this_2(D), {CLOBBER}, NULL, NULL>
  gimple_assign <ssa_name, *this_2(D)._M_guarded, __s_4(D), NULL, NULL>
  gimple_return <NULL>

}



;; Function std::basic_ios<char, std::char_traits<char> >::~basic_ios (_ZNSt9basic_iosIcSt11char_traitsIcEED2Ev, funcdef_no=4318, decl_uid=43792, cgraph_uid=1797, symbol_order=2381)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_ZTVSt9basic_iosIcSt11char_traitsIcEE = NONLOCAL
derefaddrtmp(10) = &_ZTVSt9basic_iosIcSt11char_traitsIcEE
*this = derefaddrtmp(10)
_2 = this + UNKNOWN
callescape(13) = NONLOCAL
CALLUSED(14) = callescape(13)
callarg(16) = _2
callarg(16) = callarg(16) + UNKNOWN
callarg(16) = *callarg(16) + UNKNOWN
CALLUSED(14) = callarg(16)
*callarg(16) = callescape(13)
CALLCLOBBERED(15) = callarg(16)
callescape(13) = callarg(16)
ESCAPED = _2

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL _ZTVSt9basic_iosIcSt11char_traitsIcEE }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
_ZTVSt9basic_iosIcSt11char_traitsIcEE = { ESCAPED NONLOCAL }
this = { NONLOCAL }
derefaddrtmp(10) = { _ZTVSt9basic_iosIcSt11char_traitsIcEE }
_2 = { NONLOCAL }
_ZNSt8ios_baseD2Ev = { }
callescape(13) = { ESCAPED NONLOCAL }
CALLUSED(14) = { ESCAPED NONLOCAL } same as callescape(13)
CALLCLOBBERED(15) = { ESCAPED NONLOCAL } same as callarg(16)
callarg(16) = { ESCAPED NONLOCAL }


Alias information for std::basic_ios<char, std::char_traits<char> >::~basic_ios()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.43805 } (nonlocal, escaped, interposable)

Flow-insensitive points-to information

_2, points-to non-local, points-to NULL, points-to vars: { }
this_4(D), points-to non-local, points-to vars: { }

void std::basic_ios<char, std::char_traits<char> >::~basic_ios (struct basic_ios * const this)
{
  struct ios_base * _2;

  <bb 2> :
  gimple_assign <addr_expr, this_4(D)->D.43795._vptr.ios_base, &MEM <int (*__vtbl_ptr_type) ()[4]> [(void *)&_ZTVSt9basic_iosIcSt11char_traitsIcEE + 16B], NULL, NULL>
  gimple_assign <addr_expr, _2, &this_4(D)->D.43795, NULL, NULL>
  gimple_call <__dt_base , NULL, _2>
  gimple_assign <constructor, *this_4(D), {CLOBBER}, NULL, NULL>
  gimple_return <NULL>

}



;; Function std::__detail::_Quoted_string<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char>::_Quoted_string (_ZNSt8__detail14_Quoted_stringIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEC2ES8_cc, funcdef_no=4335, decl_uid=93540, cgraph_uid=1814, symbol_order=2398)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &PARM_NOALIAS.0+64
PARM_NOALIAS.0+64 = &NONLOCAL
PARM_NOALIAS.64+16 = &NONLOCAL
__str = &NONLOCAL
__del = &NONLOCAL
__esc = &NONLOCAL
*this = __str
*this + 64 = __del
*this + 72 = __esc

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
PARM_NOALIAS.0+64 = { NONLOCAL }
PARM_NOALIAS.64+16 = { NONLOCAL }
this = { PARM_NOALIAS.0+64 }
__str = { NONLOCAL }
__del = { NONLOCAL } same as __str
__esc = { NONLOCAL } same as __str


Alias information for std::__detail::_Quoted_string<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char>::_Quoted_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char, char)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to vars: { D.98375 } (nonlocal, restrict)
__str_4(D), points-to non-local, points-to vars: { }

void std::__detail::_Quoted_string<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char>::_Quoted_string (struct _Quoted_string * const this, const struct basic_string & __str, char __del, char __esc)
{
  <bb 2> :
  gimple_assign <constructor, MEM[(struct __as_base  &)this_2(D)], {CLOBBER}, NULL, NULL>
  gimple_assign <ssa_name, *this_2(D)._M_string, __str_4(D), NULL, NULL>
  gimple_assign <ssa_name, *this_2(D)._M_delim, __del_6(D), NULL, NULL>
  gimple_assign <ssa_name, *this_2(D)._M_escape, __esc_8(D), NULL, NULL>
  gimple_return <NULL>

}



;; Function std::quoted<char, std::char_traits<char>, std::allocator<char> > (_ZSt6quotedIcSt11char_traitsIcESaIcEEDaRKNSt7__cxx1112basic_stringIT_T0_T1_EES5_S5_, funcdef_no=4096, decl_uid=93486, cgraph_uid=1574, symbol_order=2150)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__string = &NONLOCAL
__delim = &NONLOCAL
__escape = &NONLOCAL
SR.112_5 = __string
SR.113_12 = __delim
SR.114_13 = __escape
D.97669.0+64 = SR.112_5
D.97669.64+16 = SR.113_12
D.97669.64+16 = SR.114_13

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__string = { NONLOCAL }
__delim = { NONLOCAL } same as __string
__escape = { NONLOCAL } same as __string
D.93558.0+64 = { }
D.93558.64+16 = { }
SR.112_5 = { NONLOCAL } same as __string
SR.113_12 = { NONLOCAL } same as __string
SR.114_13 = { NONLOCAL } same as __string
D.97669.0+64 = { NONLOCAL } same as __string
D.97669.64+16 = { NONLOCAL } same as __string
_ZSt6quotedIcSt11char_traitsIcESaIcEEDaRKNSt7__cxx1112basic_stringIT_T0_T1_EES5_S5_ = { }


Alias information for std::quoted<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char, char)auto

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__string_2(D), points-to non-local, points-to vars: { }
SR.112_5, points-to non-local, points-to NULL, points-to vars: { }

struct _Quoted_string std::quoted<char, std::char_traits<char>, std::allocator<char> > (const struct basic_string & __string, char __delim, char __escape)
{
  char SR.114;
  char SR.113;
  const struct basic_string & SR.112;
  struct _Quoted_string D.93558;
  struct _Quoted_string D.97669;

  <bb 2> :
  gimple_assign <constructor, MEM[(struct __as_base  &)&D.93558], {CLOBBER}, NULL, NULL>
  gimple_assign <ssa_name, SR.112_5, __string_2(D), NULL, NULL>
  gimple_assign <ssa_name, SR.113_12, __delim_3(D), NULL, NULL>
  gimple_assign <ssa_name, SR.114_13, __escape_4(D), NULL, NULL>
  gimple_assign <ssa_name, D.97669._M_string, SR.112_5, NULL, NULL>
  gimple_assign <ssa_name, D.97669._M_delim, SR.113_12, NULL, NULL>
  gimple_assign <ssa_name, D.97669._M_escape, SR.114_13, NULL, NULL>
  gimple_return <D.97669>

}



;; Function std::__array_traits<char, 128ul>::_S_ref (_ZNSt14__array_traitsIcLm128EE6_S_refERA128_Kcm, funcdef_no=4338, decl_uid=89180, cgraph_uid=1817, symbol_order=2401)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__t = &NONLOCAL
__n = &NONLOCAL
_3 = __t + UNKNOWN

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__t = { NONLOCAL }
__n = { NONLOCAL } same as __t
_3 = { NONLOCAL }
_ZNSt14__array_traitsIcLm128EE6_S_refERA128_Kcm = { }


Alias information for std::__array_traits<char, 128ul>::_S_ref(char const (&) [128], unsigned long)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__t_1(D), points-to non-local, points-to vars: { }
_3, points-to non-local, points-to NULL, points-to vars: { }

char & std::__array_traits<char, 128ul>::_S_ref (const char[128] & __t, size_t __n)
{
  char & _3;

  <bb 2> :
  gimple_assign <addr_expr, _3, &(*__t_1(D))[__n_2(D)], NULL, NULL>
  gimple_return <_3>

}



;; Function std::array<char, 128ul>::operator[] (_ZNSt5arrayIcLm128EEixEm, funcdef_no=4097, decl_uid=89223, cgraph_uid=1576, symbol_order=2152)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__n = &NONLOCAL
_5 = this + UNKNOWN

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__n = { NONLOCAL } same as this
_5 = { NONLOCAL }
_ZNSt5arrayIcLm128EEixEm = { }


Alias information for std::array<char, 128ul>::operator[](unsigned long)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to vars: { }
_5, points-to non-local, points-to NULL, points-to vars: { }

__attribute__((nodiscard))
value_type & std::array<char, 128ul>::operator[] (struct array * const this, size_type __n)
{
  char & D.98388;
  char & _5;

  <bb 2> :
  gimple_assign <addr_expr, _5, &MEM[(const char[128] &)this_2(D)][__n_4(D)], NULL, NULL>
  gimple_return <_5>

}



;; Function execute_script (_Z14execute_scriptRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE, funcdef_no=3696, decl_uid=88796, cgraph_uid=1178, symbol_order=1741)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
scriptPath = &NONLOCAL
callescape(10) = NONLOCAL
CALLUSED(11) = callescape(10)
callarg(13) = &stdout_pipe
callarg(13) = callarg(13) + UNKNOWN
callarg(13) = *callarg(13) + UNKNOWN
CALLUSED(11) = callarg(13)
*callarg(13) = callescape(10)
CALLCLOBBERED(12) = callarg(13)
callescape(10) = callarg(13)
ESCAPED = &stdout_pipe
callescape(15) = NONLOCAL
CALLUSED(16) = callescape(15)
callarg(18) = &stderr_pipe
callarg(18) = callarg(18) + UNKNOWN
callarg(18) = *callarg(18) + UNKNOWN
CALLUSED(16) = callarg(18)
*callarg(18) = callescape(15)
CALLCLOBBERED(17) = callarg(18)
callescape(15) = callarg(18)
ESCAPED = &stderr_pipe
callescape(21) = NONLOCAL
CALLUSED(22) = callescape(21)
pid_52 = NONLOCAL
_1 = stdout_pipe
callescape(27) = NONLOCAL
CALLUSED(28) = callescape(27)
callarg(30) = _1
callarg(30) = callarg(30) + UNKNOWN
callarg(30) = *callarg(30) + UNKNOWN
CALLUSED(28) = callarg(30)
*callarg(30) = callescape(27)
CALLCLOBBERED(29) = callarg(30)
callescape(27) = callarg(30)
ESCAPED = _1
_2 = stderr_pipe
callescape(32) = NONLOCAL
CALLUSED(33) = callescape(32)
callarg(35) = _2
callarg(35) = callarg(35) + UNKNOWN
callarg(35) = *callarg(35) + UNKNOWN
CALLUSED(33) = callarg(35)
*callarg(35) = callescape(32)
CALLCLOBBERED(34) = callarg(35)
callescape(32) = callarg(35)
ESCAPED = _2
_3 = stdout_pipe
callescape(38) = NONLOCAL
CALLUSED(39) = callescape(38)
callarg(41) = _3
callarg(41) = callarg(41) + UNKNOWN
callarg(41) = *callarg(41) + UNKNOWN
CALLUSED(39) = callarg(41)
*callarg(41) = callescape(38)
CALLCLOBBERED(40) = callarg(41)
callescape(38) = callarg(41)
ESCAPED = _3
callarg(42) = &NONLOCAL
callarg(42) = callarg(42) + UNKNOWN
callarg(42) = *callarg(42) + UNKNOWN
CALLUSED(39) = callarg(42)
*callarg(42) = callescape(38)
CALLCLOBBERED(40) = callarg(42)
callescape(38) = callarg(42)
ESCAPED = &NONLOCAL
_4 = stderr_pipe
callescape(44) = NONLOCAL
CALLUSED(45) = callescape(44)
callarg(47) = _4
callarg(47) = callarg(47) + UNKNOWN
callarg(47) = *callarg(47) + UNKNOWN
CALLUSED(45) = callarg(47)
*callarg(47) = callescape(44)
CALLCLOBBERED(46) = callarg(47)
callescape(44) = callarg(47)
ESCAPED = _4
callarg(48) = &NONLOCAL
callarg(48) = callarg(48) + UNKNOWN
callarg(48) = *callarg(48) + UNKNOWN
CALLUSED(45) = callarg(48)
*callarg(48) = callescape(44)
CALLCLOBBERED(46) = callarg(48)
callescape(44) = callarg(48)
ESCAPED = &NONLOCAL
_91 = *scriptPath
callescape(51) = NONLOCAL
CALLUSED(52) = callescape(51)
callarg(54) = &STRING
callarg(54) = callarg(54) + UNKNOWN
callarg(54) = *callarg(54) + UNKNOWN
CALLUSED(52) = callarg(54)
*callarg(54) = callescape(51)
CALLCLOBBERED(53) = callarg(54)
callescape(51) = callarg(54)
ESCAPED = &STRING
callarg(55) = &STRING
callarg(55) = callarg(55) + UNKNOWN
callarg(55) = *callarg(55) + UNKNOWN
CALLUSED(52) = callarg(55)
*callarg(55) = callescape(51)
CALLCLOBBERED(53) = callarg(55)
callescape(51) = callarg(55)
ESCAPED = &STRING
callarg(56) = _91
callarg(56) = callarg(56) + UNKNOWN
callarg(56) = *callarg(56) + UNKNOWN
CALLUSED(52) = callarg(56)
*callarg(56) = callescape(51)
CALLCLOBBERED(53) = callarg(56)
callescape(51) = callarg(56)
ESCAPED = _91
callarg(57) = &NULL
callarg(57) = callarg(57) + UNKNOWN
callarg(57) = *callarg(57) + UNKNOWN
CALLUSED(52) = callarg(57)
*callarg(57) = callescape(51)
CALLCLOBBERED(53) = callarg(57)
callescape(51) = callarg(57)
ESCAPED = &NULL
callescape(59) = NONLOCAL
CALLUSED(60) = callescape(59)
callarg(62) = &NONLOCAL
callarg(62) = callarg(62) + UNKNOWN
callarg(62) = *callarg(62) + UNKNOWN
CALLUSED(60) = callarg(62)
*callarg(62) = callescape(59)
CALLCLOBBERED(61) = callarg(62)
callescape(59) = callarg(62)
ESCAPED = &NONLOCAL
_6 = stdout_pipe
callescape(64) = NONLOCAL
CALLUSED(65) = callescape(64)
callarg(67) = _6
callarg(67) = callarg(67) + UNKNOWN
callarg(67) = *callarg(67) + UNKNOWN
CALLUSED(65) = callarg(67)
*callarg(67) = callescape(64)
CALLCLOBBERED(66) = callarg(67)
callescape(64) = callarg(67)
ESCAPED = _6
_7 = stderr_pipe
callescape(69) = NONLOCAL
CALLUSED(70) = callescape(69)
callarg(72) = _7
callarg(72) = callarg(72) + UNKNOWN
callarg(72) = *callarg(72) + UNKNOWN
CALLUSED(70) = callarg(72)
*callarg(72) = callescape(69)
CALLCLOBBERED(71) = callarg(72)
callescape(69) = callarg(72)
ESCAPED = _7
n.30_8 = _58
buffer = &NULL
callescape(77) = NONLOCAL
CALLUSED(78) = callescape(77)
_ZSt4cout.0+64 = NONLOCAL
_ZSt4cout.64+64 = NONLOCAL
_ZSt4cout.128+224 = NONLOCAL
_ZSt4cout.384+64 = NONLOCAL
_ZSt4cout.448+64 = NONLOCAL
_ZSt4cout.512+1120 = NONLOCAL
_ZSt4cout.1664+64 = NONLOCAL
_ZSt4cout.1728+64 = NONLOCAL
_ZSt4cout.1792+64 = NONLOCAL
_ZSt4cout.1856+16 = NONLOCAL
_ZSt4cout.1920+64 = NONLOCAL
_ZSt4cout.1984+64 = NONLOCAL
_ZSt4cout.2048+64 = NONLOCAL
_ZSt4cout.2112+64 = NONLOCAL
callarg(80) = &_ZSt4cout.0+64
callarg(80) = callarg(80) + UNKNOWN
callarg(80) = *callarg(80) + UNKNOWN
CALLUSED(78) = callarg(80)
*callarg(80) = callescape(77)
CALLCLOBBERED(79) = callarg(80)
callescape(77) = callarg(80)
ESCAPED = &_ZSt4cout.0+64
callarg(95) = &STRING
callarg(95) = callarg(95) + UNKNOWN
callarg(95) = *callarg(95) + UNKNOWN
CALLUSED(78) = callarg(95)
*callarg(95) = callescape(77)
CALLCLOBBERED(79) = callarg(95)
callescape(77) = callarg(95)
ESCAPED = &STRING
callarg(96) = &NONLOCAL
callarg(96) = callarg(96) + UNKNOWN
callarg(96) = *callarg(96) + UNKNOWN
CALLUSED(78) = callarg(96)
*callarg(96) = callescape(77)
CALLCLOBBERED(79) = callarg(96)
callescape(77) = callarg(96)
ESCAPED = &NONLOCAL
callescape(98) = NONLOCAL
CALLUSED(99) = callescape(98)
callarg(101) = &_ZSt4cout.0+64
callarg(101) = callarg(101) + UNKNOWN
callarg(101) = *callarg(101) + UNKNOWN
CALLUSED(99) = callarg(101)
*callarg(101) = callescape(98)
CALLCLOBBERED(100) = callarg(101)
callescape(98) = callarg(101)
ESCAPED = &_ZSt4cout.0+64
callarg(102) = &buffer
callarg(102) = callarg(102) + UNKNOWN
callarg(102) = *callarg(102) + UNKNOWN
CALLUSED(99) = callarg(102)
*callarg(102) = callescape(98)
CALLCLOBBERED(100) = callarg(102)
callescape(98) = callarg(102)
ESCAPED = &buffer
_12 = stdout_pipe
callescape(105) = NONLOCAL
CALLUSED(106) = callescape(105)
callarg(108) = _12
callarg(108) = callarg(108) + UNKNOWN
callarg(108) = *callarg(108) + UNKNOWN
CALLUSED(106) = callarg(108)
*callarg(108) = callescape(105)
CALLCLOBBERED(107) = callarg(108)
callescape(105) = callarg(108)
ESCAPED = _12
callarg(109) = &buffer
callarg(109) = callarg(109) + UNKNOWN
callarg(109) = *callarg(109) + UNKNOWN
CALLUSED(106) = callarg(109)
*callarg(109) = callescape(105)
CALLCLOBBERED(107) = callarg(109)
callescape(105) = callarg(109)
ESCAPED = &buffer
callarg(110) = &NONLOCAL
callarg(110) = callarg(110) + UNKNOWN
callarg(110) = *callarg(110) + UNKNOWN
CALLUSED(106) = callarg(110)
*callarg(110) = callescape(105)
CALLCLOBBERED(107) = callarg(110)
callescape(105) = callarg(110)
ESCAPED = &NONLOCAL
_58 = NONLOCAL
_58 = callarg(108)
_58 = callarg(109)
_58 = callarg(110)
n.32_14 = _62
buffer = &NULL
callescape(113) = NONLOCAL
CALLUSED(114) = callescape(113)
_ZSt4cerr.0+64 = NONLOCAL
_ZSt4cerr.64+64 = NONLOCAL
_ZSt4cerr.128+224 = NONLOCAL
_ZSt4cerr.384+64 = NONLOCAL
_ZSt4cerr.448+64 = NONLOCAL
_ZSt4cerr.512+1120 = NONLOCAL
_ZSt4cerr.1664+64 = NONLOCAL
_ZSt4cerr.1728+64 = NONLOCAL
_ZSt4cerr.1792+64 = NONLOCAL
_ZSt4cerr.1856+16 = NONLOCAL
_ZSt4cerr.1920+64 = NONLOCAL
_ZSt4cerr.1984+64 = NONLOCAL
_ZSt4cerr.2048+64 = NONLOCAL
_ZSt4cerr.2112+64 = NONLOCAL
callarg(116) = &_ZSt4cerr.0+64
callarg(116) = callarg(116) + UNKNOWN
callarg(116) = *callarg(116) + UNKNOWN
CALLUSED(114) = callarg(116)
*callarg(116) = callescape(113)
CALLCLOBBERED(115) = callarg(116)
callescape(113) = callarg(116)
ESCAPED = &_ZSt4cerr.0+64
callarg(131) = &STRING
callarg(131) = callarg(131) + UNKNOWN
callarg(131) = *callarg(131) + UNKNOWN
CALLUSED(114) = callarg(131)
*callarg(131) = callescape(113)
CALLCLOBBERED(115) = callarg(131)
callescape(113) = callarg(131)
ESCAPED = &STRING
callarg(132) = &NONLOCAL
callarg(132) = callarg(132) + UNKNOWN
callarg(132) = *callarg(132) + UNKNOWN
CALLUSED(114) = callarg(132)
*callarg(132) = callescape(113)
CALLCLOBBERED(115) = callarg(132)
callescape(113) = callarg(132)
ESCAPED = &NONLOCAL
callescape(133) = NONLOCAL
CALLUSED(134) = callescape(133)
callarg(136) = &_ZSt4cerr.0+64
callarg(136) = callarg(136) + UNKNOWN
callarg(136) = *callarg(136) + UNKNOWN
CALLUSED(134) = callarg(136)
*callarg(136) = callescape(133)
CALLCLOBBERED(135) = callarg(136)
callescape(133) = callarg(136)
ESCAPED = &_ZSt4cerr.0+64
callarg(137) = &buffer
callarg(137) = callarg(137) + UNKNOWN
callarg(137) = *callarg(137) + UNKNOWN
CALLUSED(134) = callarg(137)
*callarg(137) = callescape(133)
CALLCLOBBERED(135) = callarg(137)
callescape(133) = callarg(137)
ESCAPED = &buffer
_18 = stderr_pipe
callescape(139) = NONLOCAL
CALLUSED(140) = callescape(139)
callarg(142) = _18
callarg(142) = callarg(142) + UNKNOWN
callarg(142) = *callarg(142) + UNKNOWN
CALLUSED(140) = callarg(142)
*callarg(142) = callescape(139)
CALLCLOBBERED(141) = callarg(142)
callescape(139) = callarg(142)
ESCAPED = _18
callarg(143) = &buffer
callarg(143) = callarg(143) + UNKNOWN
callarg(143) = *callarg(143) + UNKNOWN
CALLUSED(140) = callarg(143)
*callarg(143) = callescape(139)
CALLCLOBBERED(141) = callarg(143)
callescape(139) = callarg(143)
ESCAPED = &buffer
callarg(144) = &NONLOCAL
callarg(144) = callarg(144) + UNKNOWN
callarg(144) = *callarg(144) + UNKNOWN
CALLUSED(140) = callarg(144)
*callarg(144) = callescape(139)
CALLCLOBBERED(141) = callarg(144)
callescape(139) = callarg(144)
ESCAPED = &NONLOCAL
_62 = NONLOCAL
_62 = callarg(142)
_62 = callarg(143)
_62 = callarg(144)
_20 = stdout_pipe
callescape(146) = NONLOCAL
CALLUSED(147) = callescape(146)
callarg(149) = _20
callarg(149) = callarg(149) + UNKNOWN
callarg(149) = *callarg(149) + UNKNOWN
CALLUSED(147) = callarg(149)
*callarg(149) = callescape(146)
CALLCLOBBERED(148) = callarg(149)
callescape(146) = callarg(149)
ESCAPED = _20
_21 = stderr_pipe
callescape(151) = NONLOCAL
CALLUSED(152) = callescape(151)
callarg(154) = _21
callarg(154) = callarg(154) + UNKNOWN
callarg(154) = *callarg(154) + UNKNOWN
CALLUSED(152) = callarg(154)
*callarg(154) = callescape(151)
CALLCLOBBERED(153) = callarg(154)
callescape(151) = callarg(154)
ESCAPED = _21
callescape(156) = NONLOCAL
CALLUSED(157) = callescape(156)
callarg(159) = pid_52
callarg(159) = callarg(159) + UNKNOWN
callarg(159) = *callarg(159) + UNKNOWN
CALLUSED(157) = callarg(159)
*callarg(159) = callescape(156)
CALLCLOBBERED(158) = callarg(159)
callescape(156) = callarg(159)
ESCAPED = pid_52
callarg(160) = &status
callarg(160) = callarg(160) + UNKNOWN
callarg(160) = *callarg(160) + UNKNOWN
CALLUSED(157) = callarg(160)
*callarg(160) = callescape(156)
CALLCLOBBERED(158) = callarg(160)
callescape(156) = callarg(160)
ESCAPED = &status
callarg(162) = &NULL
callarg(162) = callarg(162) + UNKNOWN
callarg(162) = *callarg(162) + UNKNOWN
CALLUSED(157) = callarg(162)
*callarg(162) = callescape(156)
CALLCLOBBERED(158) = callarg(162)
callescape(156) = callarg(162)
ESCAPED = &NULL
status.34_22 = status
_23 = status.34_22 + UNKNOWN
callescape(165) = NONLOCAL
CALLUSED(166) = callescape(165)
callarg(168) = &_ZSt4cout.0+64
callarg(168) = callarg(168) + UNKNOWN
callarg(168) = *callarg(168) + UNKNOWN
CALLUSED(166) = callarg(168)
*callarg(168) = callescape(165)
CALLCLOBBERED(167) = callarg(168)
callescape(165) = callarg(168)
ESCAPED = &_ZSt4cout.0+64
callarg(169) = &STRING
callarg(169) = callarg(169) + UNKNOWN
callarg(169) = *callarg(169) + UNKNOWN
CALLUSED(166) = callarg(169)
*callarg(169) = callescape(165)
CALLCLOBBERED(167) = callarg(169)
callescape(165) = callarg(169)
ESCAPED = &STRING
callarg(170) = &NONLOCAL
callarg(170) = callarg(170) + UNKNOWN
callarg(170) = *callarg(170) + UNKNOWN
CALLUSED(166) = callarg(170)
*callarg(170) = callescape(165)
CALLCLOBBERED(167) = callarg(170)
callescape(165) = callarg(170)
ESCAPED = &NONLOCAL
_122 = *scriptPath
_123 = *scriptPath + 64
_124 = _123
callescape(174) = NONLOCAL
CALLUSED(175) = callescape(174)
callarg(177) = &_ZSt4cout.0+64
callarg(177) = callarg(177) + UNKNOWN
callarg(177) = *callarg(177) + UNKNOWN
CALLUSED(175) = callarg(177)
*callarg(177) = callescape(174)
CALLCLOBBERED(176) = callarg(177)
callescape(174) = callarg(177)
ESCAPED = &_ZSt4cout.0+64
callarg(178) = _122
callarg(178) = callarg(178) + UNKNOWN
callarg(178) = *callarg(178) + UNKNOWN
CALLUSED(175) = callarg(178)
*callarg(178) = callescape(174)
CALLCLOBBERED(176) = callarg(178)
callescape(174) = callarg(178)
ESCAPED = _122
callarg(179) = _124
callarg(179) = callarg(179) + UNKNOWN
callarg(179) = *callarg(179) + UNKNOWN
CALLUSED(175) = callarg(179)
*callarg(179) = callescape(174)
CALLCLOBBERED(176) = callarg(179)
callescape(174) = callarg(179)
ESCAPED = _124
_125 = NONLOCAL
_125 = callarg(177)
_125 = callarg(178)
_125 = callarg(179)
callescape(181) = NONLOCAL
CALLUSED(182) = callescape(181)
callarg(184) = _125
callarg(184) = callarg(184) + UNKNOWN
callarg(184) = *callarg(184) + UNKNOWN
CALLUSED(182) = callarg(184)
*callarg(184) = callescape(181)
CALLCLOBBERED(183) = callarg(184)
callescape(181) = callarg(184)
ESCAPED = _125
callarg(185) = &STRING
callarg(185) = callarg(185) + UNKNOWN
callarg(185) = *callarg(185) + UNKNOWN
CALLUSED(182) = callarg(185)
*callarg(185) = callescape(181)
CALLCLOBBERED(183) = callarg(185)
callescape(181) = callarg(185)
ESCAPED = &STRING
callarg(186) = &NONLOCAL
callarg(186) = callarg(186) + UNKNOWN
callarg(186) = *callarg(186) + UNKNOWN
CALLUSED(182) = callarg(186)
*callarg(186) = callescape(181)
CALLCLOBBERED(183) = callarg(186)
callescape(181) = callarg(186)
ESCAPED = &NONLOCAL
status.35_27 = status
_28 = status.35_27 + UNKNOWN
_28 = &NONLOCAL
_29 = _28 + UNKNOWN
callescape(191) = NONLOCAL
CALLUSED(192) = callescape(191)
callarg(194) = _125
callarg(194) = callarg(194) + UNKNOWN
callarg(194) = *callarg(194) + UNKNOWN
CALLUSED(192) = callarg(194)
*callarg(194) = callescape(191)
CALLCLOBBERED(193) = callarg(194)
callescape(191) = callarg(194)
ESCAPED = _125
callarg(195) = _29
callarg(195) = callarg(195) + UNKNOWN
callarg(195) = *callarg(195) + UNKNOWN
CALLUSED(192) = callarg(195)
*callarg(195) = callescape(191)
CALLCLOBBERED(193) = callarg(195)
callescape(191) = callarg(195)
ESCAPED = _29
_85 = NONLOCAL
_85 = callarg(194)
_85 = callarg(195)
callescape(198) = NONLOCAL
CALLUSED(199) = callescape(198)
callarg(201) = _85
callarg(201) = callarg(201) + UNKNOWN
callarg(201) = *callarg(201) + UNKNOWN
CALLUSED(199) = callarg(201)
*callarg(201) = callescape(198)
CALLCLOBBERED(200) = callarg(201)
callescape(198) = callarg(201)
ESCAPED = _85
_128 = NONLOCAL
_128 = callarg(201)
status.36_31 = status
_32 = status.36_31
_33 = _32 + UNKNOWN
_34 = _33 + UNKNOWN
_34 = &NONLOCAL
_35 = _34
_36 = _35 + UNKNOWN
_36 = &NONLOCAL
callescape(209) = NONLOCAL
CALLUSED(210) = callescape(209)
callarg(212) = &_ZSt4cout.0+64
callarg(212) = callarg(212) + UNKNOWN
callarg(212) = *callarg(212) + UNKNOWN
CALLUSED(210) = callarg(212)
*callarg(212) = callescape(209)
CALLCLOBBERED(211) = callarg(212)
callescape(209) = callarg(212)
ESCAPED = &_ZSt4cout.0+64
callarg(213) = &STRING
callarg(213) = callarg(213) + UNKNOWN
callarg(213) = *callarg(213) + UNKNOWN
CALLUSED(210) = callarg(213)
*callarg(213) = callescape(209)
CALLCLOBBERED(211) = callarg(213)
callescape(209) = callarg(213)
ESCAPED = &STRING
callarg(214) = &NONLOCAL
callarg(214) = callarg(214) + UNKNOWN
callarg(214) = *callarg(214) + UNKNOWN
CALLUSED(210) = callarg(214)
*callarg(214) = callescape(209)
CALLCLOBBERED(211) = callarg(214)
callescape(209) = callarg(214)
ESCAPED = &NONLOCAL
_131 = *scriptPath
_132 = *scriptPath + 64
_133 = _132
callescape(218) = NONLOCAL
CALLUSED(219) = callescape(218)
callarg(221) = &_ZSt4cout.0+64
callarg(221) = callarg(221) + UNKNOWN
callarg(221) = *callarg(221) + UNKNOWN
CALLUSED(219) = callarg(221)
*callarg(221) = callescape(218)
CALLCLOBBERED(220) = callarg(221)
callescape(218) = callarg(221)
ESCAPED = &_ZSt4cout.0+64
callarg(222) = _131
callarg(222) = callarg(222) + UNKNOWN
callarg(222) = *callarg(222) + UNKNOWN
CALLUSED(219) = callarg(222)
*callarg(222) = callescape(218)
CALLCLOBBERED(220) = callarg(222)
callescape(218) = callarg(222)
ESCAPED = _131
callarg(223) = _133
callarg(223) = callarg(223) + UNKNOWN
callarg(223) = *callarg(223) + UNKNOWN
CALLUSED(219) = callarg(223)
*callarg(223) = callescape(218)
CALLCLOBBERED(220) = callarg(223)
callescape(218) = callarg(223)
ESCAPED = _133
_134 = NONLOCAL
_134 = callarg(221)
_134 = callarg(222)
_134 = callarg(223)
callescape(225) = NONLOCAL
CALLUSED(226) = callescape(225)
callarg(228) = _134
callarg(228) = callarg(228) + UNKNOWN
callarg(228) = *callarg(228) + UNKNOWN
CALLUSED(226) = callarg(228)
*callarg(228) = callescape(225)
CALLCLOBBERED(227) = callarg(228)
callescape(225) = callarg(228)
ESCAPED = _134
callarg(229) = &STRING
callarg(229) = callarg(229) + UNKNOWN
callarg(229) = *callarg(229) + UNKNOWN
CALLUSED(226) = callarg(229)
*callarg(229) = callescape(225)
CALLCLOBBERED(227) = callarg(229)
callescape(225) = callarg(229)
ESCAPED = &STRING
callarg(230) = &NONLOCAL
callarg(230) = callarg(230) + UNKNOWN
callarg(230) = *callarg(230) + UNKNOWN
CALLUSED(226) = callarg(230)
*callarg(230) = callescape(225)
CALLCLOBBERED(227) = callarg(230)
callescape(225) = callarg(230)
ESCAPED = &NONLOCAL
status.37_40 = status
_41 = status.37_40 + UNKNOWN
callescape(233) = NONLOCAL
CALLUSED(234) = callescape(233)
callarg(236) = _134
callarg(236) = callarg(236) + UNKNOWN
callarg(236) = *callarg(236) + UNKNOWN
CALLUSED(234) = callarg(236)
*callarg(236) = callescape(233)
CALLCLOBBERED(235) = callarg(236)
callescape(233) = callarg(236)
ESCAPED = _134
callarg(237) = _41
callarg(237) = callarg(237) + UNKNOWN
callarg(237) = *callarg(237) + UNKNOWN
CALLUSED(234) = callarg(237)
*callarg(237) = callescape(233)
CALLCLOBBERED(235) = callarg(237)
callescape(233) = callarg(237)
ESCAPED = _41
_76 = NONLOCAL
_76 = callarg(236)
_76 = callarg(237)
callescape(239) = NONLOCAL
CALLUSED(240) = callescape(239)
callarg(242) = _76
callarg(242) = callarg(242) + UNKNOWN
callarg(242) = *callarg(242) + UNKNOWN
CALLUSED(240) = callarg(242)
*callarg(242) = callescape(239)
CALLCLOBBERED(241) = callarg(242)
callescape(239) = callarg(242)
ESCAPED = _76
_137 = NONLOCAL
_137 = callarg(242)
callescape(244) = NONLOCAL
CALLUSED(245) = callescape(244)
callarg(247) = &_ZSt4cerr.0+64
callarg(247) = callarg(247) + UNKNOWN
callarg(247) = *callarg(247) + UNKNOWN
CALLUSED(245) = callarg(247)
*callarg(247) = callescape(244)
CALLCLOBBERED(246) = callarg(247)
callescape(244) = callarg(247)
ESCAPED = &_ZSt4cerr.0+64
callarg(248) = &STRING
callarg(248) = callarg(248) + UNKNOWN
callarg(248) = *callarg(248) + UNKNOWN
CALLUSED(245) = callarg(248)
*callarg(248) = callescape(244)
CALLCLOBBERED(246) = callarg(248)
callescape(244) = callarg(248)
ESCAPED = &STRING
callescape(250) = NONLOCAL
CALLUSED(251) = callescape(250)
callarg(253) = &NONLOCAL
callarg(253) = callarg(253) + UNKNOWN
callarg(253) = *callarg(253) + UNKNOWN
CALLUSED(251) = callarg(253)
*callarg(253) = callescape(250)
CALLCLOBBERED(252) = callarg(253)
callescape(250) = callarg(253)
ESCAPED = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL STRING ESCAPED NONLOCAL stdout_pipe stderr_pipe buffer _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 status }
NONLOCAL = { ESCAPED NONLOCAL } same as callescape(21)
STOREDANYTHING = { }
INTEGER = { ANYTHING }
stdout_pipe = { ESCAPED NONLOCAL stdout_pipe } same as _1
stderr_pipe = { ESCAPED NONLOCAL stderr_pipe } same as _2
buffer = { NULL ESCAPED NONLOCAL stderr_pipe buffer _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 }
_ZSt4cout.0+64 = { ESCAPED NONLOCAL }
_ZSt4cout.64+64 = { ESCAPED NONLOCAL }
_ZSt4cout.128+224 = { ESCAPED NONLOCAL }
_ZSt4cout.384+64 = { ESCAPED NONLOCAL }
_ZSt4cout.448+64 = { ESCAPED NONLOCAL }
_ZSt4cout.512+1120 = { ESCAPED NONLOCAL }
_ZSt4cout.1664+64 = { ESCAPED NONLOCAL }
_ZSt4cout.1728+64 = { ESCAPED NONLOCAL }
_ZSt4cout.1792+64 = { ESCAPED NONLOCAL }
_ZSt4cout.1856+16 = { ESCAPED NONLOCAL }
_ZSt4cout.1920+64 = { ESCAPED NONLOCAL }
_ZSt4cout.1984+64 = { ESCAPED NONLOCAL }
_ZSt4cout.2048+64 = { ESCAPED NONLOCAL }
_ZSt4cout.2112+64 = { ESCAPED NONLOCAL }
_ZSt4cerr.0+64 = { ESCAPED NONLOCAL }
_ZSt4cerr.64+64 = { ESCAPED NONLOCAL }
_ZSt4cerr.128+224 = { ESCAPED NONLOCAL }
_ZSt4cerr.384+64 = { ESCAPED NONLOCAL }
_ZSt4cerr.448+64 = { ESCAPED NONLOCAL }
_ZSt4cerr.512+1120 = { ESCAPED NONLOCAL }
_ZSt4cerr.1664+64 = { ESCAPED NONLOCAL }
_ZSt4cerr.1728+64 = { ESCAPED NONLOCAL }
_ZSt4cerr.1792+64 = { ESCAPED NONLOCAL }
_ZSt4cerr.1856+16 = { ESCAPED NONLOCAL }
_ZSt4cerr.1920+64 = { ESCAPED NONLOCAL }
_ZSt4cerr.1984+64 = { ESCAPED NONLOCAL }
_ZSt4cerr.2048+64 = { ESCAPED NONLOCAL }
_ZSt4cerr.2112+64 = { ESCAPED NONLOCAL }
status = { NULL ESCAPED NONLOCAL status } same as status.34_22
scriptPath = { NONLOCAL }
pipe = { }
callescape(10) = { ESCAPED NONLOCAL stdout_pipe }
CALLUSED(11) = { ESCAPED NONLOCAL stdout_pipe } same as callescape(10)
CALLCLOBBERED(12) = { ESCAPED NONLOCAL stdout_pipe } same as callarg(13)
callarg(13) = { ESCAPED NONLOCAL stdout_pipe }
callescape(15) = { ESCAPED NONLOCAL stderr_pipe }
CALLUSED(16) = { ESCAPED NONLOCAL stderr_pipe } same as callescape(15)
CALLCLOBBERED(17) = { ESCAPED NONLOCAL stderr_pipe } same as callarg(18)
callarg(18) = { ESCAPED NONLOCAL stderr_pipe }
fork = { }
callescape(21) = { ESCAPED NONLOCAL }
CALLUSED(22) = { ESCAPED NONLOCAL } same as callescape(21)
CALLCLOBBERED(23) = { }
pid_52 = { ESCAPED NONLOCAL } same as callescape(21)
_1 = { ESCAPED NONLOCAL stdout_pipe }
close = { }
callescape(27) = { ESCAPED NONLOCAL stdout_pipe }
CALLUSED(28) = { ESCAPED NONLOCAL stdout_pipe } same as callescape(27)
CALLCLOBBERED(29) = { ESCAPED NONLOCAL stdout_pipe } same as callarg(30)
callarg(30) = { ESCAPED NONLOCAL stdout_pipe }
_2 = { ESCAPED NONLOCAL stderr_pipe }
callescape(32) = { ESCAPED NONLOCAL stderr_pipe }
CALLUSED(33) = { ESCAPED NONLOCAL stderr_pipe } same as callescape(32)
CALLCLOBBERED(34) = { ESCAPED NONLOCAL stderr_pipe } same as callarg(35)
callarg(35) = { ESCAPED NONLOCAL stderr_pipe }
_3 = { ESCAPED NONLOCAL stdout_pipe } same as _1
dup2 = { }
callescape(38) = { ESCAPED NONLOCAL stdout_pipe }
CALLUSED(39) = { ESCAPED NONLOCAL stdout_pipe } same as callescape(38)
CALLCLOBBERED(40) = { ESCAPED NONLOCAL stdout_pipe }
callarg(41) = { ESCAPED NONLOCAL stdout_pipe }
callarg(42) = { ESCAPED NONLOCAL }
_4 = { ESCAPED NONLOCAL stderr_pipe } same as _2
callescape(44) = { ESCAPED NONLOCAL stderr_pipe }
CALLUSED(45) = { ESCAPED NONLOCAL stderr_pipe } same as callescape(44)
CALLCLOBBERED(46) = { ESCAPED NONLOCAL stderr_pipe }
callarg(47) = { ESCAPED NONLOCAL stderr_pipe }
callarg(48) = { ESCAPED NONLOCAL }
_91 = { ESCAPED NONLOCAL }
execl = { }
callescape(51) = { NULL STRING ESCAPED NONLOCAL }
CALLUSED(52) = { NULL STRING ESCAPED NONLOCAL } same as callescape(51)
CALLCLOBBERED(53) = { NULL STRING ESCAPED NONLOCAL }
callarg(54) = { STRING }
callarg(55) = { STRING }
callarg(56) = { ESCAPED NONLOCAL }
callarg(57) = { NULL }
_exit = { }
callescape(59) = { ESCAPED NONLOCAL }
CALLUSED(60) = { ESCAPED NONLOCAL } same as callescape(59)
CALLCLOBBERED(61) = { ESCAPED NONLOCAL } same as callarg(62)
callarg(62) = { ESCAPED NONLOCAL }
_6 = { ESCAPED NONLOCAL stdout_pipe } same as _1
callescape(64) = { ESCAPED NONLOCAL stdout_pipe }
CALLUSED(65) = { ESCAPED NONLOCAL stdout_pipe } same as callescape(64)
CALLCLOBBERED(66) = { ESCAPED NONLOCAL stdout_pipe } same as callarg(67)
callarg(67) = { ESCAPED NONLOCAL stdout_pipe }
_7 = { ESCAPED NONLOCAL stderr_pipe } same as _2
callescape(69) = { ESCAPED NONLOCAL stderr_pipe }
CALLUSED(70) = { ESCAPED NONLOCAL stderr_pipe } same as callescape(69)
CALLCLOBBERED(71) = { ESCAPED NONLOCAL stderr_pipe } same as callarg(72)
callarg(72) = { ESCAPED NONLOCAL stderr_pipe }
n.30_8 = { NULL ESCAPED NONLOCAL stdout_pipe stderr_pipe buffer _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 }
_58 = { NULL ESCAPED NONLOCAL stdout_pipe stderr_pipe buffer _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 } same as n.30_8
_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l = { }
callescape(77) = { STRING ESCAPED NONLOCAL _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 }
CALLUSED(78) = { STRING ESCAPED NONLOCAL _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 } same as callescape(77)
CALLCLOBBERED(79) = { STRING ESCAPED NONLOCAL _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 }
callarg(80) = { ESCAPED NONLOCAL _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 }
callarg(95) = { STRING }
callarg(96) = { ESCAPED NONLOCAL }
_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc = { }
callescape(98) = { NULL ESCAPED NONLOCAL stderr_pipe buffer _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 }
CALLUSED(99) = { NULL ESCAPED NONLOCAL stderr_pipe buffer _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 } same as callescape(98)
CALLCLOBBERED(100) = { NULL ESCAPED NONLOCAL stderr_pipe buffer _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 }
callarg(101) = { ESCAPED NONLOCAL _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 }
callarg(102) = { NULL ESCAPED NONLOCAL stderr_pipe buffer _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 }
_12 = { ESCAPED NONLOCAL stdout_pipe } same as _1
read = { }
callescape(105) = { NULL ESCAPED NONLOCAL stdout_pipe stderr_pipe buffer _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 } same as n.30_8
CALLUSED(106) = { NULL ESCAPED NONLOCAL stdout_pipe stderr_pipe buffer _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 } same as n.30_8
CALLCLOBBERED(107) = { NULL ESCAPED NONLOCAL stdout_pipe stderr_pipe buffer _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 }
callarg(108) = { ESCAPED NONLOCAL stdout_pipe }
callarg(109) = { NULL ESCAPED NONLOCAL stderr_pipe buffer _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 }
callarg(110) = { ESCAPED NONLOCAL }
n.32_14 = { NULL ESCAPED NONLOCAL stderr_pipe buffer _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 }
_62 = { NULL ESCAPED NONLOCAL stderr_pipe buffer _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 } same as n.32_14
callescape(113) = { STRING ESCAPED NONLOCAL _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 }
CALLUSED(114) = { STRING ESCAPED NONLOCAL _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 } same as callescape(113)
CALLCLOBBERED(115) = { STRING ESCAPED NONLOCAL _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 }
callarg(116) = { ESCAPED NONLOCAL _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 }
callarg(131) = { STRING }
callarg(132) = { ESCAPED NONLOCAL }
callescape(133) = { NULL ESCAPED NONLOCAL stderr_pipe buffer _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 }
CALLUSED(134) = { NULL ESCAPED NONLOCAL stderr_pipe buffer _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 } same as callescape(133)
CALLCLOBBERED(135) = { NULL ESCAPED NONLOCAL stderr_pipe buffer _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 }
callarg(136) = { ESCAPED NONLOCAL _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 }
callarg(137) = { NULL ESCAPED NONLOCAL stderr_pipe buffer _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 }
_18 = { ESCAPED NONLOCAL stderr_pipe } same as _2
callescape(139) = { NULL ESCAPED NONLOCAL stderr_pipe buffer _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 } same as n.32_14
CALLUSED(140) = { NULL ESCAPED NONLOCAL stderr_pipe buffer _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 } same as n.32_14
CALLCLOBBERED(141) = { NULL ESCAPED NONLOCAL stderr_pipe buffer _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 }
callarg(142) = { ESCAPED NONLOCAL stderr_pipe }
callarg(143) = { NULL ESCAPED NONLOCAL stderr_pipe buffer _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 }
callarg(144) = { ESCAPED NONLOCAL }
_20 = { ESCAPED NONLOCAL stdout_pipe } same as _1
callescape(146) = { ESCAPED NONLOCAL stdout_pipe }
CALLUSED(147) = { ESCAPED NONLOCAL stdout_pipe } same as callescape(146)
CALLCLOBBERED(148) = { ESCAPED NONLOCAL stdout_pipe } same as callarg(149)
callarg(149) = { ESCAPED NONLOCAL stdout_pipe }
_21 = { ESCAPED NONLOCAL stderr_pipe } same as _2
callescape(151) = { ESCAPED NONLOCAL stderr_pipe }
CALLUSED(152) = { ESCAPED NONLOCAL stderr_pipe } same as callescape(151)
CALLCLOBBERED(153) = { ESCAPED NONLOCAL stderr_pipe } same as callarg(154)
callarg(154) = { ESCAPED NONLOCAL stderr_pipe }
waitpid = { }
callescape(156) = { NULL ESCAPED NONLOCAL status }
CALLUSED(157) = { NULL ESCAPED NONLOCAL status } same as callescape(156)
CALLCLOBBERED(158) = { NULL ESCAPED NONLOCAL status } same as callescape(156)
callarg(159) = { ESCAPED NONLOCAL }
callarg(160) = { NULL ESCAPED NONLOCAL status }
callarg(162) = { NULL }
status.34_22 = { NULL ESCAPED NONLOCAL status }
_23 = { NULL ESCAPED NONLOCAL status }
callescape(165) = { STRING ESCAPED NONLOCAL _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 }
CALLUSED(166) = { STRING ESCAPED NONLOCAL _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 } same as callescape(165)
CALLCLOBBERED(167) = { STRING ESCAPED NONLOCAL _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 }
callarg(168) = { ESCAPED NONLOCAL _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 }
callarg(169) = { STRING }
callarg(170) = { ESCAPED NONLOCAL }
_122 = { ESCAPED NONLOCAL } same as _91
_123 = { ESCAPED NONLOCAL }
_124 = { ESCAPED NONLOCAL } same as _123
callescape(174) = { ESCAPED NONLOCAL _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 }
CALLUSED(175) = { ESCAPED NONLOCAL _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 } same as callescape(174)
CALLCLOBBERED(176) = { ESCAPED NONLOCAL _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 }
callarg(177) = { ESCAPED NONLOCAL _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 }
callarg(178) = { ESCAPED NONLOCAL }
callarg(179) = { ESCAPED NONLOCAL }
_125 = { ESCAPED NONLOCAL _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 } same as callescape(174)
callescape(181) = { STRING ESCAPED NONLOCAL _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 }
CALLUSED(182) = { STRING ESCAPED NONLOCAL _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 } same as callescape(181)
CALLCLOBBERED(183) = { STRING ESCAPED NONLOCAL _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 } same as callescape(181)
callarg(184) = { ESCAPED NONLOCAL _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 }
callarg(185) = { STRING }
callarg(186) = { ESCAPED NONLOCAL }
status.35_27 = { NULL ESCAPED NONLOCAL status } same as status.34_22
_28 = { NULL ESCAPED NONLOCAL status }
_29 = { NULL ESCAPED NONLOCAL status }
_ZNSolsEi = { }
callescape(191) = { NULL ESCAPED NONLOCAL _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 status }
CALLUSED(192) = { NULL ESCAPED NONLOCAL _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 status } same as callescape(191)
CALLCLOBBERED(193) = { NULL ESCAPED NONLOCAL _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 status } same as callescape(191)
callarg(194) = { ESCAPED NONLOCAL _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 }
callarg(195) = { NULL ESCAPED NONLOCAL status }
_85 = { NULL ESCAPED NONLOCAL _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 status } same as callescape(191)
_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_ = { }
callescape(198) = { NULL ESCAPED NONLOCAL _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 status }
CALLUSED(199) = { NULL ESCAPED NONLOCAL _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 status } same as callescape(198)
CALLCLOBBERED(200) = { NULL ESCAPED NONLOCAL _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 status } same as callescape(198)
callarg(201) = { NULL ESCAPED NONLOCAL _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 status } same as callescape(198)
_128 = { NULL ESCAPED NONLOCAL _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 status } same as callescape(198)
status.36_31 = { NULL ESCAPED NONLOCAL status } same as status.34_22
_32 = { NULL ESCAPED NONLOCAL status } same as status.34_22
_33 = { NULL ESCAPED NONLOCAL status }
_34 = { NULL ESCAPED NONLOCAL status }
_35 = { NULL ESCAPED NONLOCAL status } same as _34
_36 = { NULL ESCAPED NONLOCAL status }
callescape(209) = { STRING ESCAPED NONLOCAL _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 }
CALLUSED(210) = { STRING ESCAPED NONLOCAL _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 } same as callescape(209)
CALLCLOBBERED(211) = { STRING ESCAPED NONLOCAL _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 }
callarg(212) = { ESCAPED NONLOCAL _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 }
callarg(213) = { STRING }
callarg(214) = { ESCAPED NONLOCAL }
_131 = { ESCAPED NONLOCAL } same as _91
_132 = { ESCAPED NONLOCAL }
_133 = { ESCAPED NONLOCAL } same as _132
callescape(218) = { ESCAPED NONLOCAL _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 }
CALLUSED(219) = { ESCAPED NONLOCAL _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 } same as callescape(218)
CALLCLOBBERED(220) = { ESCAPED NONLOCAL _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 }
callarg(221) = { ESCAPED NONLOCAL _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 }
callarg(222) = { ESCAPED NONLOCAL }
callarg(223) = { ESCAPED NONLOCAL }
_134 = { ESCAPED NONLOCAL _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 } same as callescape(218)
callescape(225) = { STRING ESCAPED NONLOCAL _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 }
CALLUSED(226) = { STRING ESCAPED NONLOCAL _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 } same as callescape(225)
CALLCLOBBERED(227) = { STRING ESCAPED NONLOCAL _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 } same as callescape(225)
callarg(228) = { ESCAPED NONLOCAL _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 }
callarg(229) = { STRING }
callarg(230) = { ESCAPED NONLOCAL }
status.37_40 = { NULL ESCAPED NONLOCAL status } same as status.34_22
_41 = { NULL ESCAPED NONLOCAL status }
callescape(233) = { NULL ESCAPED NONLOCAL _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 status }
CALLUSED(234) = { NULL ESCAPED NONLOCAL _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 status } same as callescape(233)
CALLCLOBBERED(235) = { NULL ESCAPED NONLOCAL _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 status } same as callescape(233)
callarg(236) = { ESCAPED NONLOCAL _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 }
callarg(237) = { NULL ESCAPED NONLOCAL status }
_76 = { NULL ESCAPED NONLOCAL _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 status } same as callescape(233)
callescape(239) = { NULL ESCAPED NONLOCAL _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 status }
CALLUSED(240) = { NULL ESCAPED NONLOCAL _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 status } same as callescape(239)
CALLCLOBBERED(241) = { NULL ESCAPED NONLOCAL _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 status } same as callescape(239)
callarg(242) = { NULL ESCAPED NONLOCAL _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 status } same as callescape(239)
_137 = { NULL ESCAPED NONLOCAL _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 status } same as callescape(239)
callescape(244) = { STRING ESCAPED NONLOCAL _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 }
CALLUSED(245) = { STRING ESCAPED NONLOCAL _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 } same as callescape(244)
CALLCLOBBERED(246) = { STRING ESCAPED NONLOCAL _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 }
callarg(247) = { ESCAPED NONLOCAL _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 }
callarg(248) = { STRING }
exit = { }
callescape(250) = { ESCAPED NONLOCAL }
CALLUSED(251) = { ESCAPED NONLOCAL } same as callescape(250)
CALLCLOBBERED(252) = { ESCAPED NONLOCAL } same as callarg(253)
callarg(253) = { ESCAPED NONLOCAL }


Alias information for execute_script(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)

Aliased symbols

status, UID D.89291, int, is addressable
buffer, UID D.89157, struct array, is addressable
stderr_pipe, UID D.89154, int[2], is addressable
stdout_pipe, UID D.89153, int[2], is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.47220 D.47221 D.89153 D.89154 D.89157 D.89291 } (nonlocal, escaped, interposable)

Flow-insensitive points-to information

scriptPath_70(D), points-to non-local, points-to vars: { }
_76, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.47220 D.89291 } (nonlocal, escaped, interposable)
_85, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.47220 D.89291 } (nonlocal, escaped, interposable)
_91, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_122, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_125, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.47220 } (nonlocal, escaped, interposable)
_128, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.47220 D.89291 } (nonlocal, escaped, interposable)
_131, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_134, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.47220 } (nonlocal, escaped, interposable)
_137, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.47220 D.89291 } (nonlocal, escaped, interposable)

void execute_script (const struct string & scriptPath)
{
  struct basic_ostream & D.98432;
  struct basic_ostream & D.98429;
  struct basic_ostream & D.98426;
  struct basic_ostream & D.98420;
  struct basic_ostream & D.98417;
  struct basic_ostream & D.98414;
  value_type * D.98411;
  value_type * D.98409;
  value_type & D.98407;
  struct basic_ostream & D.98404;
  value_type * D.98401;
  value_type * D.98399;
  value_type & D.98397;
  struct basic_ostream & D.98394;
  const char * D.98391;
  int status;
  ssize_t n;
  struct array buffer;
  pid_t pid;
  int stderr_pipe[2];
  int stdout_pipe[2];
  int _1;
  int _2;
  int _3;
  int _4;
  int _6;
  int _7;
  long unsigned int n.30_8;
  int _12;
  long unsigned int n.32_14;
  int _18;
  int _20;
  int _21;
  int status.34_22;
  int _23;
  int status.35_27;
  int _28;
  int _29;
  int status.36_31;
  unsigned char _32;
  unsigned char _33;
  unsigned char _34;
  signed char _35;
  signed char _36;
  int status.37_40;
  int _41;
  ssize_t _58;
  ssize_t _62;
  struct basic_ostream & _76;
  struct basic_ostream & _85;
  char * _91;
  char * _122;
  long unsigned int _123;
  long int _124;
  struct basic_ostream & _125;
  struct __ostream_type & _128;
  char * _131;
  long unsigned int _132;
  long int _133;
  struct basic_ostream & _134;
  struct __ostream_type & _137;

  <bb 2> :
  gimple_call <pipe, NULL, &stdout_pipe>
  gimple_call <pipe, NULL, &stderr_pipe>
  gimple_call <fork, pid_52>
  gimple_cond <eq_expr, pid_52, 0, NULL, NULL>
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  gimple_assign <array_ref, _1, stdout_pipe[0], NULL, NULL>
  gimple_call <close, NULL, _1>

  <bb 4> :
  gimple_assign <array_ref, _2, stderr_pipe[0], NULL, NULL>
  gimple_call <close, NULL, _2>

  <bb 5> :
  gimple_assign <array_ref, _3, stdout_pipe[1], NULL, NULL>
  gimple_call <dup2, NULL, _3, 1>
  gimple_assign <array_ref, _4, stderr_pipe[1], NULL, NULL>
  gimple_call <dup2, NULL, _4, 2>
  gimple_assign <component_ref, _91, MEM[(const struct basic_string *)scriptPath_70(D)]._M_dataplus._M_p, NULL, NULL>
  gimple_call <execl, NULL, "/bin/bash", "bash", _91, 0>
  gimple_call <_exit, NULL, 1>

  <bb 6> :
  gimple_cond <gt_expr, pid_52, 0, NULL, NULL>
    goto <bb 7>; [INV]
  else
    goto <bb 33>; [INV]

  <bb 7> :
  gimple_assign <array_ref, _6, stdout_pipe[1], NULL, NULL>
  gimple_call <close, NULL, _6>

  <bb 8> :
  gimple_assign <array_ref, _7, stderr_pipe[1], NULL, NULL>
  gimple_call <close, NULL, _7>
  goto <bb 11>; [INV]

  <bb 9> :
  gimple_assign <nop_expr, n.30_8, _58, NULL, NULL>
  gimple_assign <integer_cst, MEM <const char[128]> [(value_type &)&buffer][n.30_8], 0, NULL, NULL>
  gimple_call <__ostream_insert, NULL, &cout, "[SHINFO] ", 9>

  <bb 10> :
  gimple_call <operator<<, NULL, &cout, &buffer._M_elems>

  <bb 11> :
  gimple_assign <array_ref, _12, stdout_pipe[0], NULL, NULL>
  gimple_call <read, _58, _12, &buffer._M_elems, 127>

  <bb 12> :
  gimple_cond <gt_expr, _58, 0, NULL, NULL>
    goto <bb 9>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 13> :
  gimple_assign <nop_expr, n.32_14, _62, NULL, NULL>
  gimple_assign <integer_cst, MEM <const char[128]> [(value_type &)&buffer][n.32_14], 0, NULL, NULL>
  gimple_call <__ostream_insert, NULL, &cerr, "[SHERR] ", 8>

  <bb 14> :
  gimple_call <operator<<, NULL, &cerr, &buffer._M_elems>

  <bb 15> :
  gimple_assign <array_ref, _18, stderr_pipe[0], NULL, NULL>
  gimple_call <read, _62, _18, &buffer._M_elems, 127>

  <bb 16> :
  gimple_cond <gt_expr, _62, 0, NULL, NULL>
    goto <bb 13>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 17> :
  gimple_assign <array_ref, _20, stdout_pipe[0], NULL, NULL>
  gimple_call <close, NULL, _20>

  <bb 18> :
  gimple_assign <array_ref, _21, stderr_pipe[0], NULL, NULL>
  gimple_call <close, NULL, _21>

  <bb 19> :
  gimple_call <waitpid, NULL, pid_52, &status, 0>

  <bb 20> :
  gimple_assign <var_decl, status.34_22, status, NULL, NULL>
  gimple_assign <bit_and_expr, _23, status.34_22, 127, NULL>
  gimple_cond <eq_expr, _23, 0, NULL, NULL>
    goto <bb 21>; [INV]
  else
    goto <bb 26>; [INV]

  <bb 21> :
  gimple_call <__ostream_insert, NULL, &cout, "[INFO] Script ", 14>

  <bb 22> :
  gimple_assign <component_ref, _122, MEM[(const struct basic_string *)scriptPath_70(D)]._M_dataplus._M_p, NULL, NULL>
  gimple_assign <component_ref, _123, MEM[(const struct basic_string *)scriptPath_70(D)]._M_string_length, NULL, NULL>
  gimple_assign <nop_expr, _124, _123, NULL, NULL>
  gimple_call <__ostream_insert, _125, &cout, _122, _124>

  <bb 23> :
  gimple_call <__ostream_insert, NULL, _125, " exited with status ", 20>

  <bb 24> :
  gimple_assign <var_decl, status.35_27, status, NULL, NULL>
  gimple_assign <rshift_expr, _28, status.35_27, 8, NULL>
  gimple_assign <bit_and_expr, _29, _28, 255, NULL>
  gimple_call <operator<<, _85, _125, _29>

  <bb 25> :
  gimple_call <endl, _128, _85>
  goto <bb 32>; [100.00%]

  <bb 26> :
  gimple_assign <var_decl, status.36_31, status, NULL, NULL>
  gimple_assign <nop_expr, _32, status.36_31, NULL, NULL>
  gimple_assign <bit_and_expr, _33, _32, 127, NULL>
  gimple_assign <plus_expr, _34, _33, 1, NULL>
  gimple_assign <nop_expr, _35, _34, NULL, NULL>
  gimple_assign <rshift_expr, _36, _35, 1, NULL>
  gimple_cond <gt_expr, _36, 0, NULL, NULL>
    goto <bb 27>; [INV]
  else
    goto <bb 32>; [INV]

  <bb 27> :
  gimple_call <__ostream_insert, NULL, &cout, "[ERROR] Script ", 15>

  <bb 28> :
  gimple_assign <component_ref, _131, MEM[(const struct basic_string *)scriptPath_70(D)]._M_dataplus._M_p, NULL, NULL>
  gimple_assign <component_ref, _132, MEM[(const struct basic_string *)scriptPath_70(D)]._M_string_length, NULL, NULL>
  gimple_assign <nop_expr, _133, _132, NULL, NULL>
  gimple_call <__ostream_insert, _134, &cout, _131, _133>

  <bb 29> :
  gimple_call <__ostream_insert, NULL, _134, " terminated by signal ", 22>

  <bb 30> :
  gimple_assign <var_decl, status.37_40, status, NULL, NULL>
  gimple_assign <bit_and_expr, _41, status.37_40, 127, NULL>
  gimple_call <operator<<, _76, _134, _41>

  <bb 31> :
  gimple_call <endl, _137, _76>

  <bb 32> :
  gimple_assign <constructor, buffer, {CLOBBER(eol)}, NULL, NULL>
  gimple_assign <constructor, status, {CLOBBER(eol)}, NULL, NULL>
  gimple_assign <constructor, stdout_pipe, {CLOBBER(eol)}, NULL, NULL>
  gimple_assign <constructor, stderr_pipe, {CLOBBER(eol)}, NULL, NULL>
  gimple_return <NULL>

  <bb 33> :
  gimple_call <operator<<, NULL, &cerr, "[ERROR] Failed to fork process.\n">

  <bb 34> :
  gimple_call <exit, NULL, 1>

  <bb 35> :
gimple_label <<L17>>
  gimple_assign <constructor, buffer, {CLOBBER(eol)}, NULL, NULL>
  gimple_assign <constructor, status, {CLOBBER(eol)}, NULL, NULL>
  gimple_resx <2>

  <bb 36> :
gimple_label <<L18>>
  gimple_assign <constructor, stdout_pipe, {CLOBBER(eol)}, NULL, NULL>
  gimple_assign <constructor, stderr_pipe, {CLOBBER(eol)}, NULL, NULL>
  gimple_resx <1>

}



;; Function std::__ptr_traits_ptr_to<char*, char, false>::pointer_to (_ZNSt19__ptr_traits_ptr_toIPccLb0EE10pointer_toERc, funcdef_no=4339, decl_uid=93618, cgraph_uid=1818, symbol_order=2402)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__r = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__r = { NONLOCAL }
_ZNSt19__ptr_traits_ptr_toIPccLb0EE10pointer_toERc = { }


Alias information for std::__ptr_traits_ptr_to<char*, char, false>::pointer_to(char&)

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information

__r_1(D), points-to non-local, points-to vars: { }

char * std::__ptr_traits_ptr_to<char*, char, false>::pointer_to (element_type & __r)
{
  <bb 2> :
  gimple_return <__r_1(D)>

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv, funcdef_no=4108, decl_uid=28203, cgraph_uid=1587, symbol_order=2163)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_1 = this + UNKNOWN

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_1 = { NONLOCAL }
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv = { }


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to NULL, points-to vars: { }
this_2(D), points-to non-local, points-to vars: { }

char * std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data (struct basic_string * const this)
{
  char * D.98439;
  char[16] * _1;

  <bb 2> :
  gimple_assign <addr_expr, _1, &this_2(D)->D.28191._M_local_buf, NULL, NULL>
  gimple_return <_1>

}



;; Function std::__check_facet<std::ctype<char> > (_ZSt13__check_facetISt5ctypeIcEERKT_PS3_, funcdef_no=4442, decl_uid=95556, cgraph_uid=1921, symbol_order=2505)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__f = &NONLOCAL
callescape(10) = NONLOCAL
CALLUSED(11) = callescape(10)

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL } same as callescape(10)
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__f = { NONLOCAL }
_ZSt16__throw_bad_castv = { }
callescape(10) = { ESCAPED NONLOCAL }
CALLUSED(11) = { ESCAPED NONLOCAL } same as callescape(10)
CALLCLOBBERED(12) = { }
_ZSt13__check_facetISt5ctypeIcEERKT_PS3_ = { }


Alias information for std::__check_facet<std::ctype<char> >(std::ctype<char> const*)std::ctype<char> const&

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information

__f_1(D), points-to non-local, points-to NULL, points-to vars: { }

const struct ctype & std::__check_facet<std::ctype<char> > (const struct ctype * __f)
{
  <bb 2> :
  gimple_cond <eq_expr, __f_1(D), 0B, NULL, NULL>
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  gimple_call <__throw_bad_cast, NULL>

  <bb 4> :
  gimple_return <__f_1(D)>

}



;; Function std::basic_ios<char, std::char_traits<char> >::widen (_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc, funcdef_no=4312, decl_uid=43732, cgraph_uid=1791, symbol_order=2375)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__c = &NONLOCAL
_1 = *this + 1920
callescape(12) = NONLOCAL
CALLUSED(13) = callescape(12)
_11 = *_1 + 448
_12 = __c
_13 = *_1 + UNKNOWN
callescape(19) = NONLOCAL
CALLUSED(20) = callescape(19)
callarg(22) = _1
callarg(22) = callarg(22) + UNKNOWN
callarg(22) = *callarg(22) + UNKNOWN
CALLUSED(20) = callarg(22)
*callarg(22) = callescape(19)
CALLCLOBBERED(21) = callarg(22)
callescape(19) = callarg(22)
ESCAPED = _1
callarg(23) = __c
callarg(23) = callarg(23) + UNKNOWN
callarg(23) = *callarg(23) + UNKNOWN
CALLUSED(20) = callarg(23)
*callarg(23) = callescape(19)
CALLCLOBBERED(21) = callarg(23)
callescape(19) = callarg(23)
ESCAPED = __c
_14 = NONLOCAL
_14 = callarg(22)
_14 = callarg(23)
_15 = _13
_15 = _14

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as callescape(12)
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__c = { NONLOCAL } same as this
_1 = { ESCAPED NONLOCAL }
_ZSt16__throw_bad_castv = { }
callescape(12) = { ESCAPED NONLOCAL }
CALLUSED(13) = { ESCAPED NONLOCAL } same as callescape(12)
CALLCLOBBERED(14) = { }
_11 = { ESCAPED NONLOCAL }
_12 = { NONLOCAL } same as this
_13 = { ESCAPED NONLOCAL }
_ZNKSt5ctypeIcE5widenEc.part.0 = { }
callescape(19) = { ESCAPED NONLOCAL }
CALLUSED(20) = { ESCAPED NONLOCAL } same as callescape(19)
CALLCLOBBERED(21) = { ESCAPED NONLOCAL }
callarg(22) = { ESCAPED NONLOCAL }
callarg(23) = { ESCAPED NONLOCAL }
_14 = { ESCAPED NONLOCAL } same as callescape(19)
_15 = { ESCAPED NONLOCAL }
_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc = { }


Alias information for std::basic_ios<char, std::char_traits<char> >::widen(char) const

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
this_4(D), points-to non-local, points-to vars: { }

char_type std::basic_ios<char, std::char_traits<char> >::widen (const struct basic_ios * const this, char __c)
{
  const struct ctype & D.98446;
  char_type D.98444;
  const struct __ctype_type * _1;
  char _11;
  int _12;
  char _13;
  char _14;
  char _15;

  <bb 2> :
  gimple_assign <component_ref, _1, this_4(D)->_M_ctype, NULL, NULL>
  gimple_cond <eq_expr, _1, 0B, NULL, NULL>
    goto <bb 3>; [0.04%]
  else
    goto <bb 4>; [99.96%]

  <bb 3> :
  gimple_call <__throw_bad_cast, NULL>

  <bb 4> :
  gimple_assign <component_ref, _11, MEM[(const struct ctype *)_1]._M_widen_ok, NULL, NULL>
  gimple_cond <ne_expr, _11, 0, NULL, NULL>
    goto <bb 5>; [51.12%]
  else
    goto <bb 6>; [48.88%]

  <bb 5> :
  gimple_assign <nop_expr, _12, __c_7(D), NULL, NULL>
  gimple_assign <array_ref, _13, MEM[(const struct ctype *)_1]._M_widen[_12], NULL, NULL>
  goto <bb 7>; [100.00%]

  <bb 6> :
  gimple_call <_ZNKSt5ctypeIcE5widenEc.part.0, _14, _1, __c_7(D)>

  <bb 7> :
  # gimple_phi <_15, _13(5), _14(6)>
  gimple_return <_15>

}



;; Function std::endl<char, std::char_traits<char> > (_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, funcdef_no=4082, decl_uid=44686, cgraph_uid=1561, symbol_order=2137)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__os = &NONLOCAL
_1 = *__os
_3 = *_1 + -192
_4 = _3
_5 = __os + UNKNOWN
callescape(14) = NONLOCAL
CALLUSED(15) = callescape(14)
callarg(17) = _5
callarg(17) = callarg(17) + UNKNOWN
indircallarg(18) = *callarg(17) + UNKNOWN
indircallarg(18) = indircallarg(18) + UNKNOWN
indircallarg(18) = *indircallarg(18) + UNKNOWN
CALLUSED(15) = callarg(17)
CALLUSED(15) = indircallarg(18)
*indircallarg(18) = callescape(14)
CALLCLOBBERED(16) = indircallarg(18)
callescape(14) = indircallarg(18)
ESCAPED = *callarg(17) + UNKNOWN
callarg(19) = &NONLOCAL
callarg(19) = callarg(19) + UNKNOWN
callarg(19) = *callarg(19) + UNKNOWN
CALLUSED(15) = callarg(19)
*callarg(19) = callescape(14)
CALLCLOBBERED(16) = callarg(19)
callescape(14) = callarg(19)
ESCAPED = &NONLOCAL
_11 = NONLOCAL
_11 = indircallarg(18)
_11 = callarg(19)
callescape(22) = NONLOCAL
CALLUSED(23) = callescape(22)
callarg(25) = __os
callarg(25) = callarg(25) + UNKNOWN
callarg(25) = *callarg(25) + UNKNOWN
CALLUSED(23) = callarg(25)
*callarg(25) = callescape(22)
CALLCLOBBERED(24) = callarg(25)
callescape(22) = callarg(25)
ESCAPED = __os
callarg(26) = _11
callarg(26) = callarg(26) + UNKNOWN
callarg(26) = *callarg(26) + UNKNOWN
CALLUSED(23) = callarg(26)
*callarg(26) = callescape(22)
CALLCLOBBERED(24) = callarg(26)
callescape(22) = callarg(26)
ESCAPED = _11
_13 = NONLOCAL
_13 = callarg(25)
_13 = callarg(26)
callescape(29) = NONLOCAL
CALLUSED(30) = callescape(29)
callarg(32) = _13
callarg(32) = callarg(32) + UNKNOWN
callarg(32) = *callarg(32) + UNKNOWN
CALLUSED(30) = callarg(32)
*callarg(32) = callescape(29)
CALLCLOBBERED(31) = callarg(32)
callescape(29) = callarg(32)
ESCAPED = _13
_17 = NONLOCAL
_17 = callarg(32)

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__os = { NONLOCAL }
_1 = { ESCAPED NONLOCAL }
_3 = { ESCAPED NONLOCAL }
_4 = { ESCAPED NONLOCAL } same as _3
_5 = { NONLOCAL }
_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc = { }
callescape(14) = { ESCAPED NONLOCAL }
CALLUSED(15) = { ESCAPED NONLOCAL }
CALLCLOBBERED(16) = { ESCAPED NONLOCAL }
callarg(17) = { NONLOCAL }
indircallarg(18) = { ESCAPED NONLOCAL }
callarg(19) = { ESCAPED NONLOCAL }
_11 = { ESCAPED NONLOCAL } same as callescape(14)
_ZNSo3putEc = { }
callescape(22) = { ESCAPED NONLOCAL }
CALLUSED(23) = { ESCAPED NONLOCAL } same as callescape(22)
CALLCLOBBERED(24) = { ESCAPED NONLOCAL } same as callescape(22)
callarg(25) = { ESCAPED NONLOCAL }
callarg(26) = { ESCAPED NONLOCAL }
_13 = { ESCAPED NONLOCAL } same as callescape(22)
_ZNSo5flushEv = { }
callescape(29) = { ESCAPED NONLOCAL }
CALLUSED(30) = { ESCAPED NONLOCAL } same as callescape(29)
CALLCLOBBERED(31) = { ESCAPED NONLOCAL } same as callescape(29)
callarg(32) = { ESCAPED NONLOCAL } same as callescape(29)
_17 = { ESCAPED NONLOCAL } same as callescape(29)
_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_ = { }


Alias information for std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)std::basic_ostream<char, std::char_traits<char> >&

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_5, points-to non-local, points-to NULL, points-to vars: { }
__os_9(D), points-to non-local, points-to vars: { }
_13, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_17, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

struct basic_ostream & std::endl<char, std::char_traits<char> > (struct basic_ostream & __os)
{
  struct basic_ostream & D.98449;
  int (*__vtbl_ptr_type) () * _1;
  long int _3;
  sizetype _4;
  struct basic_ios * _5;
  char _11;
  struct basic_ostream & _13;
  struct basic_ostream & _17;

  <bb 2> :
  gimple_assign <component_ref, _1, __os_9(D)->_vptr.basic_ostream, NULL, NULL>
  gimple_assign <mem_ref, _3, MEM[(long int *)_1 + -24B], NULL, NULL>
  gimple_assign <nop_expr, _4, _3, NULL, NULL>
  gimple_assign <pointer_plus_expr, _5, __os_9(D), _4, NULL>
  gimple_call <widen, _11, _5, 10>
  gimple_call <put, _13, __os_9(D), _11>
  gimple_call <flush, _17, _13>
  gimple_return <_17>

}



;; Function std::basic_streambuf<char, std::char_traits<char> >::~basic_streambuf (_ZNSt15basic_streambufIcSt11char_traitsIcEED2Ev, funcdef_no=4444, decl_uid=39061, cgraph_uid=1923, symbol_order=2507)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_ZTVSt15basic_streambufIcSt11char_traitsIcEE = NONLOCAL
derefaddrtmp(10) = &_ZTVSt15basic_streambufIcSt11char_traitsIcEE
*this = derefaddrtmp(10)
_2 = this + UNKNOWN
callescape(13) = NONLOCAL
CALLUSED(14) = callescape(13)
callarg(16) = _2
callarg(16) = callarg(16) + UNKNOWN
callarg(16) = *callarg(16) + UNKNOWN
CALLUSED(14) = callarg(16)
*callarg(16) = callescape(13)
CALLCLOBBERED(15) = callarg(16)
callescape(13) = callarg(16)
ESCAPED = _2

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL _ZTVSt15basic_streambufIcSt11char_traitsIcEE }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
_ZTVSt15basic_streambufIcSt11char_traitsIcEE = { ESCAPED NONLOCAL }
this = { NONLOCAL }
derefaddrtmp(10) = { _ZTVSt15basic_streambufIcSt11char_traitsIcEE }
_2 = { NONLOCAL }
_ZNSt6localeD1Ev = { }
callescape(13) = { ESCAPED NONLOCAL }
CALLUSED(14) = { ESCAPED NONLOCAL } same as callescape(13)
CALLCLOBBERED(15) = { ESCAPED NONLOCAL } same as callarg(16)
callarg(16) = { ESCAPED NONLOCAL }


Alias information for std::basic_streambuf<char, std::char_traits<char> >::~basic_streambuf()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.39074 } (nonlocal, escaped, interposable)

Flow-insensitive points-to information

_2, points-to non-local, points-to NULL, points-to vars: { }
this_4(D), points-to non-local, points-to vars: { }

void std::basic_streambuf<char, std::char_traits<char> >::~basic_streambuf (struct basic_streambuf * const this)
{
  struct locale * _2;

  <bb 2> :
  gimple_assign <addr_expr, this_4(D)->_vptr.basic_streambuf, &MEM <int (*__vtbl_ptr_type) ()[16]> [(void *)&_ZTVSt15basic_streambufIcSt11char_traitsIcEE + 16B], NULL, NULL>
  gimple_assign <addr_expr, _2, &this_4(D)->_M_buf_locale, NULL, NULL>
  gimple_call <__dt_comp , NULL, _2>
  gimple_assign <constructor, *this_4(D), {CLOBBER}, NULL, NULL>
  gimple_return <NULL>

}



;; Function std::basic_filebuf<char, std::char_traits<char> >::~basic_filebuf (_ZNSt13basic_filebufIcSt11char_traitsIcEED2Ev, funcdef_no=4329, decl_uid=51360, cgraph_uid=1808, symbol_order=2392)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_ZTVSt13basic_filebufIcSt11char_traitsIcEE = NONLOCAL
derefaddrtmp(10) = &_ZTVSt13basic_filebufIcSt11char_traitsIcEE
*this = derefaddrtmp(10)
callescape(12) = NONLOCAL
CALLUSED(13) = callescape(12)
callarg(15) = this
callarg(15) = callarg(15) + UNKNOWN
callarg(15) = *callarg(15) + UNKNOWN
CALLUSED(13) = callarg(15)
*callarg(15) = callescape(12)
CALLCLOBBERED(14) = callarg(15)
callescape(12) = callarg(15)
ESCAPED = this
_3 = this + UNKNOWN
callescape(18) = NONLOCAL
CALLUSED(19) = callescape(18)
callarg(21) = _3
callarg(21) = callarg(21) + UNKNOWN
callarg(21) = *callarg(21) + UNKNOWN
CALLUSED(19) = callarg(21)
*callarg(21) = callescape(18)
CALLCLOBBERED(20) = callarg(21)
callescape(18) = callarg(21)
ESCAPED = _3
_4 = this + UNKNOWN
_ZTVSt15basic_streambufIcSt11char_traitsIcEE = NONLOCAL
derefaddrtmp(24) = &_ZTVSt15basic_streambufIcSt11char_traitsIcEE
*this = derefaddrtmp(24)
_15 = this + UNKNOWN
callescape(27) = NONLOCAL
CALLUSED(28) = callescape(27)
callarg(30) = _15
callarg(30) = callarg(30) + UNKNOWN
callarg(30) = *callarg(30) + UNKNOWN
CALLUSED(28) = callarg(30)
*callarg(30) = callescape(27)
CALLCLOBBERED(29) = callarg(30)
callescape(27) = callarg(30)
ESCAPED = _15
callescape(32) = &NONLOCAL
CALLUSED(33) = callescape(32)
callarg(35) = &NONLOCAL
callarg(35) = callarg(35) + UNKNOWN
callarg(35) = *callarg(35) + UNKNOWN
CALLUSED(33) = callarg(35)
_2 = &NONLOCAL
_2 = callarg(35)
callescape(38) = NONLOCAL
CALLUSED(39) = callescape(38)
callarg(41) = _2
callarg(41) = callarg(41) + UNKNOWN
callarg(41) = *callarg(41) + UNKNOWN
CALLUSED(39) = callarg(41)
*callarg(41) = callescape(38)
CALLCLOBBERED(40) = callarg(41)
callescape(38) = callarg(41)
ESCAPED = _2
callescape(43) = NONLOCAL
CALLUSED(44) = callescape(43)

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL _ZTVSt13basic_filebufIcSt11char_traitsIcEE _ZTVSt15basic_streambufIcSt11char_traitsIcEE }
NONLOCAL = { ESCAPED NONLOCAL } same as callescape(43)
STOREDANYTHING = { }
INTEGER = { ANYTHING }
_ZTVSt13basic_filebufIcSt11char_traitsIcEE = { ESCAPED NONLOCAL }
_ZTVSt15basic_streambufIcSt11char_traitsIcEE = { ESCAPED NONLOCAL }
this = { NONLOCAL }
derefaddrtmp(10) = { _ZTVSt13basic_filebufIcSt11char_traitsIcEE }
_ZNSt13basic_filebufIcSt11char_traitsIcEE5closeEv = { }
callescape(12) = { ESCAPED NONLOCAL }
CALLUSED(13) = { ESCAPED NONLOCAL } same as callescape(12)
CALLCLOBBERED(14) = { ESCAPED NONLOCAL } same as callarg(15)
callarg(15) = { ESCAPED NONLOCAL }
_3 = { NONLOCAL }
_ZNSt12__basic_fileIcED1Ev = { }
callescape(18) = { ESCAPED NONLOCAL }
CALLUSED(19) = { ESCAPED NONLOCAL } same as callescape(18)
CALLCLOBBERED(20) = { ESCAPED NONLOCAL } same as callarg(21)
callarg(21) = { ESCAPED NONLOCAL }
_4 = { NONLOCAL }
derefaddrtmp(24) = { _ZTVSt15basic_streambufIcSt11char_traitsIcEE }
_15 = { NONLOCAL }
_ZNSt6localeD1Ev = { }
callescape(27) = { ESCAPED NONLOCAL }
CALLUSED(28) = { ESCAPED NONLOCAL } same as callescape(27)
CALLCLOBBERED(29) = { ESCAPED NONLOCAL } same as callarg(30)
callarg(30) = { ESCAPED NONLOCAL }
__builtin_eh_pointer = { }
callescape(32) = { NONLOCAL } same as this
CALLUSED(33) = { ESCAPED NONLOCAL }
CALLCLOBBERED(34) = { }
callarg(35) = { ESCAPED NONLOCAL } same as CALLUSED(33)
_2 = { ESCAPED NONLOCAL } same as CALLUSED(33)
__cxa_begin_catch = { }
callescape(38) = { ESCAPED NONLOCAL }
CALLUSED(39) = { ESCAPED NONLOCAL } same as callescape(38)
CALLCLOBBERED(40) = { ESCAPED NONLOCAL } same as callarg(41)
callarg(41) = { ESCAPED NONLOCAL }
__cxa_end_catch = { }
callescape(43) = { ESCAPED NONLOCAL }
CALLUSED(44) = { ESCAPED NONLOCAL } same as callescape(43)
CALLCLOBBERED(45) = { }


Alias information for std::basic_filebuf<char, std::char_traits<char> >::~basic_filebuf()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.39074 D.51386 } (nonlocal, escaped, interposable)

Flow-insensitive points-to information

_2, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_3, points-to non-local, points-to NULL, points-to vars: { }
_4, points-to non-local, points-to NULL, points-to vars: { }
this_7(D), points-to non-local, points-to vars: { }
_15, points-to non-local, points-to NULL, points-to vars: { }

void std::basic_filebuf<char, std::char_traits<char> >::~basic_filebuf (struct basic_filebuf * const this)
{
  void * _2;
  struct __file_type * _3;
  struct basic_streambuf * _4;
  struct locale * _15;

  <bb 2> :
  gimple_assign <addr_expr, this_7(D)->D.51363._vptr.basic_streambuf, &MEM <int (*__vtbl_ptr_type) ()[16]> [(void *)&_ZTVSt13basic_filebufIcSt11char_traitsIcEE + 16B], NULL, NULL>
  gimple_call <close, NULL, this_7(D)>

  <bb 3> :
  gimple_assign <addr_expr, _3, &this_7(D)->_M_file, NULL, NULL>
  gimple_call <__dt_comp , NULL, _3>
  gimple_assign <addr_expr, _4, &this_7(D)->D.51363, NULL, NULL>
  gimple_assign <addr_expr, MEM[(struct basic_streambuf *)this_7(D)]._vptr.basic_streambuf, &MEM <int (*__vtbl_ptr_type) ()[16]> [(void *)&_ZTVSt15basic_streambufIcSt11char_traitsIcEE + 16B], NULL, NULL>
  gimple_assign <addr_expr, _15, &MEM[(struct basic_streambuf *)this_7(D)]._M_buf_locale, NULL, NULL>
  gimple_call <__dt_comp , NULL, _15>
  gimple_assign <constructor, MEM[(struct basic_streambuf *)this_7(D)], {CLOBBER}, NULL, NULL>
  gimple_assign <constructor, *this_7(D), {CLOBBER}, NULL, NULL>
  gimple_return <NULL>

  <bb 4> :
gimple_label <<L2>>
  gimple_eh_dispatch <2>

  <bb 5> :
gimple_label <<L3>>
  gimple_call <__builtin_eh_pointer, _2, 2>
  gimple_call <__cxa_begin_catch, NULL, _2>
  gimple_call <__cxa_end_catch, NULL>
  goto <bb 3>; [INV]

}



;; Function std::basic_ofstream<char, std::char_traits<char> >::basic_ofstream (_ZNSt14basic_ofstreamIcSt11char_traitsIcEEC1ERKNSt7__cxx1112basic_stringIcS1_SaIcEEESt13_Ios_Openmode, funcdef_no=4087, decl_uid=51681, cgraph_uid=1566, symbol_order=2142)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &PARM_NOALIAS(9)
PARM_NOALIAS(9) = &NONLOCAL
__s = &NONLOCAL
__mode = &NONLOCAL
_1 = this + UNKNOWN
_37 = this + UNKNOWN
callescape(15) = NONLOCAL
CALLUSED(16) = callescape(15)
callarg(18) = _37
callarg(18) = callarg(18) + UNKNOWN
callarg(18) = *callarg(18) + UNKNOWN
CALLUSED(16) = callarg(18)
*callarg(18) = callescape(15)
CALLCLOBBERED(17) = callarg(18)
callescape(15) = callarg(18)
ESCAPED = _37
_ZTVSt9basic_iosIcSt11char_traitsIcEE = NONLOCAL
derefaddrtmp(20) = &_ZTVSt9basic_iosIcSt11char_traitsIcEE
*this + 2048 = derefaddrtmp(20)
derefaddrtmp(21) = &NULL
*this + 3776 = derefaddrtmp(21)
derefaddrtmp(22) = &NULL
*this + 3840 = derefaddrtmp(22)
derefaddrtmp(23) = &NULL
*this + 3848 = derefaddrtmp(23)
derefaddrtmp(24) = &NULL
*this + 3904 = derefaddrtmp(24)
derefaddrtmp(25) = &NULL
*this + 3968 = derefaddrtmp(25)
derefaddrtmp(26) = &NULL
*this + 4032 = derefaddrtmp(26)
derefaddrtmp(27) = &NULL
*this + 4096 = derefaddrtmp(27)
_2 = this + UNKNOWN
_ZTTSt14basic_ofstreamIcSt11char_traitsIcEE = NONLOCAL
_32 = _ZTTSt14basic_ofstreamIcSt11char_traitsIcEE
*this = _32
_33 = *_32 + -192
_34 = _33
_35 = _2 + UNKNOWN
_36 = _ZTTSt14basic_ofstreamIcSt11char_traitsIcEE
*_35 = _36
callescape(36) = NONLOCAL
CALLUSED(37) = callescape(36)
callarg(39) = _35
callarg(39) = callarg(39) + UNKNOWN
callarg(39) = *callarg(39) + UNKNOWN
CALLUSED(37) = callarg(39)
*callarg(39) = callescape(36)
CALLCLOBBERED(38) = callarg(39)
callescape(36) = callarg(39)
ESCAPED = _35
callarg(40) = &NULL
callarg(40) = callarg(40) + UNKNOWN
callarg(40) = *callarg(40) + UNKNOWN
CALLUSED(37) = callarg(40)
*callarg(40) = callescape(36)
CALLCLOBBERED(38) = callarg(40)
callescape(36) = callarg(40)
ESCAPED = &NULL
_ZTVSt14basic_ofstreamIcSt11char_traitsIcEE = NONLOCAL
derefaddrtmp(42) = &_ZTVSt14basic_ofstreamIcSt11char_traitsIcEE
*this = derefaddrtmp(42)
derefaddrtmp(43) = &_ZTVSt14basic_ofstreamIcSt11char_traitsIcEE
*this + 2048 = derefaddrtmp(43)
_7 = this + UNKNOWN
callescape(46) = NONLOCAL
CALLUSED(47) = callescape(46)
callarg(49) = _7
callarg(49) = callarg(49) + UNKNOWN
callarg(49) = *callarg(49) + UNKNOWN
CALLUSED(47) = callarg(49)
*callarg(49) = callescape(46)
CALLCLOBBERED(48) = callarg(49)
callescape(46) = callarg(49)
ESCAPED = _7
_8 = this + 2048
_9 = this + UNKNOWN
callescape(52) = NONLOCAL
CALLUSED(53) = callescape(52)
callarg(55) = _8
callarg(55) = callarg(55) + UNKNOWN
callarg(55) = *callarg(55) + UNKNOWN
CALLUSED(53) = callarg(55)
*callarg(55) = callescape(52)
CALLCLOBBERED(54) = callarg(55)
callescape(52) = callarg(55)
ESCAPED = _8
callarg(56) = _9
callarg(56) = callarg(56) + UNKNOWN
callarg(56) = *callarg(56) + UNKNOWN
CALLUSED(53) = callarg(56)
*callarg(56) = callescape(52)
CALLCLOBBERED(54) = callarg(56)
callescape(52) = callarg(56)
ESCAPED = _9
callescape(58) = NONLOCAL
CALLUSED(59) = callescape(58)
callarg(61) = this
callarg(61) = callarg(61) + UNKNOWN
callarg(61) = *callarg(61) + UNKNOWN
CALLUSED(59) = callarg(61)
*callarg(61) = callescape(58)
CALLCLOBBERED(60) = callarg(61)
callescape(58) = callarg(61)
ESCAPED = this
callarg(62) = __s
callarg(62) = callarg(62) + UNKNOWN
indircallarg(63) = *callarg(62) + UNKNOWN
indircallarg(63) = indircallarg(63) + UNKNOWN
indircallarg(63) = *indircallarg(63) + UNKNOWN
CALLUSED(59) = callarg(62)
CALLUSED(59) = indircallarg(63)
*indircallarg(63) = callescape(58)
CALLCLOBBERED(60) = indircallarg(63)
callescape(58) = indircallarg(63)
ESCAPED = *callarg(62) + UNKNOWN
callarg(64) = __mode
callarg(64) = callarg(64) + UNKNOWN
callarg(64) = *callarg(64) + UNKNOWN
CALLUSED(59) = callarg(64)
*callarg(64) = callescape(58)
CALLCLOBBERED(60) = callarg(64)
callescape(58) = callarg(64)
ESCAPED = __mode
_10 = this + UNKNOWN
callescape(67) = NONLOCAL
CALLUSED(68) = callescape(67)
callarg(70) = _10
callarg(70) = callarg(70) + UNKNOWN
callarg(70) = *callarg(70) + UNKNOWN
CALLUSED(68) = callarg(70)
*callarg(70) = callescape(67)
CALLCLOBBERED(69) = callarg(70)
callescape(67) = callarg(70)
ESCAPED = _10
_11 = this + UNKNOWN
_38 = _ZTTSt14basic_ofstreamIcSt11char_traitsIcEE
*this = _38
_39 = *_38 + -192
_40 = _39
_41 = _11 + UNKNOWN
_42 = _ZTTSt14basic_ofstreamIcSt11char_traitsIcEE
*_41 = _42
_13 = this + UNKNOWN
derefaddrtmp(78) = &_ZTVSt9basic_iosIcSt11char_traitsIcEE
*this + 2048 = derefaddrtmp(78)
_43 = this + UNKNOWN
callescape(81) = NONLOCAL
CALLUSED(82) = callescape(81)
callarg(84) = _43
callarg(84) = callarg(84) + UNKNOWN
callarg(84) = *callarg(84) + UNKNOWN
CALLUSED(82) = callarg(84)
*callarg(84) = callescape(81)
CALLCLOBBERED(83) = callarg(84)
callescape(81) = callarg(84)
ESCAPED = _43

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL PARM_NOALIAS(9) _ZTVSt9basic_iosIcSt11char_traitsIcEE _ZTVSt14basic_ofstreamIcSt11char_traitsIcEE }
NONLOCAL = { ESCAPED NONLOCAL } same as _ZTTSt14basic_ofstreamIcSt11char_traitsIcEE
STOREDANYTHING = { }
INTEGER = { ANYTHING }
PARM_NOALIAS(9) = { ESCAPED NONLOCAL }
_ZTVSt9basic_iosIcSt11char_traitsIcEE = { ESCAPED NONLOCAL }
_ZTVSt14basic_ofstreamIcSt11char_traitsIcEE = { ESCAPED NONLOCAL }
this = { PARM_NOALIAS(9) }
__s = { NONLOCAL }
__mode = { NONLOCAL } same as __s
_1 = { PARM_NOALIAS(9) }
_37 = { PARM_NOALIAS(9) }
_ZNSt8ios_baseC2Ev = { }
callescape(15) = { ESCAPED NONLOCAL PARM_NOALIAS(9) }
CALLUSED(16) = { ESCAPED NONLOCAL PARM_NOALIAS(9) } same as callescape(15)
CALLCLOBBERED(17) = { ESCAPED NONLOCAL PARM_NOALIAS(9) } same as callarg(18)
callarg(18) = { ESCAPED NONLOCAL PARM_NOALIAS(9) }
derefaddrtmp(20) = { _ZTVSt9basic_iosIcSt11char_traitsIcEE }
derefaddrtmp(21) = { NULL }
derefaddrtmp(22) = { NULL } same as derefaddrtmp(21)
derefaddrtmp(23) = { NULL } same as derefaddrtmp(21)
derefaddrtmp(24) = { NULL } same as derefaddrtmp(21)
derefaddrtmp(25) = { NULL } same as derefaddrtmp(21)
derefaddrtmp(26) = { NULL } same as derefaddrtmp(21)
derefaddrtmp(27) = { NULL } same as derefaddrtmp(21)
_2 = { PARM_NOALIAS(9) }
_32 = { ESCAPED NONLOCAL } same as _ZTTSt14basic_ofstreamIcSt11char_traitsIcEE
_ZTTSt14basic_ofstreamIcSt11char_traitsIcEE = { ESCAPED NONLOCAL }
_33 = { ESCAPED NONLOCAL }
_34 = { ESCAPED NONLOCAL } same as _33
_35 = { PARM_NOALIAS(9) }
_36 = { ESCAPED NONLOCAL } same as _ZTTSt14basic_ofstreamIcSt11char_traitsIcEE
_ZNSt9basic_iosIcSt11char_traitsIcEE4initEPSt15basic_streambufIcS1_E = { }
callescape(36) = { NULL ESCAPED NONLOCAL PARM_NOALIAS(9) }
CALLUSED(37) = { NULL ESCAPED NONLOCAL PARM_NOALIAS(9) } same as callescape(36)
CALLCLOBBERED(38) = { NULL ESCAPED NONLOCAL PARM_NOALIAS(9) }
callarg(39) = { ESCAPED NONLOCAL PARM_NOALIAS(9) }
callarg(40) = { NULL }
derefaddrtmp(42) = { _ZTVSt14basic_ofstreamIcSt11char_traitsIcEE }
derefaddrtmp(43) = { _ZTVSt14basic_ofstreamIcSt11char_traitsIcEE } same as derefaddrtmp(42)
_7 = { PARM_NOALIAS(9) }
_ZNSt13basic_filebufIcSt11char_traitsIcEEC1Ev = { }
callescape(46) = { ESCAPED NONLOCAL PARM_NOALIAS(9) }
CALLUSED(47) = { ESCAPED NONLOCAL PARM_NOALIAS(9) } same as callescape(46)
CALLCLOBBERED(48) = { ESCAPED NONLOCAL PARM_NOALIAS(9) } same as callarg(49)
callarg(49) = { ESCAPED NONLOCAL PARM_NOALIAS(9) }
_8 = { PARM_NOALIAS(9) }
_9 = { PARM_NOALIAS(9) }
callescape(52) = { ESCAPED NONLOCAL PARM_NOALIAS(9) }
CALLUSED(53) = { ESCAPED NONLOCAL PARM_NOALIAS(9) } same as callescape(52)
CALLCLOBBERED(54) = { ESCAPED NONLOCAL PARM_NOALIAS(9) }
callarg(55) = { ESCAPED NONLOCAL PARM_NOALIAS(9) }
callarg(56) = { ESCAPED NONLOCAL PARM_NOALIAS(9) }
_ZNSt14basic_ofstreamIcSt11char_traitsIcEE4openERKNSt7__cxx1112basic_stringIcS1_SaIcEEESt13_Ios_Openmode = { }
callescape(58) = { ESCAPED NONLOCAL PARM_NOALIAS(9) }
CALLUSED(59) = { ESCAPED NONLOCAL PARM_NOALIAS(9) }
CALLCLOBBERED(60) = { ESCAPED NONLOCAL PARM_NOALIAS(9) }
callarg(61) = { ESCAPED NONLOCAL PARM_NOALIAS(9) }
callarg(62) = { NONLOCAL }
indircallarg(63) = { ESCAPED NONLOCAL }
callarg(64) = { ESCAPED NONLOCAL }
_10 = { PARM_NOALIAS(9) }
_ZNSt13basic_filebufIcSt11char_traitsIcEED1Ev = { }
callescape(67) = { ESCAPED NONLOCAL PARM_NOALIAS(9) }
CALLUSED(68) = { ESCAPED NONLOCAL PARM_NOALIAS(9) } same as callescape(67)
CALLCLOBBERED(69) = { ESCAPED NONLOCAL PARM_NOALIAS(9) } same as callarg(70)
callarg(70) = { ESCAPED NONLOCAL PARM_NOALIAS(9) }
_11 = { PARM_NOALIAS(9) }
_38 = { ESCAPED NONLOCAL } same as _ZTTSt14basic_ofstreamIcSt11char_traitsIcEE
_39 = { ESCAPED NONLOCAL }
_40 = { ESCAPED NONLOCAL } same as _39
_41 = { PARM_NOALIAS(9) }
_42 = { ESCAPED NONLOCAL } same as _ZTTSt14basic_ofstreamIcSt11char_traitsIcEE
_13 = { PARM_NOALIAS(9) }
derefaddrtmp(78) = { _ZTVSt9basic_iosIcSt11char_traitsIcEE } same as derefaddrtmp(20)
_43 = { PARM_NOALIAS(9) }
_ZNSt8ios_baseD2Ev = { }
callescape(81) = { ESCAPED NONLOCAL PARM_NOALIAS(9) }
CALLUSED(82) = { ESCAPED NONLOCAL PARM_NOALIAS(9) } same as callescape(81)
CALLCLOBBERED(83) = { ESCAPED NONLOCAL PARM_NOALIAS(9) } same as callarg(84)
callarg(84) = { ESCAPED NONLOCAL PARM_NOALIAS(9) }


Alias information for std::basic_ofstream<char, std::char_traits<char> >::basic_ofstream(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.43805 D.51730 D.98460 } (nonlocal, escaped, restrict, interposable)

Flow-insensitive points-to information

_1, points-to NULL, points-to vars: { D.98460 } (nonlocal, escaped, restrict)
_2, points-to NULL, points-to vars: { D.98460 } (nonlocal, escaped, restrict)
_7, points-to NULL, points-to vars: { D.98460 } (nonlocal, escaped, restrict)
_8, points-to NULL, points-to vars: { D.98460 } (nonlocal, escaped, restrict)
_9, points-to NULL, points-to vars: { D.98460 } (nonlocal, escaped, restrict)
_10, points-to NULL, points-to vars: { D.98460 } (nonlocal, escaped, restrict)
_11, points-to NULL, points-to vars: { D.98460 } (nonlocal, escaped, restrict)
_13, points-to NULL, points-to vars: { D.98460 } (nonlocal, escaped, restrict)
this_18(D), points-to vars: { D.98460 } (nonlocal, escaped, restrict)
__s_26(D), points-to non-local, points-to vars: { }
_32, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_35, points-to NULL, points-to vars: { D.98460 } (nonlocal, escaped, restrict)
_36, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_37, points-to NULL, points-to vars: { D.98460 } (nonlocal, escaped, restrict)
_38, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_41, points-to NULL, points-to vars: { D.98460 } (nonlocal, escaped, restrict)
_42, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_43, points-to NULL, points-to vars: { D.98460 } (nonlocal, escaped, restrict)

void std::basic_ofstream<char, std::char_traits<char> >::basic_ofstream (struct basic_ofstream * const this, const struct string & __s, openmode __mode)
{
  struct basic_ios * _1;
  struct basic_ostream * _2;
  struct __filebuf_type * _7;
  struct basic_ios * _8;
  struct basic_streambuf * _9;
  struct __filebuf_type * _10;
  struct basic_ostream * _11;
  struct basic_ios * _13;
  const void * _32;
  long int _33;
  sizetype _34;
  struct basic_ostream * _35;
  const void * _36;
  struct ios_base * _37;
  const void * _38;
  long int _39;
  sizetype _40;
  struct basic_ostream * _41;
  const void * _42;
  struct ios_base * _43;

  <bb 2> :
  gimple_assign <constructor, *this_18(D), {CLOBBER}, NULL, NULL>
  gimple_assign <addr_expr, _1, &this_18(D)->D.51729, NULL, NULL>
  gimple_assign <constructor, MEM[(struct basic_ios *)this_18(D) + 256B], {CLOBBER}, NULL, NULL>
  gimple_assign <addr_expr, _37, &MEM[(struct basic_ios *)this_18(D) + 256B].D.43795, NULL, NULL>
  gimple_call <__ct_base , NULL, _37>
  gimple_assign <addr_expr, MEM[(struct basic_ios *)this_18(D) + 256B].D.43795._vptr.ios_base, &MEM <int (*__vtbl_ptr_type) ()[4]> [(void *)&_ZTVSt9basic_iosIcSt11char_traitsIcEE + 16B], NULL, NULL>
  gimple_assign <integer_cst, MEM[(struct basic_ios *)this_18(D) + 256B]._M_tie, 0B, NULL, NULL>
  gimple_assign <integer_cst, MEM[(struct basic_ios *)this_18(D) + 256B]._M_fill, 0, NULL, NULL>
  gimple_assign <integer_cst, MEM[(struct basic_ios *)this_18(D) + 256B]._M_fill_init, 0, NULL, NULL>
  gimple_assign <integer_cst, MEM[(struct basic_ios *)this_18(D) + 256B]._M_streambuf, 0B, NULL, NULL>
  gimple_assign <integer_cst, MEM[(struct basic_ios *)this_18(D) + 256B]._M_ctype, 0B, NULL, NULL>
  gimple_assign <integer_cst, MEM[(struct basic_ios *)this_18(D) + 256B]._M_num_put, 0B, NULL, NULL>
  gimple_assign <integer_cst, MEM[(struct basic_ios *)this_18(D) + 256B]._M_num_get, 0B, NULL, NULL>
  gimple_assign <addr_expr, _2, &this_18(D)->D.51725, NULL, NULL>
  gimple_assign <mem_ref, _32, MEM[(const void * *)&_ZTTSt14basic_ofstreamIcSt11char_traitsIcEE + 8B], NULL, NULL>
  gimple_assign <ssa_name, MEM[(struct basic_ostream *)this_18(D)]._vptr.basic_ostream, _32, NULL, NULL>
  gimple_assign <mem_ref, _33, MEM[(long int *)_32 + -24B], NULL, NULL>
  gimple_assign <nop_expr, _34, _33, NULL, NULL>
  gimple_assign <pointer_plus_expr, _35, _2, _34, NULL>
  gimple_assign <mem_ref, _36, MEM[(const void * *)&_ZTTSt14basic_ofstreamIcSt11char_traitsIcEE + 16B], NULL, NULL>
  gimple_assign <ssa_name, MEM[(struct basic_ios *)_35].D.43795._vptr.ios_base, _36, NULL, NULL>
  gimple_call <init, NULL, _35, 0B>

  <bb 3> :
  gimple_assign <addr_expr, *this_18(D).D.51725._vptr.basic_ostream, &MEM <int (*__vtbl_ptr_type) ()[10]> [(void *)&_ZTVSt14basic_ofstreamIcSt11char_traitsIcEE + 24B], NULL, NULL>
  gimple_assign <addr_expr, MEM[(struct basic_ios *)this_18(D) + 256B].D.43795._vptr.ios_base, &MEM <int (*__vtbl_ptr_type) ()[10]> [(void *)&_ZTVSt14basic_ofstreamIcSt11char_traitsIcEE + 64B], NULL, NULL>
  gimple_assign <addr_expr, _7, &this_18(D)->_M_filebuf, NULL, NULL>
  gimple_call <__ct_comp , NULL, _7>

  <bb 4> :
  gimple_assign <pointer_plus_expr, _8, this_18(D), 256, NULL>
  gimple_assign <addr_expr, _9, &this_18(D)->_M_filebuf.D.51363, NULL, NULL>
  gimple_call <init, NULL, _8, _9>

  <bb 5> :
  gimple_call <open, NULL, this_18(D), __s_26(D), __mode_27(D)>

  <bb 6> :
  gimple_return <NULL>

  <bb 7> :
gimple_label <<L0>>
  gimple_assign <addr_expr, _10, &this_18(D)->_M_filebuf, NULL, NULL>
  gimple_call <__dt_comp , NULL, _10>
  gimple_resx <3>

  <bb 8> :
gimple_label <<L1>>
  gimple_assign <addr_expr, _11, &this_18(D)->D.51725, NULL, NULL>
  gimple_assign <mem_ref, _38, MEM[(const void * *)&_ZTTSt14basic_ofstreamIcSt11char_traitsIcEE + 8B], NULL, NULL>
  gimple_assign <ssa_name, MEM[(struct basic_ostream *)this_18(D)]._vptr.basic_ostream, _38, NULL, NULL>
  gimple_assign <mem_ref, _39, MEM[(long int *)_38 + -24B], NULL, NULL>
  gimple_assign <nop_expr, _40, _39, NULL, NULL>
  gimple_assign <pointer_plus_expr, _41, _11, _40, NULL>
  gimple_assign <mem_ref, _42, MEM[(const void * *)&_ZTTSt14basic_ofstreamIcSt11char_traitsIcEE + 16B], NULL, NULL>
  gimple_assign <ssa_name, MEM[(struct basic_ios *)_41].D.43795._vptr.ios_base, _42, NULL, NULL>
  gimple_resx <2>

  <bb 9> :
gimple_label <<L2>>
  gimple_assign <addr_expr, _13, &this_18(D)->D.51729, NULL, NULL>
  gimple_assign <addr_expr, MEM[(struct basic_ios *)this_18(D) + 256B].D.43795._vptr.ios_base, &MEM <int (*__vtbl_ptr_type) ()[4]> [(void *)&_ZTVSt9basic_iosIcSt11char_traitsIcEE + 16B], NULL, NULL>
  gimple_assign <addr_expr, _43, &MEM[(struct basic_ios *)this_18(D) + 256B].D.43795, NULL, NULL>
  gimple_call <__dt_base , NULL, _43>
  gimple_assign <constructor, MEM[(struct basic_ios *)this_18(D) + 256B], {CLOBBER}, NULL, NULL>
  gimple_resx <1>

}



;; Function std::basic_ofstream<char, std::char_traits<char> >::~basic_ofstream (_ZNSt14basic_ofstreamIcSt11char_traitsIcEED1Ev, funcdef_no=4090, decl_uid=51717, cgraph_uid=1569, symbol_order=2145)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_ZTVSt14basic_ofstreamIcSt11char_traitsIcEE = NONLOCAL
derefaddrtmp(10) = &_ZTVSt14basic_ofstreamIcSt11char_traitsIcEE
*this = derefaddrtmp(10)
derefaddrtmp(11) = &_ZTVSt14basic_ofstreamIcSt11char_traitsIcEE
*this + 2048 = derefaddrtmp(11)
_4 = this + UNKNOWN
callescape(14) = NONLOCAL
CALLUSED(15) = callescape(14)
callarg(17) = _4
callarg(17) = callarg(17) + UNKNOWN
callarg(17) = *callarg(17) + UNKNOWN
CALLUSED(15) = callarg(17)
*callarg(17) = callescape(14)
CALLCLOBBERED(16) = callarg(17)
callescape(14) = callarg(17)
ESCAPED = _4
_5 = this + UNKNOWN
_ZTTSt14basic_ofstreamIcSt11char_traitsIcEE = NONLOCAL
_17 = _ZTTSt14basic_ofstreamIcSt11char_traitsIcEE
*this = _17
_18 = *_17 + -192
_19 = _18
_20 = _5 + UNKNOWN
_21 = _ZTTSt14basic_ofstreamIcSt11char_traitsIcEE
*_20 = _21
_7 = this + UNKNOWN
_ZTVSt9basic_iosIcSt11char_traitsIcEE = NONLOCAL
derefaddrtmp(27) = &_ZTVSt9basic_iosIcSt11char_traitsIcEE
*this + 2048 = derefaddrtmp(27)
_16 = this + UNKNOWN
callescape(30) = NONLOCAL
CALLUSED(31) = callescape(30)
callarg(33) = _16
callarg(33) = callarg(33) + UNKNOWN
callarg(33) = *callarg(33) + UNKNOWN
CALLUSED(31) = callarg(33)
*callarg(33) = callescape(30)
CALLCLOBBERED(32) = callarg(33)
callescape(30) = callarg(33)
ESCAPED = _16

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL _ZTVSt14basic_ofstreamIcSt11char_traitsIcEE _ZTVSt9basic_iosIcSt11char_traitsIcEE }
NONLOCAL = { ESCAPED NONLOCAL } same as _ZTTSt14basic_ofstreamIcSt11char_traitsIcEE
STOREDANYTHING = { }
INTEGER = { ANYTHING }
_ZTVSt14basic_ofstreamIcSt11char_traitsIcEE = { ESCAPED NONLOCAL }
_ZTVSt9basic_iosIcSt11char_traitsIcEE = { ESCAPED NONLOCAL }
this = { NONLOCAL }
derefaddrtmp(10) = { _ZTVSt14basic_ofstreamIcSt11char_traitsIcEE }
derefaddrtmp(11) = { _ZTVSt14basic_ofstreamIcSt11char_traitsIcEE } same as derefaddrtmp(10)
_4 = { NONLOCAL }
_ZNSt13basic_filebufIcSt11char_traitsIcEED1Ev = { }
callescape(14) = { ESCAPED NONLOCAL }
CALLUSED(15) = { ESCAPED NONLOCAL } same as callescape(14)
CALLCLOBBERED(16) = { ESCAPED NONLOCAL } same as callarg(17)
callarg(17) = { ESCAPED NONLOCAL }
_5 = { NONLOCAL }
_17 = { ESCAPED NONLOCAL } same as _ZTTSt14basic_ofstreamIcSt11char_traitsIcEE
_ZTTSt14basic_ofstreamIcSt11char_traitsIcEE = { ESCAPED NONLOCAL }
_18 = { ESCAPED NONLOCAL }
_19 = { ESCAPED NONLOCAL } same as _18
_20 = { NONLOCAL }
_21 = { ESCAPED NONLOCAL } same as _ZTTSt14basic_ofstreamIcSt11char_traitsIcEE
_7 = { NONLOCAL }
derefaddrtmp(27) = { _ZTVSt9basic_iosIcSt11char_traitsIcEE }
_16 = { NONLOCAL }
_ZNSt8ios_baseD2Ev = { }
callescape(30) = { ESCAPED NONLOCAL }
CALLUSED(31) = { ESCAPED NONLOCAL } same as callescape(30)
CALLCLOBBERED(32) = { ESCAPED NONLOCAL } same as callarg(33)
callarg(33) = { ESCAPED NONLOCAL }


Alias information for std::basic_ofstream<char, std::char_traits<char> >::~basic_ofstream()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.43805 D.51730 } (nonlocal, escaped, interposable)

Flow-insensitive points-to information

_4, points-to non-local, points-to NULL, points-to vars: { }
_5, points-to non-local, points-to NULL, points-to vars: { }
_7, points-to non-local, points-to NULL, points-to vars: { }
this_9(D), points-to non-local, points-to vars: { }
_16, points-to non-local, points-to NULL, points-to vars: { }
_17, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_20, points-to non-local, points-to NULL, points-to vars: { }
_21, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

void std::basic_ofstream<char, std::char_traits<char> >::~basic_ofstream (struct basic_ofstream * const this)
{
  struct __filebuf_type * _4;
  struct basic_ostream * _5;
  struct basic_ios * _7;
  struct ios_base * _16;
  const void * _17;
  long int _18;
  sizetype _19;
  struct basic_ostream * _20;
  const void * _21;

  <bb 2> :
  gimple_assign <addr_expr, this_9(D)->D.51725._vptr.basic_ostream, &MEM <int (*__vtbl_ptr_type) ()[10]> [(void *)&_ZTVSt14basic_ofstreamIcSt11char_traitsIcEE + 24B], NULL, NULL>
  gimple_assign <addr_expr, MEM[(struct basic_ios *)this_9(D) + 256B].D.43795._vptr.ios_base, &MEM <int (*__vtbl_ptr_type) ()[10]> [(void *)&_ZTVSt14basic_ofstreamIcSt11char_traitsIcEE + 64B], NULL, NULL>
  gimple_assign <addr_expr, _4, &this_9(D)->_M_filebuf, NULL, NULL>
  gimple_call <__dt_comp , NULL, _4>
  gimple_assign <addr_expr, _5, &this_9(D)->D.51725, NULL, NULL>
  gimple_assign <mem_ref, _17, MEM[(const void * *)&_ZTTSt14basic_ofstreamIcSt11char_traitsIcEE + 8B], NULL, NULL>
  gimple_assign <ssa_name, MEM[(struct basic_ostream *)this_9(D)]._vptr.basic_ostream, _17, NULL, NULL>
  gimple_assign <mem_ref, _18, MEM[(long int *)_17 + -24B], NULL, NULL>
  gimple_assign <nop_expr, _19, _18, NULL, NULL>
  gimple_assign <pointer_plus_expr, _20, _5, _19, NULL>
  gimple_assign <mem_ref, _21, MEM[(const void * *)&_ZTTSt14basic_ofstreamIcSt11char_traitsIcEE + 16B], NULL, NULL>
  gimple_assign <ssa_name, MEM[(struct basic_ios *)_20].D.43795._vptr.ios_base, _21, NULL, NULL>
  gimple_assign <addr_expr, _7, &this_9(D)->D.51729, NULL, NULL>
  gimple_assign <addr_expr, MEM[(struct basic_ios *)this_9(D) + 256B].D.43795._vptr.ios_base, &MEM <int (*__vtbl_ptr_type) ()[4]> [(void *)&_ZTVSt9basic_iosIcSt11char_traitsIcEE + 16B], NULL, NULL>
  gimple_assign <addr_expr, _16, &MEM[(struct basic_ios *)this_9(D) + 256B].D.43795, NULL, NULL>
  gimple_call <__dt_base , NULL, _16>
  gimple_assign <constructor, MEM[(struct basic_ios *)this_9(D) + 256B], {CLOBBER}, NULL, NULL>
  gimple_assign <constructor, *this_9(D), {CLOBBER}, NULL, NULL>
  gimple_return <NULL>

}



;; Function __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator++ (_ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv, funcdef_no=4463, decl_uid=73470, cgraph_uid=1942, symbol_order=2526)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_1 = *this
_2 = _1 + 8
*this = _2

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_1 = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL }
_ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv = { }


Alias information for __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator++()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_2, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
this_4(D), points-to non-local, points-to vars: { }

struct __normal_iterator & __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator++ (struct __normal_iterator * const this)
{
  const char * _1;
  const char * _2;

  <bb 2> :
  gimple_assign <component_ref, _1, this_4(D)->_M_current, NULL, NULL>
  gimple_assign <pointer_plus_expr, _2, _1, 1, NULL>
  gimple_assign <ssa_name, this_4(D)->_M_current, _2, NULL, NULL>
  gimple_return <this_4(D)>

}



;; Function __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator* (_ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv, funcdef_no=4464, decl_uid=73466, cgraph_uid=1943, symbol_order=2527)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_3 = *this

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_3 = { ESCAPED NONLOCAL }
_ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv = { }


Alias information for __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator*() const

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to vars: { }
_3, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

const char & __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator* (const struct __normal_iterator * const this)
{
  const char & _3;

  <bb 2> :
  gimple_assign <component_ref, _3, this_2(D)->_M_current, NULL, NULL>
  gimple_return <_3>

}



;; Function std::__new_allocator<char>::__new_allocator (_ZNSt15__new_allocatorIcEC2ERKS0_, funcdef_no=4468, decl_uid=12254, cgraph_uid=1947, symbol_order=2531)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &PARM_NOALIAS(9)
PARM_NOALIAS(9) = &NONLOCAL
D.12256 = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
PARM_NOALIAS(9) = { NONLOCAL }
this = { PARM_NOALIAS(9) }
D.12256 = { NONLOCAL }


Alias information for std::__new_allocator<char>::__new_allocator(std::__new_allocator<char> const&)

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information


void std::__new_allocator<char>::__new_allocator (struct __new_allocator * const this, const struct __new_allocator & D.12256)
{
  <bb 2> :
  gimple_return <NULL>

}



;; Function std::allocator<char>::allocator (_ZNSaIcEC2ERKS_, funcdef_no=4341, decl_uid=12327, cgraph_uid=1820, symbol_order=2404)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &PARM_NOALIAS(9)
PARM_NOALIAS(9) = &NONLOCAL
__a = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
PARM_NOALIAS(9) = { NONLOCAL }
this = { PARM_NOALIAS(9) }
__a = { NONLOCAL }


Alias information for std::allocator<char>::allocator(std::allocator<char> const&)

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to vars: { D.98472 } (nonlocal, restrict)
__a_3(D), points-to non-local, points-to vars: { }

void std::allocator<char>::allocator (struct allocator * const this, const struct allocator & __a)
{
  <bb 2> :
  gimple_return <NULL>

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::get_allocator (_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13get_allocatorEv, funcdef_no=4575, decl_uid=28904, cgraph_uid=2054, symbol_order=2638)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
D.97105 = &NONLOCAL
_6 = this + UNKNOWN

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
D.97105 = { NONLOCAL } same as this
_6 = { NONLOCAL }
_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13get_allocatorEv = { }


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::get_allocator() const

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information

this_3(D), points-to non-local, points-to vars: { }
_5(D), points-to non-local, points-to NULL, points-to vars: { }
_6, points-to non-local, points-to NULL, points-to vars: { }

struct allocator_type std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::get_allocator (const struct basic_string * const this)
{
  const struct allocator_type & D.98477;
  struct allocator_type & _5(D);
  const struct allocator_type & _6;

  <bb 2> :
  gimple_assign <addr_expr, _6, &this_3(D)->_M_dataplus, NULL, NULL>
  gimple_return <_5(D)>

}



;; Function std::allocator_traits<std::allocator<char> >::select_on_container_copy_construction (_ZNSt16allocator_traitsISaIcEE37select_on_container_copy_constructionERKS0_, funcdef_no=4406, decl_uid=28051, cgraph_uid=1885, symbol_order=2469)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__rhs = &NONLOCAL
D.96117 = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__rhs = { NONLOCAL }
D.96117 = { NONLOCAL } same as __rhs
_ZNSt16allocator_traitsISaIcEE37select_on_container_copy_constructionERKS0_ = { }


Alias information for std::allocator_traits<std::allocator<char> >::select_on_container_copy_construction(std::allocator<char> const&)

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information

_2(D), points-to non-local, points-to NULL, points-to vars: { }
__rhs_3(D), points-to non-local, points-to vars: { }

struct allocator_type std::allocator_traits<std::allocator<char> >::select_on_container_copy_construction (const struct allocator_type & __rhs)
{
  struct allocator_type & _2(D);

  <bb 2> :
  gimple_return <_2(D)>

}



;; Function __gnu_cxx::__alloc_traits<std::allocator<char>, char>::_S_select_on_copy (_ZN9__gnu_cxx14__alloc_traitsISaIcEcE17_S_select_on_copyERKS1_, funcdef_no=4231, decl_uid=28091, cgraph_uid=1710, symbol_order=2292)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__a = &NONLOCAL
D.94906 = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__a = { NONLOCAL }
D.94906 = { NONLOCAL } same as __a
_ZN9__gnu_cxx14__alloc_traitsISaIcEcE17_S_select_on_copyERKS1_ = { }


Alias information for __gnu_cxx::__alloc_traits<std::allocator<char>, char>::_S_select_on_copy(std::allocator<char> const&)

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information

_2(D), points-to non-local, points-to NULL, points-to vars: { }
__a_3(D), points-to non-local, points-to vars: { }

struct allocator __gnu_cxx::__alloc_traits<std::allocator<char>, char>::_S_select_on_copy (const struct allocator & __a)
{
  struct allocator_type & retvalptr.134;
  struct allocator & _2(D);

  <bb 2> :
  gimple_return <_2(D)>

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::_Alloc_hider (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC2EPcRKS3_, funcdef_no=4110, decl_uid=28179, cgraph_uid=1589, symbol_order=2165)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &PARM_NOALIAS(9)
PARM_NOALIAS(9) = &NONLOCAL
__dat = &NONLOCAL
__a = &NONLOCAL
*this = __dat

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
PARM_NOALIAS(9) = { NONLOCAL }
this = { PARM_NOALIAS(9) }
__dat = { NONLOCAL }
__a = { NONLOCAL } same as __dat


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::_Alloc_hider(char*, std::allocator<char> const&)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to vars: { D.98487 } (nonlocal, restrict)
__a_4(D), points-to non-local, points-to vars: { }
__dat_6(D), points-to non-local, points-to NULL, points-to vars: { }

void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::_Alloc_hider (struct _Alloc_hider * const this, char * __dat, const struct allocator & __a)
{
  <bb 2> :
  gimple_assign <constructor, *this_2(D), {CLOBBER}, NULL, NULL>
  gimple_assign <ssa_name, *this_2(D)._M_p, __dat_6(D), NULL, NULL>
  gimple_return <NULL>

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> > (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEmcRKS3_, funcdef_no=3813, decl_uid=29456, cgraph_uid=1292, symbol_order=1855)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &PARM_NOALIAS.0+64
PARM_NOALIAS.0+64 = &NONLOCAL
PARM_NOALIAS.64+192 = &NONLOCAL
__n = &NONLOCAL
__c = &NONLOCAL
__a = &NONLOCAL
_1 = this + UNKNOWN
_14 = this + UNKNOWN
*this = _14
callescape(17) = NONLOCAL
CALLUSED(18) = callescape(17)
callarg(20) = this
callarg(20) = callarg(20) + UNKNOWN
callarg(20) = *callarg(20) + UNKNOWN
CALLUSED(18) = callarg(20)
*callarg(20) = callescape(17)
CALLCLOBBERED(19) = callarg(20)
callescape(17) = callarg(20)
ESCAPED = this
callarg(21) = __n
callarg(21) = callarg(21) + UNKNOWN
callarg(21) = *callarg(21) + UNKNOWN
CALLUSED(18) = callarg(21)
*callarg(21) = callescape(17)
CALLCLOBBERED(19) = callarg(21)
callescape(17) = callarg(21)
ESCAPED = __n
callarg(22) = __c
callarg(22) = callarg(22) + UNKNOWN
callarg(22) = *callarg(22) + UNKNOWN
CALLUSED(18) = callarg(22)
*callarg(22) = callescape(17)
CALLCLOBBERED(19) = callarg(22)
callescape(17) = callarg(22)
ESCAPED = __c

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+192 }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
PARM_NOALIAS.0+64 = { ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+192 }
PARM_NOALIAS.64+192 = { ESCAPED NONLOCAL }
this = { PARM_NOALIAS.0+64 }
__n = { NONLOCAL }
__c = { NONLOCAL } same as __n
__a = { NONLOCAL } same as __n
_1 = { PARM_NOALIAS.0+64 PARM_NOALIAS.64+192 }
_14 = { PARM_NOALIAS.0+64 PARM_NOALIAS.64+192 }
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEmc = { }
callescape(17) = { ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+192 }
CALLUSED(18) = { ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+192 } same as callescape(17)
CALLCLOBBERED(19) = { ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+192 }
callarg(20) = { ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+192 }
callarg(21) = { ESCAPED NONLOCAL }
callarg(22) = { ESCAPED NONLOCAL }


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(unsigned long, char, std::allocator<char> const&)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.98495 } (nonlocal, escaped, restrict)

Flow-insensitive points-to information

_1, points-to NULL, points-to vars: { D.98495 } (nonlocal, escaped, restrict)
this_5(D), points-to vars: { D.98495 } (nonlocal, escaped, restrict)
__a_8(D), points-to non-local, points-to vars: { }
_14, points-to NULL, points-to vars: { D.98495 } (nonlocal, escaped, restrict)

void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> > (struct basic_string * const this, size_type __n, char __c, const struct allocator & __a)
{
  char * D.98493;
  struct _Alloc_hider * _1;
  char[16] * _14;

  <bb 2> :
  gimple_assign <constructor, *this_5(D), {CLOBBER}, NULL, NULL>
  gimple_assign <addr_expr, _1, &this_5(D)->_M_dataplus, NULL, NULL>
  gimple_assign <addr_expr, _14, &this_5(D)->D.28191._M_local_buf, NULL, NULL>
  gimple_assign <constructor, MEM[(struct _Alloc_hider *)this_5(D)], {CLOBBER}, NULL, NULL>
  gimple_assign <ssa_name, MEM[(struct _Alloc_hider *)this_5(D)]._M_p, _14, NULL, NULL>
  gimple_call <_M_construct, NULL, this_5(D), __n_10(D), __c_11(D)>

  <bb 3> :
  gimple_return <NULL>

  <bb 4> :
gimple_label <<L0>>
  gimple_assign <constructor, MEM[(struct _Alloc_hider *)this_5(D)], {CLOBBER}, NULL, NULL>
  gimple_resx <1>

}



;; Function std::__cxx11::to_string (_ZNSt7__cxx119to_stringEi, funcdef_no=1189, decl_uid=29351, cgraph_uid=276, symbol_order=309)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__val = &NONLOCAL
__str = &NONLOCAL
__val.9_1 = __val
iftmp.8_11 = __val.9_1 + UNKNOWN
iftmp.8_10 = __val
iftmp.8_7 = iftmp.8_11
iftmp.8_7 = iftmp.8_10
__value_29 = iftmp.8_7
__value_29 = __value_38
__n_39 = &NONLOCAL
__n_39 = __n_40
_31 = __n_39 + UNKNOWN
_31 = &NONLOCAL
_33 = __n_39 + UNKNOWN
_33 = &NONLOCAL
_34 = __value_29
_36 = __n_39 + UNKNOWN
_36 = &NONLOCAL
_37 = _34 + UNKNOWN
__value_38 = _37
__n_40 = __n_39 + UNKNOWN
__n_40 = &NONLOCAL
_41 = __n_39
_41 = _31
_41 = _33
_41 = _36
_2 = __neg_9
_3 = _2 + UNKNOWN
_3 = _41 + UNKNOWN
_4 = _3
_16 = __str + UNKNOWN
*__str = _16
callescape(30) = NONLOCAL
CALLUSED(31) = callescape(30)
callarg(33) = __str
callarg(33) = callarg(33) + UNKNOWN
callarg(33) = *callarg(33) + UNKNOWN
CALLUSED(31) = callarg(33)
*callarg(33) = callescape(30)
CALLCLOBBERED(32) = callarg(33)
callescape(30) = callarg(33)
ESCAPED = __str
callarg(34) = _4
callarg(34) = callarg(34) + UNKNOWN
callarg(34) = *callarg(34) + UNKNOWN
CALLUSED(31) = callarg(34)
*callarg(34) = callescape(30)
CALLCLOBBERED(32) = callarg(34)
callescape(30) = callarg(34)
ESCAPED = _4
callarg(35) = &NONLOCAL
callarg(35) = callarg(35) + UNKNOWN
callarg(35) = *callarg(35) + UNKNOWN
CALLUSED(31) = callarg(35)
*callarg(35) = callescape(30)
CALLCLOBBERED(32) = callarg(35)
callescape(30) = callarg(35)
ESCAPED = &NONLOCAL
_5 = __neg_9
_21 = *__str
_19 = _21 + UNKNOWN
callescape(40) = &NONLOCAL
CALLUSED(41) = callescape(40)
callarg(43) = _19
callarg(43) = callarg(43) + UNKNOWN
indircallarg(44) = *callarg(43) + UNKNOWN
indircallarg(44) = indircallarg(44) + UNKNOWN
indircallarg(44) = *indircallarg(44) + UNKNOWN
CALLUSED(41) = callarg(43)
CALLUSED(41) = indircallarg(44)
*callarg(43) = callescape(40)
CALLCLOBBERED(42) = callarg(43)
callarg(45) = _41
callarg(45) = callarg(45) + UNKNOWN
callarg(45) = *callarg(45) + UNKNOWN
CALLUSED(41) = callarg(45)
callarg(46) = iftmp.8_7
callarg(46) = callarg(46) + UNKNOWN
callarg(46) = *callarg(46) + UNKNOWN
CALLUSED(41) = callarg(46)
*callarg(46) = callescape(40)
CALLCLOBBERED(42) = callarg(46)
callescape(40) = callarg(46)

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__val = { NONLOCAL }
__str = { NONLOCAL } same as __val
__neg_9 = { }
__val.9_1 = { NONLOCAL } same as __val
iftmp.8_11 = { NONLOCAL }
iftmp.8_10 = { NONLOCAL } same as __val
iftmp.8_7 = { NONLOCAL }
__value_29 = { NONLOCAL }
__value_38 = { NONLOCAL }
__n_39 = { NONLOCAL }
__n_40 = { NONLOCAL } same as __n_39
_31 = { NONLOCAL }
_33 = { NONLOCAL }
_34 = { NONLOCAL } same as __value_29
_36 = { NONLOCAL }
_37 = { NONLOCAL } same as __value_38
_41 = { NONLOCAL }
_2 = { }
_3 = { NONLOCAL }
_4 = { NONLOCAL } same as _3
_16 = { NONLOCAL }
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEmc = { }
callescape(30) = { ESCAPED NONLOCAL }
CALLUSED(31) = { ESCAPED NONLOCAL } same as callescape(30)
CALLCLOBBERED(32) = { ESCAPED NONLOCAL }
callarg(33) = { ESCAPED NONLOCAL }
callarg(34) = { ESCAPED NONLOCAL }
callarg(35) = { ESCAPED NONLOCAL }
_5 = { }
_21 = { ESCAPED NONLOCAL }
_19 = { ESCAPED NONLOCAL }
_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_ = { }
callescape(40) = { ESCAPED NONLOCAL }
CALLUSED(41) = { ESCAPED NONLOCAL }
CALLCLOBBERED(42) = { ESCAPED NONLOCAL }
callarg(43) = { ESCAPED NONLOCAL }
indircallarg(44) = { ESCAPED NONLOCAL }
callarg(45) = { ESCAPED NONLOCAL }
callarg(46) = { ESCAPED NONLOCAL } same as callescape(40)
_ZNSt7__cxx119to_stringEi = { }


Alias information for std::__cxx11::to_string(int)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_16, points-to non-local, points-to NULL, points-to vars: { }
__str_17(D), points-to non-local, points-to NULL, points-to vars: { }
_19, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_21, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

struct string std::__cxx11::to_string (int __val)
{
  unsigned int __n;
  const unsigned int __b2;
  const unsigned int __b3;
  const long unsigned int __b4;
  unsigned int D.98512;
  unsigned int __value;
  value_type & D.98499;
  const unsigned int __len;
  const unsigned int __uval;
  const bool __neg;
  unsigned int __val.9_1;
  unsigned int _2;
  unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  unsigned int iftmp.8_7;
  unsigned int iftmp.8_10;
  unsigned int iftmp.8_11;
  char[16] * _16;
  value_type & _19;
  char * _21;
  unsigned int _31;
  unsigned int _33;
  long unsigned int _34;
  unsigned int _36;
  long unsigned int _37;
  unsigned int _41;

  <bb 2> :
  gimple_assign <lt_expr, __neg_9, __val_8(D), 0, NULL>
  gimple_cond <lt_expr, __val_8(D), 0, NULL, NULL>
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  gimple_assign <nop_expr, __val.9_1, __val_8(D), NULL, NULL>
  gimple_assign <negate_expr, iftmp.8_11, __val.9_1, NULL, NULL>
  goto <bb 5>; [INV]

  <bb 4> :
  gimple_assign <nop_expr, iftmp.8_10, __val_8(D), NULL, NULL>

  <bb 5> :
  # gimple_phi <iftmp.8_7, iftmp.8_11(3), iftmp.8_10(4)>

  <bb 6> :
  # gimple_phi <__value_29, iftmp.8_7(5), __value_38(13)>
  # gimple_phi <__n_39, 1(5), __n_40(13)>
  gimple_cond <le_expr, __value_29, 9, NULL, NULL>
    goto <bb 14>; [2.75%]
  else
    goto <bb 7>; [97.25%]

  <bb 7> :
  gimple_cond <le_expr, __value_29, 99, NULL, NULL>
    goto <bb 8>; [2.75%]
  else
    goto <bb 9>; [97.25%]

  <bb 8> :
  gimple_assign <plus_expr, _31, __n_39, 1, NULL>
  goto <bb 14>; [100.00%]

  <bb 9> :
  gimple_cond <le_expr, __value_29, 999, NULL, NULL>
    goto <bb 10>; [2.75%]
  else
    goto <bb 11>; [97.25%]

  <bb 10> :
  gimple_assign <plus_expr, _33, __n_39, 2, NULL>
  goto <bb 14>; [100.00%]

  <bb 11> :
  gimple_assign <nop_expr, _34, __value_29, NULL, NULL>
  gimple_cond <le_expr, __value_29, 9999, NULL, NULL>
    goto <bb 12>; [2.75%]
  else
    goto <bb 13>; [97.25%]

  <bb 12> :
  gimple_assign <plus_expr, _36, __n_39, 3, NULL>
  goto <bb 14>; [100.00%]

  <bb 13> :
  gimple_assign <trunc_div_expr, _37, _34, 10000, NULL>
  gimple_assign <nop_expr, __value_38, _37, NULL, NULL>
  gimple_assign <plus_expr, __n_40, __n_39, 4, NULL>
  goto <bb 6>; [100.00%]

  <bb 14> :
  # gimple_phi <_41, __n_39(6), _31(8), _33(10), _36(12)>
  gimple_assign <nop_expr, _2, __neg_9, NULL, NULL>
  gimple_assign <plus_expr, _3, _2, _41, NULL>
  gimple_assign <nop_expr, _4, _3, NULL, NULL>
  gimple_assign <addr_expr, _16, &MEM[(struct basic_string *)__str_17(D)].D.28191._M_local_buf, NULL, NULL>
  gimple_assign <ssa_name, MEM[(struct _Alloc_hider *)__str_17(D)]._M_p, _16, NULL, NULL>
  gimple_call <_M_construct, NULL, __str_17(D), _4, 45>
  gimple_assign <nop_expr, _5, __neg_9, NULL, NULL>
  gimple_assign <component_ref, _21, MEM[(const struct basic_string *)__str_17(D)]._M_dataplus._M_p, NULL, NULL>
  gimple_assign <pointer_plus_expr, _19, _21, _5, NULL>
  gimple_call <__to_chars_10_impl, NULL, _19, _41, iftmp.8_7>
  gimple_return <__str_17(D)>

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS3_, funcdef_no=4287, decl_uid=29248, cgraph_uid=1766, symbol_order=2350)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &PARM_NOALIAS.0+64
PARM_NOALIAS.0+64 = &NONLOCAL
PARM_NOALIAS.64+192 = &NONLOCAL
__a = &NONLOCAL
_1 = this + UNKNOWN
_13 = this + UNKNOWN
*this = _13
_14 = this + UNKNOWN
derefaddrtmp(15) = &NULL
*this + 64 = derefaddrtmp(15)
_15 = *this
derefaddrtmp(17) = &NULL
*_15 = derefaddrtmp(17)

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+192 }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
PARM_NOALIAS.0+64 = { ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+192 }
PARM_NOALIAS.64+192 = { NULL ESCAPED NONLOCAL }
this = { PARM_NOALIAS.0+64 }
__a = { NONLOCAL }
_1 = { PARM_NOALIAS.0+64 PARM_NOALIAS.64+192 }
_13 = { PARM_NOALIAS.0+64 PARM_NOALIAS.64+192 }
_14 = { PARM_NOALIAS.0+64 PARM_NOALIAS.64+192 }
derefaddrtmp(15) = { NULL }
_15 = { ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+192 }
derefaddrtmp(17) = { NULL } same as derefaddrtmp(15)


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::allocator<char> const&)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.98525 } (nonlocal, escaped, restrict)

Flow-insensitive points-to information

_1, points-to NULL, points-to vars: { D.98525 } (nonlocal, escaped, restrict)
this_5(D), points-to vars: { D.98525 } (nonlocal, escaped, restrict)
__a_8(D), points-to non-local, points-to vars: { }
_13, points-to NULL, points-to vars: { D.98525 } (nonlocal, escaped, restrict)
_14, points-to NULL, points-to vars: { D.98525 } (nonlocal, escaped, restrict)
_15, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.98525 } (nonlocal, escaped, restrict)

void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string (struct basic_string * const this, const struct allocator & __a)
{
  char * D.98522;
  char * D.98520;
  struct _Alloc_hider * _1;
  struct _Alloc_hider * _3;
  char[16] * _13;
  char[16] * _14;
  char * _15;

  <bb 2> :
  gimple_assign <constructor, *this_5(D), {CLOBBER}, NULL, NULL>
  gimple_assign <addr_expr, _1, &this_5(D)->_M_dataplus, NULL, NULL>
  gimple_assign <addr_expr, _13, &this_5(D)->D.28191._M_local_buf, NULL, NULL>
  gimple_assign <constructor, MEM[(struct _Alloc_hider *)this_5(D)], {CLOBBER}, NULL, NULL>
  gimple_assign <ssa_name, MEM[(struct _Alloc_hider *)this_5(D)]._M_p, _13, NULL, NULL>
  gimple_assign <addr_expr, _14, &this_5(D)->D.28191._M_local_buf, NULL, NULL>
  gimple_assign <integer_cst, *this_5(D)._M_string_length, 0, NULL, NULL>
  gimple_assign <component_ref, _15, MEM[(const struct basic_string *)this_5(D)]._M_dataplus._M_p, NULL, NULL>
  gimple_assign <integer_cst, MEM[(char_type &)_15], 0, NULL, NULL>
  gimple_return <NULL>

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::_Alloc_hider (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC2EPcOS3_, funcdef_no=4116, decl_uid=28171, cgraph_uid=1595, symbol_order=2171)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &PARM_NOALIAS(9)
PARM_NOALIAS(9) = &NONLOCAL
__dat = &NONLOCAL
__a = &NONLOCAL
*this = __dat

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
PARM_NOALIAS(9) = { NONLOCAL }
this = { PARM_NOALIAS(9) }
__dat = { NONLOCAL }
__a = { NONLOCAL } same as __dat


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::_Alloc_hider(char*, std::allocator<char>&&)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to vars: { D.98529 } (nonlocal, restrict)
__a_4(D), points-to non-local, points-to vars: { }
__dat_6(D), points-to non-local, points-to NULL, points-to vars: { }

void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::_Alloc_hider (struct _Alloc_hider * const this, char * __dat, struct allocator & __a)
{
  <bb 2> :
  gimple_assign <constructor, *this_2(D), {CLOBBER}, NULL, NULL>
  gimple_assign <ssa_name, *this_2(D)._M_p, __dat_6(D), NULL, NULL>
  gimple_return <NULL>

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2Ev, funcdef_no=4017, decl_uid=29253, cgraph_uid=1496, symbol_order=2066)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &PARM_NOALIAS.0+64
PARM_NOALIAS.0+64 = &NONLOCAL
PARM_NOALIAS.64+192 = &NONLOCAL
_1 = this + UNKNOWN
_8 = this + UNKNOWN
*this = _8
_14 = this + UNKNOWN
derefaddrtmp(14) = &NULL
*this + 64 = derefaddrtmp(14)
_15 = *this
derefaddrtmp(16) = &NULL
*_15 = derefaddrtmp(16)

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+192 }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
PARM_NOALIAS.0+64 = { ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+192 }
PARM_NOALIAS.64+192 = { NULL ESCAPED NONLOCAL }
this = { PARM_NOALIAS.0+64 }
_1 = { PARM_NOALIAS.0+64 PARM_NOALIAS.64+192 }
_8 = { PARM_NOALIAS.0+64 PARM_NOALIAS.64+192 }
_14 = { PARM_NOALIAS.0+64 PARM_NOALIAS.64+192 }
derefaddrtmp(14) = { NULL }
_15 = { ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+192 }
derefaddrtmp(16) = { NULL } same as derefaddrtmp(14)


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.98544 } (nonlocal, escaped, restrict)

Flow-insensitive points-to information

_1, points-to NULL, points-to vars: { D.98544 } (nonlocal, escaped, restrict)
this_5(D), points-to vars: { D.98544 } (nonlocal, escaped, restrict)
_8, points-to NULL, points-to vars: { D.98544 } (nonlocal, escaped, restrict)
_14, points-to NULL, points-to vars: { D.98544 } (nonlocal, escaped, restrict)
_15, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.98544 } (nonlocal, escaped, restrict)

void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string (struct basic_string * const this)
{
  char * D.98541;
  char * D.98539;
  struct _Alloc_hider * _1;
  struct _Alloc_hider * _3;
  char[16] * _8;
  char[16] * _14;
  char * _15;

  <bb 2> :
  gimple_assign <constructor, *this_5(D), {CLOBBER}, NULL, NULL>
  gimple_assign <addr_expr, _1, &this_5(D)->_M_dataplus, NULL, NULL>
  gimple_assign <addr_expr, _8, &this_5(D)->D.28191._M_local_buf, NULL, NULL>
  gimple_assign <constructor, MEM[(struct _Alloc_hider *)this_5(D)], {CLOBBER}, NULL, NULL>
  gimple_assign <ssa_name, MEM[(struct _Alloc_hider *)this_5(D)]._M_p, _8, NULL, NULL>
  gimple_assign <addr_expr, _14, &this_5(D)->D.28191._M_local_buf, NULL, NULL>
  gimple_assign <integer_cst, *this_5(D)._M_string_length, 0, NULL, NULL>
  gimple_assign <component_ref, _15, MEM[(const struct basic_string *)this_5(D)]._M_dataplus._M_p, NULL, NULL>
  gimple_assign <integer_cst, MEM[(char_type &)_15], 0, NULL, NULL>
  gimple_return <NULL>

}



;; Function std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::basic_stringbuf (_ZNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEC2ESt13_Ios_Openmode, funcdef_no=4535, decl_uid=76586, cgraph_uid=2014, symbol_order=2598)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &PARM_NOALIAS.0+64
PARM_NOALIAS.0+64 = &NONLOCAL
PARM_NOALIAS.64+64 = &NONLOCAL
PARM_NOALIAS.128+64 = &NONLOCAL
PARM_NOALIAS.192+64 = &NONLOCAL
PARM_NOALIAS.256+64 = &NONLOCAL
PARM_NOALIAS.320+64 = &NONLOCAL
PARM_NOALIAS.384+64 = &NONLOCAL
PARM_NOALIAS.448+64 = &NONLOCAL
PARM_NOALIAS.512+32 = &NONLOCAL
PARM_NOALIAS.576+64 = &NONLOCAL
PARM_NOALIAS.640+192 = &NONLOCAL
__mode = &NONLOCAL
_1 = this + UNKNOWN
_ZTVSt15basic_streambufIcSt11char_traitsIcEE = NONLOCAL
derefaddrtmp(23) = &_ZTVSt15basic_streambufIcSt11char_traitsIcEE
*this = derefaddrtmp(23)
derefaddrtmp(24) = &NULL
*this + 64 = derefaddrtmp(24)
derefaddrtmp(25) = &NULL
*this + 128 = derefaddrtmp(25)
derefaddrtmp(26) = &NULL
*this + 192 = derefaddrtmp(26)
derefaddrtmp(27) = &NULL
*this + 256 = derefaddrtmp(27)
derefaddrtmp(28) = &NULL
*this + 320 = derefaddrtmp(28)
derefaddrtmp(29) = &NULL
*this + 384 = derefaddrtmp(29)
_15 = this + UNKNOWN
callescape(32) = NONLOCAL
CALLUSED(33) = callescape(32)
callarg(35) = _15
callarg(35) = callarg(35) + UNKNOWN
callarg(35) = *callarg(35) + UNKNOWN
CALLUSED(33) = callarg(35)
*callarg(35) = callescape(32)
CALLCLOBBERED(34) = callarg(35)
callescape(32) = callarg(35)
ESCAPED = _15
_ZTVNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEE = NONLOCAL
derefaddrtmp(37) = &_ZTVNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEE
*this = derefaddrtmp(37)
*this + 512 = __mode
_3 = this + UNKNOWN
_14 = this + UNKNOWN
*this + 576 = _14
derefaddrtmp(40) = &NULL
*this + 640 = derefaddrtmp(40)
derefaddrtmp(41) = &NULL
*this + 704 = derefaddrtmp(41)

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+64 PARM_NOALIAS.128+64 PARM_NOALIAS.192+64 PARM_NOALIAS.256+64 PARM_NOALIAS.320+64 PARM_NOALIAS.384+64 PARM_NOALIAS.448+64 PARM_NOALIAS.512+32 PARM_NOALIAS.576+64 PARM_NOALIAS.640+192 _ZTVSt15basic_streambufIcSt11char_traitsIcEE _ZTVNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEE }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
PARM_NOALIAS.0+64 = { NULL ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+64 PARM_NOALIAS.128+64 PARM_NOALIAS.192+64 PARM_NOALIAS.256+64 PARM_NOALIAS.320+64 PARM_NOALIAS.384+64 PARM_NOALIAS.448+64 PARM_NOALIAS.512+32 PARM_NOALIAS.576+64 PARM_NOALIAS.640+192 _ZTVSt15basic_streambufIcSt11char_traitsIcEE _ZTVNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEE }
PARM_NOALIAS.64+64 = { NULL ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+64 PARM_NOALIAS.128+64 PARM_NOALIAS.192+64 PARM_NOALIAS.256+64 PARM_NOALIAS.320+64 PARM_NOALIAS.384+64 PARM_NOALIAS.448+64 PARM_NOALIAS.512+32 PARM_NOALIAS.576+64 PARM_NOALIAS.640+192 _ZTVSt15basic_streambufIcSt11char_traitsIcEE _ZTVNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEE }
PARM_NOALIAS.128+64 = { NULL ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+64 PARM_NOALIAS.128+64 PARM_NOALIAS.192+64 PARM_NOALIAS.256+64 PARM_NOALIAS.320+64 PARM_NOALIAS.384+64 PARM_NOALIAS.448+64 PARM_NOALIAS.512+32 PARM_NOALIAS.576+64 PARM_NOALIAS.640+192 _ZTVSt15basic_streambufIcSt11char_traitsIcEE _ZTVNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEE }
PARM_NOALIAS.192+64 = { NULL ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+64 PARM_NOALIAS.128+64 PARM_NOALIAS.192+64 PARM_NOALIAS.256+64 PARM_NOALIAS.320+64 PARM_NOALIAS.384+64 PARM_NOALIAS.448+64 PARM_NOALIAS.512+32 PARM_NOALIAS.576+64 PARM_NOALIAS.640+192 _ZTVSt15basic_streambufIcSt11char_traitsIcEE _ZTVNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEE }
PARM_NOALIAS.256+64 = { NULL ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+64 PARM_NOALIAS.128+64 PARM_NOALIAS.192+64 PARM_NOALIAS.256+64 PARM_NOALIAS.320+64 PARM_NOALIAS.384+64 PARM_NOALIAS.448+64 PARM_NOALIAS.512+32 PARM_NOALIAS.576+64 PARM_NOALIAS.640+192 _ZTVSt15basic_streambufIcSt11char_traitsIcEE _ZTVNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEE }
PARM_NOALIAS.320+64 = { NULL ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+64 PARM_NOALIAS.128+64 PARM_NOALIAS.192+64 PARM_NOALIAS.256+64 PARM_NOALIAS.320+64 PARM_NOALIAS.384+64 PARM_NOALIAS.448+64 PARM_NOALIAS.512+32 PARM_NOALIAS.576+64 PARM_NOALIAS.640+192 _ZTVSt15basic_streambufIcSt11char_traitsIcEE _ZTVNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEE }
PARM_NOALIAS.384+64 = { NULL ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+64 PARM_NOALIAS.128+64 PARM_NOALIAS.192+64 PARM_NOALIAS.256+64 PARM_NOALIAS.320+64 PARM_NOALIAS.384+64 PARM_NOALIAS.448+64 PARM_NOALIAS.512+32 PARM_NOALIAS.576+64 PARM_NOALIAS.640+192 _ZTVSt15basic_streambufIcSt11char_traitsIcEE _ZTVNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEE }
PARM_NOALIAS.448+64 = { NULL ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+64 PARM_NOALIAS.128+64 PARM_NOALIAS.192+64 PARM_NOALIAS.256+64 PARM_NOALIAS.320+64 PARM_NOALIAS.384+64 PARM_NOALIAS.448+64 PARM_NOALIAS.512+32 PARM_NOALIAS.576+64 PARM_NOALIAS.640+192 _ZTVSt15basic_streambufIcSt11char_traitsIcEE _ZTVNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEE }
PARM_NOALIAS.512+32 = { NULL ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+64 PARM_NOALIAS.128+64 PARM_NOALIAS.192+64 PARM_NOALIAS.256+64 PARM_NOALIAS.320+64 PARM_NOALIAS.384+64 PARM_NOALIAS.448+64 PARM_NOALIAS.512+32 PARM_NOALIAS.576+64 PARM_NOALIAS.640+192 _ZTVSt15basic_streambufIcSt11char_traitsIcEE _ZTVNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEE }
PARM_NOALIAS.576+64 = { NULL ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+64 PARM_NOALIAS.128+64 PARM_NOALIAS.192+64 PARM_NOALIAS.256+64 PARM_NOALIAS.320+64 PARM_NOALIAS.384+64 PARM_NOALIAS.448+64 PARM_NOALIAS.512+32 PARM_NOALIAS.576+64 PARM_NOALIAS.640+192 _ZTVSt15basic_streambufIcSt11char_traitsIcEE _ZTVNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEE }
PARM_NOALIAS.640+192 = { NULL ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+64 PARM_NOALIAS.128+64 PARM_NOALIAS.192+64 PARM_NOALIAS.256+64 PARM_NOALIAS.320+64 PARM_NOALIAS.384+64 PARM_NOALIAS.448+64 PARM_NOALIAS.512+32 PARM_NOALIAS.576+64 PARM_NOALIAS.640+192 _ZTVSt15basic_streambufIcSt11char_traitsIcEE _ZTVNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEE }
_ZTVSt15basic_streambufIcSt11char_traitsIcEE = { ESCAPED NONLOCAL }
_ZTVNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEE = { ESCAPED NONLOCAL }
this = { PARM_NOALIAS.0+64 }
__mode = { NONLOCAL }
_1 = { PARM_NOALIAS.0+64 PARM_NOALIAS.64+64 PARM_NOALIAS.128+64 PARM_NOALIAS.192+64 PARM_NOALIAS.256+64 PARM_NOALIAS.320+64 PARM_NOALIAS.384+64 PARM_NOALIAS.448+64 PARM_NOALIAS.512+32 PARM_NOALIAS.576+64 PARM_NOALIAS.640+192 }
derefaddrtmp(23) = { _ZTVSt15basic_streambufIcSt11char_traitsIcEE }
derefaddrtmp(24) = { NULL }
derefaddrtmp(25) = { NULL } same as derefaddrtmp(24)
derefaddrtmp(26) = { NULL } same as derefaddrtmp(24)
derefaddrtmp(27) = { NULL } same as derefaddrtmp(24)
derefaddrtmp(28) = { NULL } same as derefaddrtmp(24)
derefaddrtmp(29) = { NULL } same as derefaddrtmp(24)
_15 = { PARM_NOALIAS.0+64 PARM_NOALIAS.64+64 PARM_NOALIAS.128+64 PARM_NOALIAS.192+64 PARM_NOALIAS.256+64 PARM_NOALIAS.320+64 PARM_NOALIAS.384+64 PARM_NOALIAS.448+64 PARM_NOALIAS.512+32 PARM_NOALIAS.576+64 PARM_NOALIAS.640+192 }
_ZNSt6localeC1Ev = { }
callescape(32) = { NULL ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+64 PARM_NOALIAS.128+64 PARM_NOALIAS.192+64 PARM_NOALIAS.256+64 PARM_NOALIAS.320+64 PARM_NOALIAS.384+64 PARM_NOALIAS.448+64 PARM_NOALIAS.512+32 PARM_NOALIAS.576+64 PARM_NOALIAS.640+192 _ZTVSt15basic_streambufIcSt11char_traitsIcEE _ZTVNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEE }
CALLUSED(33) = { NULL ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+64 PARM_NOALIAS.128+64 PARM_NOALIAS.192+64 PARM_NOALIAS.256+64 PARM_NOALIAS.320+64 PARM_NOALIAS.384+64 PARM_NOALIAS.448+64 PARM_NOALIAS.512+32 PARM_NOALIAS.576+64 PARM_NOALIAS.640+192 _ZTVSt15basic_streambufIcSt11char_traitsIcEE _ZTVNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEE } same as callescape(32)
CALLCLOBBERED(34) = { NULL ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+64 PARM_NOALIAS.128+64 PARM_NOALIAS.192+64 PARM_NOALIAS.256+64 PARM_NOALIAS.320+64 PARM_NOALIAS.384+64 PARM_NOALIAS.448+64 PARM_NOALIAS.512+32 PARM_NOALIAS.576+64 PARM_NOALIAS.640+192 _ZTVSt15basic_streambufIcSt11char_traitsIcEE _ZTVNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEE } same as callarg(35)
callarg(35) = { NULL ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+64 PARM_NOALIAS.128+64 PARM_NOALIAS.192+64 PARM_NOALIAS.256+64 PARM_NOALIAS.320+64 PARM_NOALIAS.384+64 PARM_NOALIAS.448+64 PARM_NOALIAS.512+32 PARM_NOALIAS.576+64 PARM_NOALIAS.640+192 _ZTVSt15basic_streambufIcSt11char_traitsIcEE _ZTVNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEE }
derefaddrtmp(37) = { _ZTVNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEE }
_3 = { PARM_NOALIAS.0+64 PARM_NOALIAS.64+64 PARM_NOALIAS.128+64 PARM_NOALIAS.192+64 PARM_NOALIAS.256+64 PARM_NOALIAS.320+64 PARM_NOALIAS.384+64 PARM_NOALIAS.448+64 PARM_NOALIAS.512+32 PARM_NOALIAS.576+64 PARM_NOALIAS.640+192 }
_14 = { PARM_NOALIAS.0+64 PARM_NOALIAS.64+64 PARM_NOALIAS.128+64 PARM_NOALIAS.192+64 PARM_NOALIAS.256+64 PARM_NOALIAS.320+64 PARM_NOALIAS.384+64 PARM_NOALIAS.448+64 PARM_NOALIAS.512+32 PARM_NOALIAS.576+64 PARM_NOALIAS.640+192 }
derefaddrtmp(40) = { NULL } same as derefaddrtmp(24)
derefaddrtmp(41) = { NULL } same as derefaddrtmp(24)


Alias information for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::basic_stringbuf(std::_Ios_Openmode)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.39074 D.76598 D.98548 } (nonlocal, escaped, restrict, interposable)

Flow-insensitive points-to information

_1, points-to NULL, points-to vars: { D.98548 } (nonlocal, escaped, restrict)
_3, points-to NULL, points-to vars: { D.98548 } (nonlocal, escaped, restrict)
this_7(D), points-to vars: { D.98548 } (nonlocal, escaped, restrict)
_14, points-to NULL, points-to vars: { D.98548 } (nonlocal, escaped, restrict)
_15, points-to NULL, points-to vars: { D.98548 } (nonlocal, escaped, restrict)

void std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::basic_stringbuf (struct basic_stringbuf * const this, openmode __mode)
{
  struct basic_streambuf * _1;
  struct __string_type * _3;
  struct __string_type * _4;
  struct basic_streambuf * _5;
  char[16] * _14;
  struct locale * _15;

  <bb 2> :
  gimple_assign <constructor, *this_7(D), {CLOBBER}, NULL, NULL>
  gimple_assign <addr_expr, _1, &this_7(D)->D.76593, NULL, NULL>
  gimple_assign <constructor, MEM[(struct basic_streambuf *)this_7(D)], {CLOBBER}, NULL, NULL>
  gimple_assign <addr_expr, MEM[(struct basic_streambuf *)this_7(D)]._vptr.basic_streambuf, &MEM <int (*__vtbl_ptr_type) ()[16]> [(void *)&_ZTVSt15basic_streambufIcSt11char_traitsIcEE + 16B], NULL, NULL>
  gimple_assign <integer_cst, MEM[(struct basic_streambuf *)this_7(D)]._M_in_beg, 0B, NULL, NULL>
  gimple_assign <integer_cst, MEM[(struct basic_streambuf *)this_7(D)]._M_in_cur, 0B, NULL, NULL>
  gimple_assign <integer_cst, MEM[(struct basic_streambuf *)this_7(D)]._M_in_end, 0B, NULL, NULL>
  gimple_assign <integer_cst, MEM[(struct basic_streambuf *)this_7(D)]._M_out_beg, 0B, NULL, NULL>
  gimple_assign <integer_cst, MEM[(struct basic_streambuf *)this_7(D)]._M_out_cur, 0B, NULL, NULL>
  gimple_assign <integer_cst, MEM[(struct basic_streambuf *)this_7(D)]._M_out_end, 0B, NULL, NULL>
  gimple_assign <addr_expr, _15, &MEM[(struct basic_streambuf *)this_7(D)]._M_buf_locale, NULL, NULL>
  gimple_call <__ct_comp , NULL, _15>
  gimple_assign <addr_expr, *this_7(D).D.76593._vptr.basic_streambuf, &MEM <int (*__vtbl_ptr_type) ()[16]> [(void *)&_ZTVNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEE + 16B], NULL, NULL>
  gimple_assign <ssa_name, *this_7(D)._M_mode, __mode_11(D), NULL, NULL>
  gimple_assign <addr_expr, _3, &this_7(D)->_M_string, NULL, NULL>
  gimple_assign <constructor, MEM[(struct basic_string *)this_7(D) + 72B], {CLOBBER}, NULL, NULL>
  gimple_assign <addr_expr, _14, &MEM[(struct basic_string *)this_7(D) + 72B].D.28191._M_local_buf, NULL, NULL>
  gimple_assign <constructor, MEM[(struct _Alloc_hider *)this_7(D) + 72B], {CLOBBER}, NULL, NULL>
  gimple_assign <ssa_name, MEM[(struct _Alloc_hider *)this_7(D) + 72B]._M_p, _14, NULL, NULL>
  gimple_assign <integer_cst, MEM[(struct basic_string *)this_7(D) + 72B]._M_string_length, 0, NULL, NULL>
  gimple_assign <integer_cst, MEM[(char_type &)this_7(D) + 88], 0, NULL, NULL>
  gimple_return <NULL>

}



;; Function std::__ptr_traits_ptr_to<char const*, char const, false>::pointer_to (_ZNSt19__ptr_traits_ptr_toIPKcS0_Lb0EE10pointer_toERS0_, funcdef_no=4470, decl_uid=95737, cgraph_uid=1949, symbol_order=2533)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__r = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__r = { NONLOCAL }
_ZNSt19__ptr_traits_ptr_toIPKcS0_Lb0EE10pointer_toERS0_ = { }


Alias information for std::__ptr_traits_ptr_to<char const*, char const, false>::pointer_to(char const&)

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information

__r_1(D), points-to non-local, points-to vars: { }

const char * std::__ptr_traits_ptr_to<char const*, char const, false>::pointer_to (const element_type & __r)
{
  <bb 2> :
  gimple_return <__r_1(D)>

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data (_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv, funcdef_no=4343, decl_uid=28205, cgraph_uid=1822, symbol_order=2406)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_1 = this + UNKNOWN

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_1 = { NONLOCAL }
_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv = { }


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data() const

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to NULL, points-to vars: { }
this_2(D), points-to non-local, points-to vars: { }

const char * std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data (const struct basic_string * const this)
{
  const char * D.98552;
  const char[16] * _1;

  <bb 2> :
  gimple_assign <addr_expr, _1, &this_2(D)->D.28191._M_local_buf, NULL, NULL>
  gimple_return <_1>

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_is_local (_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv, funcdef_no=4118, decl_uid=28213, cgraph_uid=1597, symbol_order=2173)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_5 = *this
_6 = this + UNKNOWN

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_5 = { ESCAPED NONLOCAL }
_6 = { NONLOCAL }
_7 = { }
_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv = { }


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_is_local() const

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information

this_4(D), points-to non-local, points-to vars: { }
_5, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_6, points-to non-local, points-to NULL, points-to vars: { }

bool std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_is_local (const struct basic_string * const this)
{
  char * D.98557;
  const char * D.98555;
  char * _5;
  const char[16] * _6;
  bool _7;

  <bb 2> :
  gimple_assign <component_ref, _5, this_4(D)->_M_dataplus._M_p, NULL, NULL>
  gimple_assign <addr_expr, _6, &this_4(D)->D.28191._M_local_buf, NULL, NULL>
  gimple_assign <eq_expr, _7, _5, _6, NULL>
  gimple_return <_7>

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EOS4_, funcdef_no=3821, decl_uid=29172, cgraph_uid=1300, symbol_order=1864)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &PARM_NOALIAS.0+64
PARM_NOALIAS.0+64 = &NONLOCAL
PARM_NOALIAS.64+192 = &NONLOCAL
__str = &NONLOCAL
_1 = this + UNKNOWN
_19 = this + UNKNOWN
_21 = __str + UNKNOWN
*this = _19
_29 = *__str
_24 = __str + UNKNOWN
_4 = this + UNKNOWN
_5 = __str + UNKNOWN
_36 = *__str + 64
_7 = _36 + UNKNOWN
_7 = &NONLOCAL
_34 = _4
doubledereftmp(22) = *_5 + UNKNOWN
*_4 + UNKNOWN = doubledereftmp(22)
_35 = _4
_35 = _34
_37 = *__str
*this = _37
_9 = *__str + 128
*this + 128 = _9
_41 = *__str + 64
*this + 64 = _41
_40 = __str + UNKNOWN
*__str = _40
derefaddrtmp(28) = &NULL
*__str + 64 = derefaddrtmp(28)
_38 = *__str
derefaddrtmp(30) = &NULL
*_38 = derefaddrtmp(30)

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+192 }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
PARM_NOALIAS.0+64 = { ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+192 }
PARM_NOALIAS.64+192 = { ESCAPED NONLOCAL }
this = { PARM_NOALIAS.0+64 }
__str = { NONLOCAL }
_1 = { PARM_NOALIAS.0+64 PARM_NOALIAS.64+192 }
_19 = { PARM_NOALIAS.0+64 PARM_NOALIAS.64+192 }
_21 = { NONLOCAL }
_29 = { ESCAPED NONLOCAL }
_24 = { NONLOCAL }
_4 = { PARM_NOALIAS.0+64 PARM_NOALIAS.64+192 }
_5 = { NONLOCAL }
_36 = { ESCAPED NONLOCAL }
_7 = { ESCAPED NONLOCAL }
_34 = { PARM_NOALIAS.0+64 PARM_NOALIAS.64+192 } same as _4
doubledereftmp(22) = { ESCAPED NONLOCAL }
_35 = { PARM_NOALIAS.0+64 PARM_NOALIAS.64+192 } same as _4
_37 = { ESCAPED NONLOCAL } same as _29
_9 = { ESCAPED NONLOCAL }
_41 = { ESCAPED NONLOCAL }
_40 = { NONLOCAL }
derefaddrtmp(28) = { NULL }
_38 = { ESCAPED NONLOCAL } same as _29
derefaddrtmp(30) = { NULL } same as derefaddrtmp(28)


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.98590 } (nonlocal, escaped, restrict)

Flow-insensitive points-to information

_1, points-to NULL, points-to vars: { D.98590 } (nonlocal, escaped, restrict)
_4, points-to NULL, points-to vars: { D.98590 } (nonlocal, escaped, restrict)
_5, points-to non-local, points-to NULL, points-to vars: { }
this_15(D), points-to vars: { D.98590 } (nonlocal, escaped, restrict)
__str_18(D), points-to non-local, points-to vars: { }
_19, points-to NULL, points-to vars: { D.98590 } (nonlocal, escaped, restrict)
_21, points-to non-local, points-to NULL, points-to vars: { }
_24, points-to non-local, points-to NULL, points-to vars: { }
_29, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_34, points-to NULL, points-to vars: { D.98590 } (nonlocal, escaped, restrict)
_35, points-to NULL, points-to vars: { D.98590 } (nonlocal, escaped, restrict)
_37, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_38, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_40, points-to non-local, points-to NULL, points-to vars: { }

void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string (struct basic_string * const this, struct basic_string & __str)
{
  size_type D.98589;
  char * D.98585;
  char * D.98579;
  size_type D.98573;
  char * D.98567;
  struct allocator_type & D.98565;
  bool D.98560;
  struct _Alloc_hider * _1;
  char[16] * _4;
  char[16] * _5;
  long unsigned int _7;
  long unsigned int _9;
  struct _Alloc_hider * _12;
  char[16] * _19;
  struct allocator_type & _21;
  const char[16] * _24;
  char * _29;
  char_type * _34;
  char_type * _35;
  long unsigned int _36;
  char * _37;
  char * _38;
  char[16] * _40;
  long unsigned int _41;

  <bb 2> :
  gimple_assign <constructor, *this_15(D), {CLOBBER}, NULL, NULL>
  gimple_assign <addr_expr, _1, &this_15(D)->_M_dataplus, NULL, NULL>
  gimple_assign <addr_expr, _19, &this_15(D)->D.28191._M_local_buf, NULL, NULL>
  gimple_assign <addr_expr, _21, &__str_18(D)->_M_dataplus, NULL, NULL>
  gimple_assign <constructor, MEM[(struct _Alloc_hider *)this_15(D)], {CLOBBER}, NULL, NULL>
  gimple_assign <ssa_name, MEM[(struct _Alloc_hider *)this_15(D)]._M_p, _19, NULL, NULL>
  gimple_assign <component_ref, _29, MEM[(const struct basic_string *)__str_18(D)]._M_dataplus._M_p, NULL, NULL>
  gimple_assign <addr_expr, _24, &MEM[(const struct basic_string *)__str_18(D)].D.28191._M_local_buf, NULL, NULL>
  gimple_cond <eq_expr, _24, _29, NULL, NULL>
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  gimple_assign <addr_expr, _4, &this_15(D)->D.28191._M_local_buf, NULL, NULL>
  gimple_assign <addr_expr, _5, &__str_18(D)->D.28191._M_local_buf, NULL, NULL>
  gimple_assign <component_ref, _36, MEM[(const struct basic_string *)__str_18(D)]._M_string_length, NULL, NULL>
  gimple_assign <plus_expr, _7, _36, 1, NULL>
  gimple_cond <eq_expr, _7, 0, NULL, NULL>
    goto <bb 5>; [51.12%]
  else
    goto <bb 4>; [48.88%]

  <bb 4> :
  gimple_call <__builtin_memcpy, _34, _4, _5, _7>

  <bb 5> :
  # gimple_phi <_35, _4(3), _34(4)>
  goto <bb 7>; [100.00%]

  <bb 6> :
  gimple_assign <component_ref, _37, MEM[(const struct basic_string *)__str_18(D)]._M_dataplus._M_p, NULL, NULL>
  gimple_assign <ssa_name, *this_15(D)._M_dataplus._M_p, _37, NULL, NULL>
  gimple_assign <component_ref, _9, *__str_18(D).D.28191._M_allocated_capacity, NULL, NULL>
  gimple_assign <ssa_name, *this_15(D).D.28191._M_allocated_capacity, _9, NULL, NULL>

  <bb 7> :
  gimple_assign <component_ref, _41, MEM[(const struct basic_string *)__str_18(D)]._M_string_length, NULL, NULL>
  gimple_assign <ssa_name, *this_15(D)._M_string_length, _41, NULL, NULL>
  gimple_assign <addr_expr, _40, &__str_18(D)->D.28191._M_local_buf, NULL, NULL>
  gimple_assign <ssa_name, *__str_18(D)._M_dataplus._M_p, _40, NULL, NULL>
  gimple_assign <integer_cst, *__str_18(D)._M_string_length, 0, NULL, NULL>
  gimple_assign <component_ref, _38, MEM[(const struct basic_string *)__str_18(D)]._M_dataplus._M_p, NULL, NULL>
  gimple_assign <integer_cst, MEM[(char_type &)_38], 0, NULL, NULL>
  gimple_return <NULL>

}



;; Function std::operator+<char, std::char_traits<char>, std::allocator<char> > (_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_, funcdef_no=3962, decl_uid=37465, cgraph_uid=1441, symbol_order=2007)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__lhs = &NONLOCAL
__rhs = &NONLOCAL
D.91908 = &NONLOCAL
callescape(12) = NONLOCAL
CALLUSED(13) = callescape(12)
callarg(15) = __rhs
callarg(15) = callarg(15) + UNKNOWN
callarg(15) = *callarg(15) + UNKNOWN
CALLUSED(13) = callarg(15)
*callarg(15) = callescape(12)
CALLCLOBBERED(14) = callarg(15)
callescape(12) = callarg(15)
ESCAPED = __rhs
callarg(16) = &NULL
callarg(16) = callarg(16) + UNKNOWN
callarg(16) = *callarg(16) + UNKNOWN
CALLUSED(13) = callarg(16)
*callarg(16) = callescape(12)
CALLCLOBBERED(14) = callarg(16)
callescape(12) = callarg(16)
ESCAPED = &NULL
callarg(17) = __lhs
callarg(17) = callarg(17) + UNKNOWN
callarg(17) = *callarg(17) + UNKNOWN
CALLUSED(13) = callarg(17)
*callarg(17) = callescape(12)
CALLCLOBBERED(14) = callarg(17)
callescape(12) = callarg(17)
ESCAPED = __lhs
_6 = NONLOCAL
_6 = callarg(15)
_6 = callarg(16)
_6 = callarg(17)
callescape(20) = &NONLOCAL
CALLUSED(21) = callescape(20)
callarg(23) = D.91908
callarg(23) = callarg(23) + UNKNOWN
callarg(23) = *callarg(23) + UNKNOWN
CALLUSED(21) = callarg(23)
*callarg(23) = callescape(20)
CALLCLOBBERED(22) = callarg(23)
callescape(20) = callarg(23)
callarg(24) = _6
callarg(24) = callarg(24) + UNKNOWN
callarg(24) = *callarg(24) + UNKNOWN
CALLUSED(21) = callarg(24)
*callarg(24) = callescape(20)
CALLCLOBBERED(22) = callarg(24)
callescape(20) = callarg(24)

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__lhs = { NONLOCAL }
__rhs = { NONLOCAL } same as __lhs
D.91908 = { NONLOCAL } same as __lhs
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEmPKc = { }
callescape(12) = { NULL ESCAPED NONLOCAL }
CALLUSED(13) = { NULL ESCAPED NONLOCAL } same as callescape(12)
CALLCLOBBERED(14) = { NULL ESCAPED NONLOCAL }
callarg(15) = { ESCAPED NONLOCAL }
callarg(16) = { NULL }
callarg(17) = { ESCAPED NONLOCAL }
_6 = { NULL ESCAPED NONLOCAL } same as callescape(12)
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_ = { }
callescape(20) = { NULL ESCAPED NONLOCAL }
CALLUSED(21) = { NULL ESCAPED NONLOCAL } same as callescape(20)
CALLCLOBBERED(22) = { NULL ESCAPED NONLOCAL } same as callescape(20)
callarg(23) = { ESCAPED NONLOCAL }
callarg(24) = { NULL ESCAPED NONLOCAL }
_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_ = { }


Alias information for std::operator+<char, std::char_traits<char>, std::allocator<char> >(char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

__rhs_3(D), points-to non-local, points-to vars: { }
__lhs_4(D), points-to non-local, points-to NULL, points-to vars: { }
_6, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_7(D), points-to non-local, points-to NULL, points-to vars: { }

struct basic_string std::operator+<char, std::char_traits<char>, std::allocator<char> > (const char * __lhs, struct basic_string & __rhs)
{
  struct basic_string & _6;
  struct basic_string & _7(D);

  <bb 2> :
  gimple_call <insert, _6, __rhs_3(D), 0, __lhs_4(D)>
  gimple_call <__ct_comp , NULL, _7(D), _6>
  gimple_return <_7(D)>

}



;; Function std::__distance<char const*> (_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag, funcdef_no=4476, decl_uid=95811, cgraph_uid=1955, symbol_order=2539)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__first = &NONLOCAL
__last = &NONLOCAL
D.96410 = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__first = { NONLOCAL }
__last = { NONLOCAL } same as __first
D.96410 = { NONLOCAL } same as __first
_3 = { }
_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag = { }


Alias information for std::__distance<char const*>(char const*, char const*, std::random_access_iterator_tag)std::iterator_traits<char const*>::difference_type

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information

__last_1(D), points-to non-local, points-to NULL, points-to vars: { }
__first_2(D), points-to non-local, points-to NULL, points-to vars: { }

difference_type std::__distance<char const*> (const char * __first, const char * __last, struct random_access_iterator_tag D.96410)
{
  difference_type _3;

  <bb 2> :
  gimple_assign <pointer_diff_expr, _3, __last_1(D), __first_2(D), NULL>
  gimple_return <_3>

}



;; Function std::distance<char const*> (_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_, funcdef_no=4353, decl_uid=93717, cgraph_uid=1833, symbol_order=2417)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__first = &NONLOCAL
__last = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__first = { NONLOCAL }
__last = { NONLOCAL } same as __first
_5 = { }
_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_ = { }


Alias information for std::distance<char const*>(char const*, char const*)std::iterator_traits<char const*>::difference_type

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information

__first_2(D), points-to non-local, points-to NULL, points-to vars: { }
__last_4(D), points-to non-local, points-to NULL, points-to vars: { }

__attribute__((nodiscard))
difference_type std::distance<char const*> (const char * __first, const char * __last)
{
  difference_type D.98597;
  long int _5;

  <bb 2> :
  gimple_assign <pointer_diff_expr, _5, __last_4(D), __first_2(D), NULL>
  gimple_return <_5>

}



;; Function std::__distance<char*> (_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag, funcdef_no=4513, decl_uid=96123, cgraph_uid=1992, symbol_order=2576)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__first = &NONLOCAL
__last = &NONLOCAL
D.96582 = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__first = { NONLOCAL }
__last = { NONLOCAL } same as __first
D.96582 = { NONLOCAL } same as __first
_3 = { }
_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag = { }


Alias information for std::__distance<char*>(char*, char*, std::random_access_iterator_tag)std::iterator_traits<char*>::difference_type

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information

__last_1(D), points-to non-local, points-to NULL, points-to vars: { }
__first_2(D), points-to non-local, points-to NULL, points-to vars: { }

difference_type std::__distance<char*> (char * __first, char * __last, struct random_access_iterator_tag D.96582)
{
  difference_type _3;

  <bb 2> :
  gimple_assign <pointer_diff_expr, _3, __last_1(D), __first_2(D), NULL>
  gimple_return <_3>

}



;; Function std::distance<char*> (_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_, funcdef_no=4407, decl_uid=94913, cgraph_uid=1886, symbol_order=2470)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__first = &NONLOCAL
__last = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__first = { NONLOCAL }
__last = { NONLOCAL } same as __first
_5 = { }
_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_ = { }


Alias information for std::distance<char*>(char*, char*)std::iterator_traits<char*>::difference_type

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information

__first_2(D), points-to non-local, points-to NULL, points-to vars: { }
__last_4(D), points-to non-local, points-to NULL, points-to vars: { }

__attribute__((nodiscard))
difference_type std::distance<char*> (char * __first, char * __last)
{
  difference_type D.98603;
  long int _5;

  <bb 2> :
  gimple_assign <pointer_diff_expr, _5, __last_4(D), __first_2(D), NULL>
  gimple_return <_5>

}



;; Function std::__new_allocator<char>::deallocate (_ZNSt15__new_allocatorIcE10deallocateEPcm, funcdef_no=4516, decl_uid=12213, cgraph_uid=1995, symbol_order=2579)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__p = &NONLOCAL
__n = &NONLOCAL
callescape(12) = NONLOCAL
CALLUSED(13) = callescape(12)
callarg(15) = __p
callarg(15) = callarg(15) + UNKNOWN
callarg(15) = *callarg(15) + UNKNOWN
CALLUSED(13) = callarg(15)
*callarg(15) = callescape(12)
CALLCLOBBERED(14) = callarg(15)
callescape(12) = callarg(15)
ESCAPED = __p
callarg(16) = __n
callarg(16) = callarg(16) + UNKNOWN
callarg(16) = *callarg(16) + UNKNOWN
CALLUSED(13) = callarg(16)
*callarg(16) = callescape(12)
CALLCLOBBERED(14) = callarg(16)
callescape(12) = callarg(16)
ESCAPED = __n

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__p = { NONLOCAL } same as this
__n = { NONLOCAL } same as this
_ZdlPvm = { }
callescape(12) = { ESCAPED NONLOCAL }
CALLUSED(13) = { ESCAPED NONLOCAL } same as callescape(12)
CALLCLOBBERED(14) = { ESCAPED NONLOCAL }
callarg(15) = { ESCAPED NONLOCAL }
callarg(16) = { ESCAPED NONLOCAL }


Alias information for std::__new_allocator<char>::deallocate(char*, unsigned long)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__p_2(D), points-to non-local, points-to NULL, points-to vars: { }

void std::__new_allocator<char>::deallocate (struct __new_allocator * const this, char * __p, size_type __n)
{
  <bb 2> :
  gimple_call <operator delete, NULL, __p_2(D), __n_3(D)>
  gimple_return <NULL>

}



;; Function std::allocator_traits<std::allocator<char> >::deallocate (_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcm, funcdef_no=4412, decl_uid=28033, cgraph_uid=1891, symbol_order=2475)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__a = &NONLOCAL
__p = &NONLOCAL
__n = &NONLOCAL
callescape(12) = NONLOCAL
CALLUSED(13) = callescape(12)
callarg(15) = __p
callarg(15) = callarg(15) + UNKNOWN
callarg(15) = *callarg(15) + UNKNOWN
CALLUSED(13) = callarg(15)
*callarg(15) = callescape(12)
CALLCLOBBERED(14) = callarg(15)
callescape(12) = callarg(15)
ESCAPED = __p
callarg(16) = __n
callarg(16) = callarg(16) + UNKNOWN
callarg(16) = *callarg(16) + UNKNOWN
CALLUSED(13) = callarg(16)
*callarg(16) = callescape(12)
CALLCLOBBERED(14) = callarg(16)
callescape(12) = callarg(16)
ESCAPED = __n

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__a = { NONLOCAL }
__p = { NONLOCAL } same as __a
__n = { NONLOCAL } same as __a
_ZdlPvm = { }
callescape(12) = { ESCAPED NONLOCAL }
CALLUSED(13) = { ESCAPED NONLOCAL } same as callescape(12)
CALLCLOBBERED(14) = { ESCAPED NONLOCAL }
callarg(15) = { ESCAPED NONLOCAL }
callarg(16) = { ESCAPED NONLOCAL }


Alias information for std::allocator_traits<std::allocator<char> >::deallocate(std::allocator<char>&, char*, unsigned long)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__a_2(D), points-to non-local, points-to vars: { }
__p_3(D), points-to non-local, points-to NULL, points-to vars: { }

void std::allocator_traits<std::allocator<char> >::deallocate (struct allocator_type & __a, char * __p, size_type __n)
{
  <bb 2> :
  gimple_call <operator delete, NULL, __p_3(D), __n_4(D)>
  gimple_return <NULL>

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_destroy (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_destroyEm, funcdef_no=4251, decl_uid=28221, cgraph_uid=1730, symbol_order=2314)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__size = &NONLOCAL
_6 = this + UNKNOWN
_7 = *this
_3 = __size + UNKNOWN
_3 = &NONLOCAL
callescape(14) = NONLOCAL
CALLUSED(15) = callescape(14)
callarg(17) = _7
callarg(17) = callarg(17) + UNKNOWN
callarg(17) = *callarg(17) + UNKNOWN
CALLUSED(15) = callarg(17)
*callarg(17) = callescape(14)
CALLCLOBBERED(16) = callarg(17)
callescape(14) = callarg(17)
ESCAPED = _7
callarg(18) = _3
callarg(18) = callarg(18) + UNKNOWN
callarg(18) = *callarg(18) + UNKNOWN
CALLUSED(15) = callarg(18)
*callarg(18) = callescape(14)
CALLCLOBBERED(16) = callarg(18)
callescape(14) = callarg(18)
ESCAPED = _3

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__size = { NONLOCAL } same as this
_6 = { NONLOCAL }
_7 = { ESCAPED NONLOCAL }
_3 = { NONLOCAL }
_ZdlPvm = { }
callescape(14) = { ESCAPED NONLOCAL }
CALLUSED(15) = { ESCAPED NONLOCAL } same as callescape(14)
CALLCLOBBERED(16) = { ESCAPED NONLOCAL }
callarg(17) = { ESCAPED NONLOCAL }
callarg(18) = { ESCAPED NONLOCAL }


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_destroy(unsigned long)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_5(D), points-to non-local, points-to vars: { }
_6, points-to non-local, points-to NULL, points-to vars: { }
_7, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_destroy (struct basic_string * const this, size_type __size)
{
  struct allocator_type & D.98616;
  char * D.98614;
  long unsigned int _3;
  struct allocator_type & _6;
  char * _7;

  <bb 2> :
  gimple_assign <addr_expr, _6, &this_5(D)->_M_dataplus, NULL, NULL>
  gimple_assign <component_ref, _7, MEM[(const struct basic_string *)this_5(D)]._M_dataplus._M_p, NULL, NULL>
  gimple_assign <plus_expr, _3, __size_8(D), 1, NULL>
  gimple_call <operator delete, NULL, _7, _3>
  gimple_return <NULL>

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv, funcdef_no=4112, decl_uid=28219, cgraph_uid=1591, symbol_order=2167)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_6 = *this
_10 = this + UNKNOWN
_2 = *this + 128
_12 = *this
_13 = _2 + UNKNOWN
_13 = &NONLOCAL
callescape(16) = NONLOCAL
CALLUSED(17) = callescape(16)
callarg(19) = _12
callarg(19) = callarg(19) + UNKNOWN
callarg(19) = *callarg(19) + UNKNOWN
CALLUSED(17) = callarg(19)
*callarg(19) = callescape(16)
CALLCLOBBERED(18) = callarg(19)
callescape(16) = callarg(19)
ESCAPED = _12
callarg(20) = _13
callarg(20) = callarg(20) + UNKNOWN
callarg(20) = *callarg(20) + UNKNOWN
CALLUSED(17) = callarg(20)
*callarg(20) = callescape(16)
CALLCLOBBERED(18) = callarg(20)
callescape(16) = callarg(20)
ESCAPED = _13

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_6 = { ESCAPED NONLOCAL }
_10 = { NONLOCAL }
_11 = { }
_2 = { ESCAPED NONLOCAL }
_12 = { ESCAPED NONLOCAL } same as _6
_13 = { ESCAPED NONLOCAL }
_ZdlPvm = { }
callescape(16) = { ESCAPED NONLOCAL }
CALLUSED(17) = { ESCAPED NONLOCAL } same as callescape(16)
CALLCLOBBERED(18) = { ESCAPED NONLOCAL }
callarg(19) = { ESCAPED NONLOCAL }
callarg(20) = { ESCAPED NONLOCAL }


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_5(D), points-to non-local, points-to vars: { }
_6, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_10, points-to non-local, points-to NULL, points-to vars: { }
_12, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose (struct basic_string * const this)
{
  bool D.98619;
  long unsigned int _2;
  char * _6;
  const char[16] * _10;
  bool _11;
  char * _12;
  long unsigned int _13;

  <bb 2> :
  gimple_assign <component_ref, _6, MEM[(const struct basic_string *)this_5(D)]._M_dataplus._M_p, NULL, NULL>
  gimple_assign <addr_expr, _10, &MEM[(const struct basic_string *)this_5(D)].D.28191._M_local_buf, NULL, NULL>
  gimple_assign <eq_expr, _11, _6, _10, NULL>
  gimple_cond <ne_expr, _6, _10, NULL, NULL>
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  gimple_assign <component_ref, _2, this_5(D)->D.28191._M_allocated_capacity, NULL, NULL>
  gimple_assign <component_ref, _12, MEM[(const struct basic_string *)this_5(D)]._M_dataplus._M_p, NULL, NULL>
  gimple_assign <plus_expr, _13, _2, 1, NULL>
  gimple_call <operator delete, NULL, _12, _13>

  <bb 4> :
  gimple_return <NULL>

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)::_Guard::~_Guard (_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD2Ev, funcdef_no=4140, decl_uid=93738, cgraph_uid=1618, symbol_order=2194)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_1 = *this
_2 = *this
_8 = *_2
_9 = _2 + UNKNOWN
_10 = *_2 + 128
_11 = _10 + UNKNOWN
_11 = &NONLOCAL
callescape(16) = NONLOCAL
CALLUSED(17) = callescape(16)
callarg(19) = _8
callarg(19) = callarg(19) + UNKNOWN
callarg(19) = *callarg(19) + UNKNOWN
CALLUSED(17) = callarg(19)
*callarg(19) = callescape(16)
CALLCLOBBERED(18) = callarg(19)
callescape(16) = callarg(19)
ESCAPED = _8
callarg(20) = _11
callarg(20) = callarg(20) + UNKNOWN
callarg(20) = *callarg(20) + UNKNOWN
CALLUSED(17) = callarg(20)
*callarg(20) = callescape(16)
CALLCLOBBERED(18) = callarg(20)
callescape(16) = callarg(20)
ESCAPED = _11

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_1 = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL } same as _1
_8 = { ESCAPED NONLOCAL }
_9 = { ESCAPED NONLOCAL }
_10 = { ESCAPED NONLOCAL }
_11 = { ESCAPED NONLOCAL }
_ZdlPvm = { }
callescape(16) = { ESCAPED NONLOCAL }
CALLUSED(17) = { ESCAPED NONLOCAL } same as callescape(16)
CALLCLOBBERED(18) = { ESCAPED NONLOCAL }
callarg(19) = { ESCAPED NONLOCAL }
callarg(20) = { ESCAPED NONLOCAL }


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)::_Guard::~_Guard()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_2, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
this_5(D), points-to non-local, points-to vars: { }
_8, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_9, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)::_Guard::~_Guard (struct _Guard * const this)
{
  struct basic_string * _1;
  struct basic_string * _2;
  char * _8;
  const char[16] * _9;
  long unsigned int _10;
  long unsigned int _11;

  <bb 2> :
  gimple_assign <component_ref, _1, this_5(D)->_M_guarded, NULL, NULL>
  gimple_cond <ne_expr, _1, 0B, NULL, NULL>
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  gimple_assign <component_ref, _2, this_5(D)->_M_guarded, NULL, NULL>
  gimple_assign <component_ref, _8, MEM[(const struct basic_string *)_2]._M_dataplus._M_p, NULL, NULL>
  gimple_assign <addr_expr, _9, &MEM[(const struct basic_string *)_2].D.28191._M_local_buf, NULL, NULL>
  gimple_cond <ne_expr, _8, _9, NULL, NULL>
    goto <bb 4>; [53.47%]
  else
    goto <bb 5>; [46.53%]

  <bb 4> :
  gimple_assign <component_ref, _10, _2->D.28191._M_allocated_capacity, NULL, NULL>
  gimple_assign <plus_expr, _11, _10, 1, NULL>
  gimple_call <operator delete, NULL, _8, _11>

  <bb 5> :

  <bb 6> :
  gimple_assign <constructor, *this_5(D), {CLOBBER}, NULL, NULL>
  gimple_return <NULL>

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*> (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag, funcdef_no=4135, decl_uid=91567, cgraph_uid=1620, symbol_order=2196)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__beg = &NONLOCAL
__end = &NONLOCAL
D.93714 = &NONLOCAL
_2 = _12
__dnew = _2
__dnew.2_3 = __dnew
callescape(17) = NONLOCAL
CALLUSED(18) = callescape(17)
callarg(20) = this
callarg(20) = callarg(20) + UNKNOWN
callarg(20) = *callarg(20) + UNKNOWN
CALLUSED(18) = callarg(20)
*callarg(20) = callescape(17)
CALLCLOBBERED(19) = callarg(20)
callescape(17) = callarg(20)
ESCAPED = this
callarg(21) = &__dnew
callarg(21) = callarg(21) + UNKNOWN
callarg(21) = *callarg(21) + UNKNOWN
CALLUSED(18) = callarg(21)
*callarg(21) = callescape(17)
CALLCLOBBERED(19) = callarg(21)
callescape(17) = callarg(21)
ESCAPED = &__dnew
callarg(22) = &NULL
callarg(22) = callarg(22) + UNKNOWN
callarg(22) = *callarg(22) + UNKNOWN
CALLUSED(18) = callarg(22)
*callarg(22) = callescape(17)
CALLCLOBBERED(19) = callarg(22)
callescape(17) = callarg(22)
ESCAPED = &NULL
_18 = NONLOCAL
_18 = callarg(20)
_18 = callarg(21)
_18 = callarg(22)
*this = _18
__dnew.3_5 = __dnew
*this + 128 = __dnew.3_5
_31 = this + UNKNOWN
__guard = this
_37 = *this
_35 = _34
_36 = *__beg
*_37 = _36
callescape(32) = NONLOCAL
CALLUSED(33) = callescape(32)
callarg(35) = _37
callarg(35) = callarg(35) + UNKNOWN
callarg(35) = *callarg(35) + UNKNOWN
CALLUSED(33) = callarg(35)
*callarg(35) = callescape(32)
CALLCLOBBERED(34) = callarg(35)
callescape(32) = callarg(35)
ESCAPED = _37
callarg(36) = __beg
callarg(36) = callarg(36) + UNKNOWN
callarg(36) = *callarg(36) + UNKNOWN
CALLUSED(33) = callarg(36)
*callarg(36) = callescape(32)
CALLCLOBBERED(34) = callarg(36)
callescape(32) = callarg(36)
ESCAPED = __beg
callarg(37) = _35
callarg(37) = callarg(37) + UNKNOWN
callarg(37) = *callarg(37) + UNKNOWN
CALLUSED(33) = callarg(37)
*callarg(37) = callescape(32)
CALLCLOBBERED(34) = callarg(37)
callescape(32) = callarg(37)
ESCAPED = _35
__guard = &NULL
__dnew.4_7 = __dnew
*this + 64 = __dnew.4_7
_32 = *this
_33 = _32 + UNKNOWN
derefaddrtmp(41) = &NULL
*_33 = derefaddrtmp(41)
callescape(43) = NONLOCAL
CALLUSED(44) = callescape(43)
callarg(46) = &__guard
callarg(46) = callarg(46) + UNKNOWN
indircallarg(47) = *callarg(46) + UNKNOWN
indircallarg(47) = indircallarg(47) + UNKNOWN
indircallarg(47) = *indircallarg(47) + UNKNOWN
CALLUSED(44) = callarg(46)
CALLUSED(44) = indircallarg(47)
*callarg(46) = callescape(43)
CALLCLOBBERED(45) = callarg(46)
*indircallarg(47) = callescape(43)
CALLCLOBBERED(45) = indircallarg(47)
callescape(43) = indircallarg(47)
ESCAPED = *callarg(46) + UNKNOWN

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL __dnew }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__dnew = { NULL ESCAPED NONLOCAL __dnew } same as __dnew.2_3
__guard = { NULL ESCAPED NONLOCAL }
this = { NONLOCAL }
__beg = { NONLOCAL } same as this
__end = { NONLOCAL } same as this
D.93714 = { NONLOCAL } same as this
_12 = { }
_2 = { }
__dnew.2_3 = { NULL ESCAPED NONLOCAL __dnew }
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm = { }
callescape(17) = { NULL ESCAPED NONLOCAL __dnew }
CALLUSED(18) = { NULL ESCAPED NONLOCAL __dnew } same as callescape(17)
CALLCLOBBERED(19) = { NULL ESCAPED NONLOCAL __dnew }
callarg(20) = { ESCAPED NONLOCAL }
callarg(21) = { NULL ESCAPED NONLOCAL __dnew }
callarg(22) = { NULL }
_18 = { NULL ESCAPED NONLOCAL __dnew } same as callescape(17)
__dnew.3_5 = { NULL ESCAPED NONLOCAL __dnew } same as __dnew.2_3
_31 = { NONLOCAL }
_37 = { ESCAPED NONLOCAL }
_34 = { }
_35 = { }
_36 = { ESCAPED NONLOCAL }
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm.part.0 = { }
callescape(32) = { ESCAPED NONLOCAL }
CALLUSED(33) = { ESCAPED NONLOCAL } same as callescape(32)
CALLCLOBBERED(34) = { ESCAPED NONLOCAL } same as callescape(32)
callarg(35) = { ESCAPED NONLOCAL }
callarg(36) = { ESCAPED NONLOCAL }
callarg(37) = { }
__dnew.4_7 = { NULL ESCAPED NONLOCAL __dnew } same as __dnew.2_3
_32 = { ESCAPED NONLOCAL } same as _37
_33 = { ESCAPED NONLOCAL }
derefaddrtmp(41) = { NULL }
_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev = { }
callescape(43) = { NULL ESCAPED NONLOCAL }
CALLUSED(44) = { NULL ESCAPED NONLOCAL __guard }
CALLCLOBBERED(45) = { NULL ESCAPED NONLOCAL __guard }
callarg(46) = { __guard }
indircallarg(47) = { NULL ESCAPED NONLOCAL }


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)void

Aliased symbols

__guard, UID D.93754, struct _Guard, is addressable
__dnew, UID D.93716, size_type, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.93716 } (escaped)

Flow-insensitive points-to information

__beg_10(D), points-to non-local, points-to NULL, points-to vars: { }
__end_11(D), points-to non-local, points-to NULL, points-to vars: { }
this_15(D), points-to non-local, points-to vars: { }
_18, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.93716 } (escaped)
_31, points-to non-local, points-to NULL, points-to vars: { }
_32, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_33, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_37, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*> (struct basic_string * const this, const char * __beg, const char * __end, struct forward_iterator_tag D.93714)
{
  char * D.98642;
  char * D.98635;
  difference_type D.98629;
  struct _Guard __guard;
  size_type __dnew;
  long unsigned int _2;
  long unsigned int __dnew.2_3;
  long unsigned int __dnew.3_5;
  long unsigned int __dnew.4_7;
  long int _12;
  char * _18;
  char[16] * _31;
  char * _32;
  char * _33;
  long int _34;
  long unsigned int _35;
  char _36;
  char * _37;

  <bb 2> :
  gimple_assign <pointer_diff_expr, _12, __end_11(D), __beg_10(D), NULL>
  gimple_assign <nop_expr, _2, _12, NULL, NULL>
  gimple_assign <ssa_name, __dnew, _2, NULL, NULL>
  gimple_assign <var_decl, __dnew.2_3, __dnew, NULL, NULL>
  gimple_cond <gt_expr, __dnew.2_3, 15, NULL, NULL>
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  gimple_call <_M_create, _18, this_15(D), &__dnew, 0>

  <bb 4> :
  gimple_assign <ssa_name, this_15(D)->_M_dataplus._M_p, _18, NULL, NULL>
  gimple_assign <var_decl, __dnew.3_5, __dnew, NULL, NULL>
  gimple_assign <ssa_name, this_15(D)->D.28191._M_allocated_capacity, __dnew.3_5, NULL, NULL>
  goto <bb 6>; [100.00%]

  <bb 5> :
  gimple_assign <addr_expr, _31, &this_15(D)->D.28191._M_local_buf, NULL, NULL>

  <bb 6> :
  gimple_assign <constructor, __guard, {CLOBBER}, NULL, NULL>
  gimple_assign <ssa_name, __guard._M_guarded, this_15(D), NULL, NULL>
  gimple_assign <component_ref, _37, MEM[(const struct basic_string *)this_15(D)]._M_dataplus._M_p, NULL, NULL>
  gimple_assign <pointer_diff_expr, _34, __end_11(D), __beg_10(D), NULL>
  gimple_assign <nop_expr, _35, _34, NULL, NULL>
  gimple_cond <eq_expr, _35, 1, NULL, NULL>
    goto <bb 7>; [34.00%]
  else
    goto <bb 8>; [66.00%]

  <bb 7> :
  gimple_assign <mem_ref, _36, MEM[(const char_type &)__beg_10(D)], NULL, NULL>
  gimple_assign <ssa_name, MEM[(char_type &)_37], _36, NULL, NULL>
  goto <bb 9>; [100.00%]

  <bb 8> :
  gimple_call <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm.part.0, NULL, _37, __beg_10(D), _35>

  <bb 9> :
  gimple_assign <integer_cst, __guard._M_guarded, 0B, NULL, NULL>
  gimple_assign <var_decl, __dnew.4_7, __dnew, NULL, NULL>
  gimple_assign <ssa_name, this_15(D)->_M_string_length, __dnew.4_7, NULL, NULL>
  gimple_assign <component_ref, _32, MEM[(const struct basic_string *)this_15(D)]._M_dataplus._M_p, NULL, NULL>
  gimple_assign <pointer_plus_expr, _33, _32, __dnew.4_7, NULL>
  gimple_assign <integer_cst, MEM[(char_type &)_33], 0, NULL, NULL>
  gimple_call <__dt_comp , NULL, &__guard>
  gimple_assign <constructor, __dnew, {CLOBBER(eol)}, NULL, NULL>
  gimple_assign <constructor, __guard, {CLOBBER(eol)}, NULL, NULL>
  gimple_return <NULL>

  <bb 10> :
gimple_label <<L3>>
  gimple_assign <constructor, __dnew, {CLOBBER(eol)}, NULL, NULL>
  gimple_assign <constructor, __guard, {CLOBBER(eol)}, NULL, NULL>
  gimple_resx <1>

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> > (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_, funcdef_no=4041, decl_uid=33889, cgraph_uid=1520, symbol_order=2091)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &PARM_NOALIAS.0+64
PARM_NOALIAS.0+64 = &NONLOCAL
PARM_NOALIAS.64+192 = &NONLOCAL
__s = &NONLOCAL
__a = &NONLOCAL
_1 = this + UNKNOWN
_13 = this + UNKNOWN
*this = _13
callescape(16) = NONLOCAL
CALLUSED(17) = callescape(16)
callarg(19) = &STRING
callarg(19) = callarg(19) + UNKNOWN
callarg(19) = *callarg(19) + UNKNOWN
CALLUSED(17) = callarg(19)
*callarg(19) = callescape(16)
CALLCLOBBERED(18) = callarg(19)
callescape(16) = callarg(19)
ESCAPED = &STRING
CALLUSED(20) = CALLUSED(20) + UNKNOWN
CALLUSED(20) = __s
__end_15 = __s + UNKNOWN
callescape(24) = NONLOCAL
CALLUSED(25) = callescape(24)
callarg(27) = this
callarg(27) = callarg(27) + UNKNOWN
callarg(27) = *callarg(27) + UNKNOWN
CALLUSED(25) = callarg(27)
*callarg(27) = callescape(24)
CALLCLOBBERED(26) = callarg(27)
callescape(24) = callarg(27)
ESCAPED = this
callarg(28) = __s
callarg(28) = callarg(28) + UNKNOWN
callarg(28) = *callarg(28) + UNKNOWN
CALLUSED(25) = callarg(28)
*callarg(28) = callescape(24)
CALLCLOBBERED(26) = callarg(28)
callescape(24) = callarg(28)
ESCAPED = __s
callarg(29) = __end_15
callarg(29) = callarg(29) + UNKNOWN
callarg(29) = *callarg(29) + UNKNOWN
CALLUSED(25) = callarg(29)
callarg(30) = D.97469
callarg(30) = callarg(30) + UNKNOWN
callarg(30) = *callarg(30) + UNKNOWN
CALLUSED(25) = callarg(30)
*callarg(30) = callescape(24)
CALLCLOBBERED(26) = callarg(30)
callescape(24) = callarg(30)
ESCAPED = D.97469

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { STRING ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+192 }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
PARM_NOALIAS.0+64 = { ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+192 }
PARM_NOALIAS.64+192 = { ESCAPED NONLOCAL }
this = { PARM_NOALIAS.0+64 }
__s = { NONLOCAL }
__a = { NONLOCAL } same as __s
_1 = { PARM_NOALIAS.0+64 PARM_NOALIAS.64+192 }
_13 = { PARM_NOALIAS.0+64 PARM_NOALIAS.64+192 }
_ZSt19__throw_logic_errorPKc = { }
callescape(16) = { STRING ESCAPED NONLOCAL }
CALLUSED(17) = { STRING ESCAPED NONLOCAL } same as callescape(16)
CALLCLOBBERED(18) = { STRING } same as callarg(19)
callarg(19) = { STRING }
CALLUSED(20) = { NONLOCAL }
CALLCLOBBERED(21) = { }
__end_15 = { NONLOCAL }
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag = { }
callescape(24) = { ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+192 }
CALLUSED(25) = { ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+192 }
CALLCLOBBERED(26) = { ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+192 }
callarg(27) = { ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+192 }
callarg(28) = { ESCAPED NONLOCAL }
callarg(29) = { ESCAPED NONLOCAL }
callarg(30) = { }
D.97469 = { }


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.98654 } (nonlocal, escaped, restrict)

Flow-insensitive points-to information

_1, points-to NULL, points-to vars: { D.98654 } (nonlocal, escaped, restrict)
this_7(D), points-to vars: { D.98654 } (nonlocal, escaped, restrict)
__a_10(D), points-to non-local, points-to vars: { }
__s_12(D), points-to non-local, points-to NULL, points-to vars: { }
_13, points-to NULL, points-to vars: { D.98654 } (nonlocal, escaped, restrict)
__end_15, points-to non-local, points-to NULL, points-to vars: { }

void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> > (struct basic_string * const this, const char * __s, const struct allocator & __a)
{
  size_t D.98652;
  char * D.98650;
  const char * __end;
  struct forward_iterator_tag D.97469;
  struct _Alloc_hider * _1;
  char[16] * _13;
  long unsigned int _19;

  <bb 2> :
  gimple_assign <constructor, *this_7(D), {CLOBBER}, NULL, NULL>
  gimple_assign <addr_expr, _1, &this_7(D)->_M_dataplus, NULL, NULL>
  gimple_assign <addr_expr, _13, &this_7(D)->D.28191._M_local_buf, NULL, NULL>
  gimple_assign <constructor, MEM[(struct _Alloc_hider *)this_7(D)], {CLOBBER}, NULL, NULL>
  gimple_assign <ssa_name, MEM[(struct _Alloc_hider *)this_7(D)]._M_p, _13, NULL, NULL>
  gimple_cond <eq_expr, __s_12(D), 0B, NULL, NULL>
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  gimple_call <__throw_logic_error, NULL, "basic_string: construction from null is not valid">

  <bb 4> :
  gimple_call <__builtin_strlen, _19, __s_12(D)>
  gimple_assign <pointer_plus_expr, __end_15, __s_12(D), _19, NULL>
  gimple_call <_M_construct, NULL, this_7(D), __s_12(D), __end_15, D.97469>

  <bb 5> :
  gimple_return <NULL>

  <bb 6> :
gimple_label <<L2>>
  gimple_assign <constructor, MEM[(struct _Alloc_hider *)this_7(D)], {CLOBBER}, NULL, NULL>
  gimple_resx <1>

}



;; Function __static_initialization_and_destruction_0 (_Z41__static_initialization_and_destruction_0ii, funcdef_no=4664, decl_uid=97412, cgraph_uid=2143, symbol_order=2851)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__initialize_p = &NONLOCAL
__priority = &NONLOCAL
callescape(11) = NONLOCAL
CALLUSED(12) = callescape(11)
_ZStL8__ioinit = NONLOCAL
callarg(14) = &_ZStL8__ioinit
callarg(14) = callarg(14) + UNKNOWN
callarg(14) = *callarg(14) + UNKNOWN
CALLUSED(12) = callarg(14)
*callarg(14) = callescape(11)
CALLCLOBBERED(13) = callarg(14)
callescape(11) = callarg(14)
ESCAPED = &_ZStL8__ioinit
callescape(17) = NONLOCAL
CALLUSED(18) = callescape(17)
callarg(20) = &_ZNSt8ios_base4InitD1Ev
callarg(20) = callarg(20) + UNKNOWN
callarg(20) = *callarg(20) + UNKNOWN
CALLUSED(18) = callarg(20)
*callarg(20) = callescape(17)
CALLCLOBBERED(19) = callarg(20)
callescape(17) = callarg(20)
ESCAPED = &_ZNSt8ios_base4InitD1Ev
callarg(22) = &_ZStL8__ioinit
callarg(22) = callarg(22) + UNKNOWN
callarg(22) = *callarg(22) + UNKNOWN
CALLUSED(18) = callarg(22)
*callarg(22) = callescape(17)
CALLCLOBBERED(19) = callarg(22)
callescape(17) = callarg(22)
ESCAPED = &_ZStL8__ioinit
__dso_handle = NONLOCAL
callarg(23) = &__dso_handle
callarg(23) = callarg(23) + UNKNOWN
callarg(23) = *callarg(23) + UNKNOWN
CALLUSED(18) = callarg(23)
*callarg(23) = callescape(17)
CALLCLOBBERED(19) = callarg(23)
callescape(17) = callarg(23)
ESCAPED = &__dso_handle
callescape(26) = NONLOCAL
CALLUSED(27) = callescape(26)
_ZL8log_path.0+64 = NONLOCAL
_ZL8log_path.64+192 = NONLOCAL
callarg(29) = &_ZL8log_path.0+64
callarg(29) = callarg(29) + UNKNOWN
callarg(29) = *callarg(29) + UNKNOWN
CALLUSED(27) = callarg(29)
*callarg(29) = callescape(26)
CALLCLOBBERED(28) = callarg(29)
callescape(26) = callarg(29)
ESCAPED = &_ZL8log_path.0+64
callarg(32) = &STRING
callarg(32) = callarg(32) + UNKNOWN
callarg(32) = *callarg(32) + UNKNOWN
CALLUSED(27) = callarg(32)
*callarg(32) = callescape(26)
CALLCLOBBERED(28) = callarg(32)
callescape(26) = callarg(32)
ESCAPED = &STRING
callarg(33) = &D.89048
callarg(33) = callarg(33) + UNKNOWN
callarg(33) = *callarg(33) + UNKNOWN
CALLUSED(27) = callarg(33)
callescape(35) = NONLOCAL
CALLUSED(36) = callescape(35)
callarg(38) = &_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev
callarg(38) = callarg(38) + UNKNOWN
callarg(38) = *callarg(38) + UNKNOWN
CALLUSED(36) = callarg(38)
*callarg(38) = callescape(35)
CALLCLOBBERED(37) = callarg(38)
callescape(35) = callarg(38)
ESCAPED = &_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev
callarg(40) = &_ZL8log_path.0+64
callarg(40) = callarg(40) + UNKNOWN
callarg(40) = *callarg(40) + UNKNOWN
CALLUSED(36) = callarg(40)
*callarg(40) = callescape(35)
CALLCLOBBERED(37) = callarg(40)
callescape(35) = callarg(40)
ESCAPED = &_ZL8log_path.0+64
callarg(41) = &__dso_handle
callarg(41) = callarg(41) + UNKNOWN
callarg(41) = *callarg(41) + UNKNOWN
CALLUSED(36) = callarg(41)
*callarg(41) = callescape(35)
CALLCLOBBERED(37) = callarg(41)
callescape(35) = callarg(41)
ESCAPED = &__dso_handle

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { STRING ESCAPED NONLOCAL _ZStL8__ioinit _ZNSt8ios_base4InitD1Ev __dso_handle _ZL8log_path.0+64 _ZL8log_path.64+192 _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
_ZStL8__ioinit = { STRING ESCAPED NONLOCAL _ZStL8__ioinit _ZNSt8ios_base4InitD1Ev __dso_handle _ZL8log_path.0+64 _ZL8log_path.64+192 _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev }
_ZNSt8ios_base4InitD1Ev = { STRING ESCAPED NONLOCAL _ZStL8__ioinit _ZNSt8ios_base4InitD1Ev __dso_handle _ZL8log_path.0+64 _ZL8log_path.64+192 _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev }
__dso_handle = { STRING ESCAPED NONLOCAL _ZStL8__ioinit _ZNSt8ios_base4InitD1Ev __dso_handle _ZL8log_path.0+64 _ZL8log_path.64+192 _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev }
_ZL8log_path.0+64 = { STRING ESCAPED NONLOCAL _ZStL8__ioinit _ZNSt8ios_base4InitD1Ev __dso_handle _ZL8log_path.0+64 _ZL8log_path.64+192 _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev }
_ZL8log_path.64+192 = { ESCAPED NONLOCAL }
D.89048 = { }
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev = { STRING ESCAPED NONLOCAL _ZStL8__ioinit _ZNSt8ios_base4InitD1Ev __dso_handle _ZL8log_path.0+64 _ZL8log_path.64+192 _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev }
__initialize_p = { NONLOCAL }
__priority = { NONLOCAL } same as __initialize_p
_ZNSt8ios_base4InitC1Ev = { }
callescape(11) = { STRING ESCAPED NONLOCAL _ZStL8__ioinit _ZNSt8ios_base4InitD1Ev __dso_handle _ZL8log_path.0+64 _ZL8log_path.64+192 _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev }
CALLUSED(12) = { STRING ESCAPED NONLOCAL _ZStL8__ioinit _ZNSt8ios_base4InitD1Ev __dso_handle _ZL8log_path.0+64 _ZL8log_path.64+192 _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev } same as callescape(11)
CALLCLOBBERED(13) = { STRING ESCAPED NONLOCAL _ZStL8__ioinit _ZNSt8ios_base4InitD1Ev __dso_handle _ZL8log_path.0+64 _ZL8log_path.64+192 _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev } same as callarg(14)
callarg(14) = { STRING ESCAPED NONLOCAL _ZStL8__ioinit _ZNSt8ios_base4InitD1Ev __dso_handle _ZL8log_path.0+64 _ZL8log_path.64+192 _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev }
__cxa_atexit = { }
callescape(17) = { STRING ESCAPED NONLOCAL _ZStL8__ioinit _ZNSt8ios_base4InitD1Ev __dso_handle _ZL8log_path.0+64 _ZL8log_path.64+192 _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev }
CALLUSED(18) = { STRING ESCAPED NONLOCAL _ZStL8__ioinit _ZNSt8ios_base4InitD1Ev __dso_handle _ZL8log_path.0+64 _ZL8log_path.64+192 _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev } same as callescape(17)
CALLCLOBBERED(19) = { STRING ESCAPED NONLOCAL _ZStL8__ioinit _ZNSt8ios_base4InitD1Ev __dso_handle _ZL8log_path.0+64 _ZL8log_path.64+192 _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev }
callarg(20) = { STRING ESCAPED NONLOCAL _ZStL8__ioinit _ZNSt8ios_base4InitD1Ev __dso_handle _ZL8log_path.0+64 _ZL8log_path.64+192 _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev }
callarg(22) = { STRING ESCAPED NONLOCAL _ZStL8__ioinit _ZNSt8ios_base4InitD1Ev __dso_handle _ZL8log_path.0+64 _ZL8log_path.64+192 _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev }
callarg(23) = { STRING ESCAPED NONLOCAL _ZStL8__ioinit _ZNSt8ios_base4InitD1Ev __dso_handle _ZL8log_path.0+64 _ZL8log_path.64+192 _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev }
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_ = { }
callescape(26) = { STRING ESCAPED NONLOCAL _ZStL8__ioinit _ZNSt8ios_base4InitD1Ev __dso_handle _ZL8log_path.0+64 _ZL8log_path.64+192 _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev }
CALLUSED(27) = { STRING ESCAPED NONLOCAL _ZStL8__ioinit _ZNSt8ios_base4InitD1Ev __dso_handle _ZL8log_path.0+64 _ZL8log_path.64+192 D.89048 _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev }
CALLCLOBBERED(28) = { STRING ESCAPED NONLOCAL _ZStL8__ioinit _ZNSt8ios_base4InitD1Ev __dso_handle _ZL8log_path.0+64 _ZL8log_path.64+192 _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev }
callarg(29) = { STRING ESCAPED NONLOCAL _ZStL8__ioinit _ZNSt8ios_base4InitD1Ev __dso_handle _ZL8log_path.0+64 _ZL8log_path.64+192 _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev }
callarg(32) = { STRING }
callarg(33) = { D.89048 }
callescape(35) = { STRING ESCAPED NONLOCAL _ZStL8__ioinit _ZNSt8ios_base4InitD1Ev __dso_handle _ZL8log_path.0+64 _ZL8log_path.64+192 _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev }
CALLUSED(36) = { STRING ESCAPED NONLOCAL _ZStL8__ioinit _ZNSt8ios_base4InitD1Ev __dso_handle _ZL8log_path.0+64 _ZL8log_path.64+192 _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev } same as callescape(35)
CALLCLOBBERED(37) = { STRING ESCAPED NONLOCAL _ZStL8__ioinit _ZNSt8ios_base4InitD1Ev __dso_handle _ZL8log_path.0+64 _ZL8log_path.64+192 _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev }
callarg(38) = { STRING ESCAPED NONLOCAL _ZStL8__ioinit _ZNSt8ios_base4InitD1Ev __dso_handle _ZL8log_path.0+64 _ZL8log_path.64+192 _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev }
callarg(40) = { STRING ESCAPED NONLOCAL _ZStL8__ioinit _ZNSt8ios_base4InitD1Ev __dso_handle _ZL8log_path.0+64 _ZL8log_path.64+192 _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev }
callarg(41) = { STRING ESCAPED NONLOCAL _ZStL8__ioinit _ZNSt8ios_base4InitD1Ev __dso_handle _ZL8log_path.0+64 _ZL8log_path.64+192 _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev }


Alias information for __static_initialization_and_destruction_0(int, int)

Aliased symbols

D.89048, UID D.89048, struct allocator, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.47227 D.89047 D.97417 } (nonlocal, escaped, interposable)

Flow-insensitive points-to information


void __static_initialization_and_destruction_0 (int __initialize_p, int __priority)
{
  struct allocator D.89048;

  <bb 2> :
  gimple_cond <eq_expr, __initialize_p_2(D), 1, NULL, NULL>
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  gimple_cond <eq_expr, __priority_4(D), 65535, NULL, NULL>
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  gimple_call <__ct_comp , NULL, &__ioinit>
  gimple_call <__cxa_atexit, NULL, __dt_comp , &__ioinit, &__dso_handle>
  gimple_call <__ct_comp , NULL, &log_path, "./program_crash.log", &D.89048>

  <bb 5> :
  gimple_assign <constructor, D.89048, {CLOBBER(eol)}, NULL, NULL>
  gimple_call <__cxa_atexit, NULL, __dt_comp , &log_path, &__dso_handle>

  <bb 6> :
  gimple_return <NULL>

  <bb 7> :
gimple_label <<L6>>
  gimple_resx <2>

  <bb 8> :
gimple_label <<L7>>
  gimple_assign <constructor, D.89048, {CLOBBER(eol)}, NULL, NULL>
  gimple_resx <1>

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_, funcdef_no=3918, decl_uid=29202, cgraph_uid=1397, symbol_order=1963)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &PARM_NOALIAS.0+64
PARM_NOALIAS.0+64 = &NONLOCAL
PARM_NOALIAS.64+192 = &NONLOCAL
__s = &NONLOCAL
__n = &NONLOCAL
__a = &NONLOCAL
_1 = this + UNKNOWN
_20 = this + UNKNOWN
*this = _20
_5 = _3 + UNKNOWN
_5 = _4 + UNKNOWN
callescape(20) = NONLOCAL
CALLUSED(21) = callescape(20)
callarg(23) = &STRING
callarg(23) = callarg(23) + UNKNOWN
callarg(23) = *callarg(23) + UNKNOWN
CALLUSED(21) = callarg(23)
*callarg(23) = callescape(20)
CALLCLOBBERED(22) = callarg(23)
callescape(20) = callarg(23)
ESCAPED = &STRING
_6 = __s + UNKNOWN
callescape(26) = NONLOCAL
CALLUSED(27) = callescape(26)
callarg(29) = this
callarg(29) = callarg(29) + UNKNOWN
callarg(29) = *callarg(29) + UNKNOWN
CALLUSED(27) = callarg(29)
*callarg(29) = callescape(26)
CALLCLOBBERED(28) = callarg(29)
callescape(26) = callarg(29)
ESCAPED = this
callarg(30) = __s
callarg(30) = callarg(30) + UNKNOWN
callarg(30) = *callarg(30) + UNKNOWN
CALLUSED(27) = callarg(30)
*callarg(30) = callescape(26)
CALLCLOBBERED(28) = callarg(30)
callescape(26) = callarg(30)
ESCAPED = __s
callarg(31) = _6
callarg(31) = callarg(31) + UNKNOWN
callarg(31) = *callarg(31) + UNKNOWN
CALLUSED(27) = callarg(31)
callarg(32) = D.97667
callarg(32) = callarg(32) + UNKNOWN
callarg(32) = *callarg(32) + UNKNOWN
CALLUSED(27) = callarg(32)
*callarg(32) = callescape(26)
CALLCLOBBERED(28) = callarg(32)
callescape(26) = callarg(32)
ESCAPED = D.97667

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { STRING ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+192 }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
PARM_NOALIAS.0+64 = { ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+192 }
PARM_NOALIAS.64+192 = { ESCAPED NONLOCAL }
this = { PARM_NOALIAS.0+64 }
__s = { NONLOCAL }
__n = { NONLOCAL } same as __s
__a = { NONLOCAL } same as __s
_1 = { PARM_NOALIAS.0+64 PARM_NOALIAS.64+192 }
_20 = { PARM_NOALIAS.0+64 PARM_NOALIAS.64+192 }
_3 = { }
_4 = { }
_5 = { }
_ZSt19__throw_logic_errorPKc = { }
callescape(20) = { STRING ESCAPED NONLOCAL }
CALLUSED(21) = { STRING ESCAPED NONLOCAL } same as callescape(20)
CALLCLOBBERED(22) = { STRING } same as callarg(23)
callarg(23) = { STRING }
_6 = { NONLOCAL }
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag = { }
callescape(26) = { ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+192 }
CALLUSED(27) = { ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+192 }
CALLCLOBBERED(28) = { ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+192 }
callarg(29) = { ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+192 }
callarg(30) = { ESCAPED NONLOCAL }
callarg(31) = { ESCAPED NONLOCAL }
callarg(32) = { }
D.97667 = { }


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, unsigned long, std::allocator<char> const&)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.98666 } (nonlocal, escaped, restrict)

Flow-insensitive points-to information

_1, points-to NULL, points-to vars: { D.98666 } (nonlocal, escaped, restrict)
_6, points-to non-local, points-to NULL, points-to vars: { }
this_10(D), points-to vars: { D.98666 } (nonlocal, escaped, restrict)
__a_13(D), points-to non-local, points-to vars: { }
__s_15(D), points-to non-local, points-to NULL, points-to vars: { }
_20, points-to NULL, points-to vars: { D.98666 } (nonlocal, escaped, restrict)

void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string (struct basic_string * const this, const char * __s, size_type __n, const struct allocator & __a)
{
  char * D.98664;
  struct forward_iterator_tag D.97667;
  struct _Alloc_hider * _1;
  bool _3;
  bool _4;
  bool _5;
  const char * _6;
  char[16] * _20;

  <bb 2> :
  gimple_assign <constructor, *this_10(D), {CLOBBER}, NULL, NULL>
  gimple_assign <addr_expr, _1, &this_10(D)->_M_dataplus, NULL, NULL>
  gimple_assign <addr_expr, _20, &this_10(D)->D.28191._M_local_buf, NULL, NULL>
  gimple_assign <constructor, MEM[(struct _Alloc_hider *)this_10(D)], {CLOBBER}, NULL, NULL>
  gimple_assign <ssa_name, MEM[(struct _Alloc_hider *)this_10(D)]._M_p, _20, NULL, NULL>
  gimple_assign <eq_expr, _3, __s_15(D), 0B, NULL>
  gimple_assign <ne_expr, _4, __n_16(D), 0, NULL>
  gimple_assign <bit_and_expr, _5, _3, _4, NULL>
  gimple_cond <ne_expr, _5, 0, NULL, NULL>
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  gimple_call <__throw_logic_error, NULL, "basic_string: construction from null is not valid">

  <bb 4> :
  gimple_assign <pointer_plus_expr, _6, __s_15(D), __n_16(D), NULL>
  gimple_call <_M_construct, NULL, this_10(D), __s_15(D), _6, D.97667>

  <bb 5> :
  gimple_return <NULL>

  <bb 6> :
gimple_label <<L2>>
  gimple_assign <constructor, MEM[(struct _Alloc_hider *)this_10(D)], {CLOBBER}, NULL, NULL>
  gimple_resx <1>

}



;; Function std::filesystem::__cxx11::path::string<char, std::char_traits<char>, std::allocator<char> > (_ZNKSt10filesystem7__cxx114path6stringIcSt11char_traitsIcESaIcEEENSt7__cxx1112basic_stringIT_T0_T1_EERKSA_, funcdef_no=4052, decl_uid=85194, cgraph_uid=1531, symbol_order=2102)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__a = &NONLOCAL
D.92867 = &NONLOCAL
_7 = *this
_8 = *this + 64
callescape(14) = NONLOCAL
CALLUSED(15) = callescape(14)
callarg(17) = D.92867
callarg(17) = callarg(17) + UNKNOWN
callarg(17) = *callarg(17) + UNKNOWN
CALLUSED(15) = callarg(17)
*callarg(17) = callescape(14)
CALLCLOBBERED(16) = callarg(17)
callescape(14) = callarg(17)
ESCAPED = D.92867
callarg(18) = _7
callarg(18) = callarg(18) + UNKNOWN
callarg(18) = *callarg(18) + UNKNOWN
CALLUSED(15) = callarg(18)
*callarg(18) = callescape(14)
CALLCLOBBERED(16) = callarg(18)
callescape(14) = callarg(18)
ESCAPED = _7
callarg(19) = _8
callarg(19) = callarg(19) + UNKNOWN
callarg(19) = *callarg(19) + UNKNOWN
CALLUSED(15) = callarg(19)
callarg(20) = __a
callarg(20) = callarg(20) + UNKNOWN
callarg(20) = *callarg(20) + UNKNOWN
CALLUSED(15) = callarg(20)

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__a = { NONLOCAL } same as this
D.92867 = { NONLOCAL } same as this
_7 = { ESCAPED NONLOCAL }
_8 = { ESCAPED NONLOCAL }
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcmRKS3_ = { }
callescape(14) = { ESCAPED NONLOCAL }
CALLUSED(15) = { ESCAPED NONLOCAL }
CALLCLOBBERED(16) = { ESCAPED NONLOCAL }
callarg(17) = { ESCAPED NONLOCAL }
callarg(18) = { ESCAPED NONLOCAL }
callarg(19) = { ESCAPED NONLOCAL }
callarg(20) = { ESCAPED NONLOCAL }
_ZNKSt10filesystem7__cxx114path6stringIcSt11char_traitsIcESaIcEEENSt7__cxx1112basic_stringIT_T0_T1_EERKSA_ = { }


Alias information for std::filesystem::__cxx11::path::string<char, std::char_traits<char>, std::allocator<char> >(std::allocator<char> const&) conststd::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_5(D), points-to non-local, points-to vars: { }
_7, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_9(D), points-to non-local, points-to NULL, points-to vars: { }
__a_10(D), points-to non-local, points-to vars: { }

struct basic_string std::filesystem::__cxx11::path::string<char, std::char_traits<char>, std::allocator<char> > (const struct path * const this, const struct allocator & __a)
{
  const char * D.98680;
  size_type D.98678;
  char * _7;
  long unsigned int _8;
  struct basic_string & _9(D);

  <bb 2> :
  gimple_assign <component_ref, _7, MEM[(const struct basic_string *)this_5(D)]._M_dataplus._M_p, NULL, NULL>
  gimple_assign <component_ref, _8, MEM[(const struct basic_string *)this_5(D)]._M_string_length, NULL, NULL>
  gimple_call <__ct_comp , NULL, _9(D), _7, _8, __a_10(D)>
  gimple_return <_9(D)>

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev, funcdef_no=3816, decl_uid=29266, cgraph_uid=1295, symbol_order=1858)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_7 = *this
_8 = this + UNKNOWN
_9 = *this + 128
_10 = _9 + UNKNOWN
_10 = &NONLOCAL
callescape(14) = NONLOCAL
CALLUSED(15) = callescape(14)
callarg(17) = _7
callarg(17) = callarg(17) + UNKNOWN
callarg(17) = *callarg(17) + UNKNOWN
CALLUSED(15) = callarg(17)
*callarg(17) = callescape(14)
CALLCLOBBERED(16) = callarg(17)
callescape(14) = callarg(17)
ESCAPED = _7
callarg(18) = _10
callarg(18) = callarg(18) + UNKNOWN
callarg(18) = *callarg(18) + UNKNOWN
CALLUSED(15) = callarg(18)
*callarg(18) = callescape(14)
CALLCLOBBERED(16) = callarg(18)
callescape(14) = callarg(18)
ESCAPED = _10

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_7 = { ESCAPED NONLOCAL }
_8 = { NONLOCAL }
_9 = { ESCAPED NONLOCAL }
_10 = { ESCAPED NONLOCAL }
_ZdlPvm = { }
callescape(14) = { ESCAPED NONLOCAL }
CALLUSED(15) = { ESCAPED NONLOCAL } same as callescape(14)
CALLCLOBBERED(16) = { ESCAPED NONLOCAL }
callarg(17) = { ESCAPED NONLOCAL }
callarg(18) = { ESCAPED NONLOCAL }


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_3(D), points-to non-local, points-to vars: { }
_7, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_8, points-to non-local, points-to NULL, points-to vars: { }

void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string (struct basic_string * const this)
{
  char * _7;
  const char[16] * _8;
  long unsigned int _9;
  long unsigned int _10;

  <bb 2> :
  gimple_assign <component_ref, _7, MEM[(const struct basic_string *)this_3(D)]._M_dataplus._M_p, NULL, NULL>
  gimple_assign <addr_expr, _8, &MEM[(const struct basic_string *)this_3(D)].D.28191._M_local_buf, NULL, NULL>
  gimple_cond <ne_expr, _7, _8, NULL, NULL>
    goto <bb 3>; [53.47%]
  else
    goto <bb 4>; [46.53%]

  <bb 3> :
  gimple_assign <component_ref, _9, this_3(D)->D.28191._M_allocated_capacity, NULL, NULL>
  gimple_assign <plus_expr, _10, _9, 1, NULL>
  gimple_call <operator delete, NULL, _7, _10>

  <bb 4> :
  gimple_assign <constructor, MEM[(struct _Alloc_hider *)this_3(D)], {CLOBBER}, NULL, NULL>
  gimple_assign <constructor, *this_3(D), {CLOBBER}, NULL, NULL>
  gimple_return <NULL>

}



;; Function logError (_Z8logErrorRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_i, funcdef_no=3690, decl_uid=88804, cgraph_uid=1169, symbol_order=1731)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
func = &NONLOCAL
file = &NONLOCAL
line = &NONLOCAL
callescape(12) = NONLOCAL
CALLUSED(13) = callescape(12)
callarg(15) = &RED.0+64
callarg(15) = callarg(15) + UNKNOWN
callarg(15) = *callarg(15) + UNKNOWN
CALLUSED(13) = callarg(15)
*callarg(15) = callescape(12)
CALLCLOBBERED(14) = callarg(15)
callescape(12) = callarg(15)
ESCAPED = &RED.0+64
callarg(18) = &STRING
callarg(18) = callarg(18) + UNKNOWN
callarg(18) = *callarg(18) + UNKNOWN
CALLUSED(13) = callarg(18)
*callarg(18) = callescape(12)
CALLCLOBBERED(14) = callarg(18)
callescape(12) = callarg(18)
ESCAPED = &STRING
callarg(19) = &D.88807
callarg(19) = callarg(19) + UNKNOWN
callarg(19) = *callarg(19) + UNKNOWN
CALLUSED(13) = callarg(19)
callescape(21) = NONLOCAL
CALLUSED(22) = callescape(21)
callarg(24) = &RESET.0+64
callarg(24) = callarg(24) + UNKNOWN
callarg(24) = *callarg(24) + UNKNOWN
CALLUSED(22) = callarg(24)
*callarg(24) = callescape(21)
CALLCLOBBERED(23) = callarg(24)
callescape(21) = callarg(24)
ESCAPED = &RESET.0+64
callarg(27) = &STRING
callarg(27) = callarg(27) + UNKNOWN
callarg(27) = *callarg(27) + UNKNOWN
CALLUSED(22) = callarg(27)
*callarg(27) = callescape(21)
CALLCLOBBERED(23) = callarg(27)
callescape(21) = callarg(27)
ESCAPED = &STRING
callarg(28) = &D.88810
callarg(28) = callarg(28) + UNKNOWN
callarg(28) = *callarg(28) + UNKNOWN
CALLUSED(22) = callarg(28)
_49 = RED.0+64
_52 = RED.64+192
_20 = _52
callescape(34) = NONLOCAL
CALLUSED(35) = callescape(34)
_ZSt4cerr.0+64 = NONLOCAL
_ZSt4cerr.64+64 = NONLOCAL
_ZSt4cerr.128+224 = NONLOCAL
_ZSt4cerr.384+64 = NONLOCAL
_ZSt4cerr.448+64 = NONLOCAL
_ZSt4cerr.512+1120 = NONLOCAL
_ZSt4cerr.1664+64 = NONLOCAL
_ZSt4cerr.1728+64 = NONLOCAL
_ZSt4cerr.1792+64 = NONLOCAL
_ZSt4cerr.1856+16 = NONLOCAL
_ZSt4cerr.1920+64 = NONLOCAL
_ZSt4cerr.1984+64 = NONLOCAL
_ZSt4cerr.2048+64 = NONLOCAL
_ZSt4cerr.2112+64 = NONLOCAL
callarg(37) = &_ZSt4cerr.0+64
callarg(37) = callarg(37) + UNKNOWN
callarg(37) = *callarg(37) + UNKNOWN
CALLUSED(35) = callarg(37)
*callarg(37) = callescape(34)
CALLCLOBBERED(36) = callarg(37)
callescape(34) = callarg(37)
ESCAPED = &_ZSt4cerr.0+64
callarg(52) = _49
callarg(52) = callarg(52) + UNKNOWN
callarg(52) = *callarg(52) + UNKNOWN
CALLUSED(35) = callarg(52)
*callarg(52) = callescape(34)
CALLCLOBBERED(36) = callarg(52)
callescape(34) = callarg(52)
ESCAPED = _49
callarg(53) = _20
callarg(53) = callarg(53) + UNKNOWN
callarg(53) = *callarg(53) + UNKNOWN
CALLUSED(35) = callarg(53)
*callarg(53) = callescape(34)
CALLCLOBBERED(36) = callarg(53)
callescape(34) = callarg(53)
ESCAPED = _20
_18 = NONLOCAL
_18 = callarg(37)
_18 = callarg(52)
_18 = callarg(53)
callescape(55) = NONLOCAL
CALLUSED(56) = callescape(55)
callarg(58) = _18
callarg(58) = callarg(58) + UNKNOWN
callarg(58) = *callarg(58) + UNKNOWN
CALLUSED(56) = callarg(58)
*callarg(58) = callescape(55)
CALLCLOBBERED(57) = callarg(58)
callescape(55) = callarg(58)
ESCAPED = _18
callarg(59) = &STRING
callarg(59) = callarg(59) + UNKNOWN
callarg(59) = *callarg(59) + UNKNOWN
CALLUSED(56) = callarg(59)
*callarg(59) = callescape(55)
CALLCLOBBERED(57) = callarg(59)
callescape(55) = callarg(59)
ESCAPED = &STRING
callarg(60) = &NONLOCAL
callarg(60) = callarg(60) + UNKNOWN
callarg(60) = *callarg(60) + UNKNOWN
CALLUSED(56) = callarg(60)
*callarg(60) = callescape(55)
CALLCLOBBERED(57) = callarg(60)
callescape(55) = callarg(60)
ESCAPED = &NONLOCAL
_56 = *func
_57 = *func + 64
_58 = _57
callescape(64) = NONLOCAL
CALLUSED(65) = callescape(64)
callarg(67) = _18
callarg(67) = callarg(67) + UNKNOWN
callarg(67) = *callarg(67) + UNKNOWN
CALLUSED(65) = callarg(67)
*callarg(67) = callescape(64)
CALLCLOBBERED(66) = callarg(67)
callescape(64) = callarg(67)
ESCAPED = _18
callarg(68) = _56
callarg(68) = callarg(68) + UNKNOWN
callarg(68) = *callarg(68) + UNKNOWN
CALLUSED(65) = callarg(68)
*callarg(68) = callescape(64)
CALLCLOBBERED(66) = callarg(68)
callescape(64) = callarg(68)
ESCAPED = _56
callarg(69) = _58
callarg(69) = callarg(69) + UNKNOWN
callarg(69) = *callarg(69) + UNKNOWN
CALLUSED(65) = callarg(69)
*callarg(69) = callescape(64)
CALLCLOBBERED(66) = callarg(69)
callescape(64) = callarg(69)
ESCAPED = _58
_59 = NONLOCAL
_59 = callarg(67)
_59 = callarg(68)
_59 = callarg(69)
callescape(71) = NONLOCAL
CALLUSED(72) = callescape(71)
callarg(74) = _59
callarg(74) = callarg(74) + UNKNOWN
callarg(74) = *callarg(74) + UNKNOWN
CALLUSED(72) = callarg(74)
*callarg(74) = callescape(71)
CALLCLOBBERED(73) = callarg(74)
callescape(71) = callarg(74)
ESCAPED = _59
callarg(75) = &STRING
callarg(75) = callarg(75) + UNKNOWN
callarg(75) = *callarg(75) + UNKNOWN
CALLUSED(72) = callarg(75)
*callarg(75) = callescape(71)
CALLCLOBBERED(73) = callarg(75)
callescape(71) = callarg(75)
ESCAPED = &STRING
callarg(76) = &NONLOCAL
callarg(76) = callarg(76) + UNKNOWN
callarg(76) = *callarg(76) + UNKNOWN
CALLUSED(72) = callarg(76)
*callarg(76) = callescape(71)
CALLCLOBBERED(73) = callarg(76)
callescape(71) = callarg(76)
ESCAPED = &NONLOCAL
_62 = *file
_63 = *file + 64
_64 = _63
callescape(80) = NONLOCAL
CALLUSED(81) = callescape(80)
callarg(83) = _59
callarg(83) = callarg(83) + UNKNOWN
callarg(83) = *callarg(83) + UNKNOWN
CALLUSED(81) = callarg(83)
*callarg(83) = callescape(80)
CALLCLOBBERED(82) = callarg(83)
callescape(80) = callarg(83)
ESCAPED = _59
callarg(84) = _62
callarg(84) = callarg(84) + UNKNOWN
callarg(84) = *callarg(84) + UNKNOWN
CALLUSED(81) = callarg(84)
*callarg(84) = callescape(80)
CALLCLOBBERED(82) = callarg(84)
callescape(80) = callarg(84)
ESCAPED = _62
callarg(85) = _64
callarg(85) = callarg(85) + UNKNOWN
callarg(85) = *callarg(85) + UNKNOWN
CALLUSED(81) = callarg(85)
*callarg(85) = callescape(80)
CALLCLOBBERED(82) = callarg(85)
callescape(80) = callarg(85)
ESCAPED = _64
_65 = NONLOCAL
_65 = callarg(83)
_65 = callarg(84)
_65 = callarg(85)
callescape(87) = NONLOCAL
CALLUSED(88) = callescape(87)
callarg(90) = _65
callarg(90) = callarg(90) + UNKNOWN
callarg(90) = *callarg(90) + UNKNOWN
CALLUSED(88) = callarg(90)
*callarg(90) = callescape(87)
CALLCLOBBERED(89) = callarg(90)
callescape(87) = callarg(90)
ESCAPED = _65
callarg(91) = &STRING
callarg(91) = callarg(91) + UNKNOWN
callarg(91) = *callarg(91) + UNKNOWN
CALLUSED(88) = callarg(91)
*callarg(91) = callescape(87)
CALLCLOBBERED(89) = callarg(91)
callescape(87) = callarg(91)
ESCAPED = &STRING
callarg(92) = &NONLOCAL
callarg(92) = callarg(92) + UNKNOWN
callarg(92) = *callarg(92) + UNKNOWN
CALLUSED(88) = callarg(92)
*callarg(92) = callescape(87)
CALLCLOBBERED(89) = callarg(92)
callescape(87) = callarg(92)
ESCAPED = &NONLOCAL
callescape(94) = NONLOCAL
CALLUSED(95) = callescape(94)
callarg(97) = _65
callarg(97) = callarg(97) + UNKNOWN
callarg(97) = *callarg(97) + UNKNOWN
CALLUSED(95) = callarg(97)
*callarg(97) = callescape(94)
CALLCLOBBERED(96) = callarg(97)
callescape(94) = callarg(97)
ESCAPED = _65
callarg(98) = line
callarg(98) = callarg(98) + UNKNOWN
callarg(98) = *callarg(98) + UNKNOWN
CALLUSED(95) = callarg(98)
*callarg(98) = callescape(94)
CALLCLOBBERED(96) = callarg(98)
callescape(94) = callarg(98)
ESCAPED = line
_38 = NONLOCAL
_38 = callarg(97)
_38 = callarg(98)
callescape(100) = NONLOCAL
CALLUSED(101) = callescape(100)
callarg(103) = _38
callarg(103) = callarg(103) + UNKNOWN
callarg(103) = *callarg(103) + UNKNOWN
CALLUSED(101) = callarg(103)
*callarg(103) = callescape(100)
CALLCLOBBERED(102) = callarg(103)
callescape(100) = callarg(103)
ESCAPED = _38
callarg(104) = &STRING
callarg(104) = callarg(104) + UNKNOWN
callarg(104) = *callarg(104) + UNKNOWN
CALLUSED(101) = callarg(104)
*callarg(104) = callescape(100)
CALLCLOBBERED(102) = callarg(104)
callescape(100) = callarg(104)
ESCAPED = &STRING
callarg(105) = &NONLOCAL
callarg(105) = callarg(105) + UNKNOWN
callarg(105) = *callarg(105) + UNKNOWN
CALLUSED(101) = callarg(105)
*callarg(105) = callescape(100)
CALLCLOBBERED(102) = callarg(105)
callescape(100) = callarg(105)
ESCAPED = &NONLOCAL
_70 = RESET.0+64
_71 = RESET.64+192
_72 = _71
callescape(109) = NONLOCAL
CALLUSED(110) = callescape(109)
callarg(112) = _38
callarg(112) = callarg(112) + UNKNOWN
callarg(112) = *callarg(112) + UNKNOWN
CALLUSED(110) = callarg(112)
*callarg(112) = callescape(109)
CALLCLOBBERED(111) = callarg(112)
callescape(109) = callarg(112)
ESCAPED = _38
callarg(113) = _70
callarg(113) = callarg(113) + UNKNOWN
callarg(113) = *callarg(113) + UNKNOWN
CALLUSED(110) = callarg(113)
*callarg(113) = callescape(109)
CALLCLOBBERED(111) = callarg(113)
callescape(109) = callarg(113)
ESCAPED = _70
callarg(114) = _72
callarg(114) = callarg(114) + UNKNOWN
callarg(114) = *callarg(114) + UNKNOWN
CALLUSED(110) = callarg(114)
*callarg(114) = callescape(109)
CALLCLOBBERED(111) = callarg(114)
callescape(109) = callarg(114)
ESCAPED = _72
_73 = NONLOCAL
_73 = callarg(112)
_73 = callarg(113)
_73 = callarg(114)
callescape(117) = NONLOCAL
CALLUSED(118) = callescape(117)
callarg(120) = _73
callarg(120) = callarg(120) + UNKNOWN
callarg(120) = *callarg(120) + UNKNOWN
CALLUSED(118) = callarg(120)
*callarg(120) = callescape(117)
CALLCLOBBERED(119) = callarg(120)
callescape(117) = callarg(120)
ESCAPED = _73
_74 = NONLOCAL
_74 = callarg(120)
_79 = RESET.0+64
_81 = RESET.64+192
_82 = _81 + UNKNOWN
_82 = &NONLOCAL
callescape(126) = NONLOCAL
CALLUSED(127) = callescape(126)
callarg(129) = _79
callarg(129) = callarg(129) + UNKNOWN
callarg(129) = *callarg(129) + UNKNOWN
CALLUSED(127) = callarg(129)
*callarg(129) = callescape(126)
CALLCLOBBERED(128) = callarg(129)
callescape(126) = callarg(129)
ESCAPED = _79
callarg(130) = _82
callarg(130) = callarg(130) + UNKNOWN
callarg(130) = *callarg(130) + UNKNOWN
CALLUSED(127) = callarg(130)
*callarg(130) = callescape(126)
CALLCLOBBERED(128) = callarg(130)
callescape(126) = callarg(130)
ESCAPED = _82
_75 = RED.0+64
_77 = RED.64+192
_78 = _77 + UNKNOWN
_78 = &NONLOCAL
callescape(134) = NONLOCAL
CALLUSED(135) = callescape(134)
callarg(137) = _75
callarg(137) = callarg(137) + UNKNOWN
callarg(137) = *callarg(137) + UNKNOWN
CALLUSED(135) = callarg(137)
*callarg(137) = callescape(134)
CALLCLOBBERED(136) = callarg(137)
callescape(134) = callarg(137)
ESCAPED = _75
callarg(138) = _78
callarg(138) = callarg(138) + UNKNOWN
callarg(138) = *callarg(138) + UNKNOWN
CALLUSED(135) = callarg(138)
*callarg(138) = callescape(134)
CALLCLOBBERED(136) = callarg(138)
callescape(134) = callarg(138)
ESCAPED = _78
_83 = RESET.0+64
_85 = RESET.64+192
_86 = _85 + UNKNOWN
_86 = &NONLOCAL
callescape(142) = NONLOCAL
CALLUSED(143) = callescape(142)
callarg(145) = _83
callarg(145) = callarg(145) + UNKNOWN
callarg(145) = *callarg(145) + UNKNOWN
CALLUSED(143) = callarg(145)
*callarg(145) = callescape(142)
CALLCLOBBERED(144) = callarg(145)
callescape(142) = callarg(145)
ESCAPED = _83
callarg(146) = _86
callarg(146) = callarg(146) + UNKNOWN
callarg(146) = *callarg(146) + UNKNOWN
CALLUSED(143) = callarg(146)
*callarg(146) = callescape(142)
CALLCLOBBERED(144) = callarg(146)
callescape(142) = callarg(146)
ESCAPED = _86
_87 = RED.0+64
_89 = RED.64+192
_90 = _89 + UNKNOWN
_90 = &NONLOCAL
callescape(150) = NONLOCAL
CALLUSED(151) = callescape(150)
callarg(153) = _87
callarg(153) = callarg(153) + UNKNOWN
callarg(153) = *callarg(153) + UNKNOWN
CALLUSED(151) = callarg(153)
*callarg(153) = callescape(150)
CALLCLOBBERED(152) = callarg(153)
callescape(150) = callarg(153)
ESCAPED = _87
callarg(154) = _90
callarg(154) = callarg(154) + UNKNOWN
callarg(154) = *callarg(154) + UNKNOWN
CALLUSED(151) = callarg(154)
*callarg(154) = callescape(150)
CALLCLOBBERED(152) = callarg(154)
callescape(150) = callarg(154)
ESCAPED = _90

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 RESET.0+64 RESET.64+192 _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
RED.0+64 = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 } same as _49
RED.64+192 = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 } same as _52
D.88807 = { }
RESET.0+64 = { STRING ESCAPED NONLOCAL RESET.0+64 RESET.64+192 } same as _70
RESET.64+192 = { STRING ESCAPED NONLOCAL RESET.0+64 RESET.64+192 } same as _71
D.88810 = { }
_ZSt4cerr.0+64 = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 }
_ZSt4cerr.64+64 = { ESCAPED NONLOCAL }
_ZSt4cerr.128+224 = { ESCAPED NONLOCAL }
_ZSt4cerr.384+64 = { ESCAPED NONLOCAL }
_ZSt4cerr.448+64 = { ESCAPED NONLOCAL }
_ZSt4cerr.512+1120 = { ESCAPED NONLOCAL }
_ZSt4cerr.1664+64 = { ESCAPED NONLOCAL }
_ZSt4cerr.1728+64 = { ESCAPED NONLOCAL }
_ZSt4cerr.1792+64 = { ESCAPED NONLOCAL }
_ZSt4cerr.1856+16 = { ESCAPED NONLOCAL }
_ZSt4cerr.1920+64 = { ESCAPED NONLOCAL }
_ZSt4cerr.1984+64 = { ESCAPED NONLOCAL }
_ZSt4cerr.2048+64 = { ESCAPED NONLOCAL }
_ZSt4cerr.2112+64 = { ESCAPED NONLOCAL }
func = { NONLOCAL }
file = { NONLOCAL } same as func
line = { NONLOCAL } same as func
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_ = { }
callescape(12) = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 }
CALLUSED(13) = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 D.88807 }
CALLCLOBBERED(14) = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 }
callarg(15) = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 }
callarg(18) = { STRING }
callarg(19) = { D.88807 }
callescape(21) = { STRING ESCAPED NONLOCAL RESET.0+64 RESET.64+192 }
CALLUSED(22) = { STRING ESCAPED NONLOCAL RESET.0+64 RESET.64+192 D.88810 }
CALLCLOBBERED(23) = { STRING ESCAPED NONLOCAL RESET.0+64 RESET.64+192 }
callarg(24) = { STRING ESCAPED NONLOCAL RESET.0+64 RESET.64+192 }
callarg(27) = { STRING }
callarg(28) = { D.88810 }
_49 = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 }
_52 = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 }
_20 = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 } same as _52
_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l = { }
callescape(34) = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 }
CALLUSED(35) = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 } same as callescape(34)
CALLCLOBBERED(36) = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 }
callarg(37) = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 }
callarg(52) = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 }
callarg(53) = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 }
_18 = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 } same as callescape(34)
callescape(55) = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 }
CALLUSED(56) = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 } same as callescape(55)
CALLCLOBBERED(57) = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 } same as callescape(55)
callarg(58) = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 }
callarg(59) = { STRING }
callarg(60) = { ESCAPED NONLOCAL }
_56 = { ESCAPED NONLOCAL }
_57 = { ESCAPED NONLOCAL }
_58 = { ESCAPED NONLOCAL } same as _57
callescape(64) = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 }
CALLUSED(65) = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 } same as callescape(64)
CALLCLOBBERED(66) = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 } same as callescape(64)
callarg(67) = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 }
callarg(68) = { ESCAPED NONLOCAL }
callarg(69) = { ESCAPED NONLOCAL }
_59 = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 } same as callescape(64)
callescape(71) = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 }
CALLUSED(72) = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 } same as callescape(71)
CALLCLOBBERED(73) = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 } same as callescape(71)
callarg(74) = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 }
callarg(75) = { STRING }
callarg(76) = { ESCAPED NONLOCAL }
_62 = { ESCAPED NONLOCAL }
_63 = { ESCAPED NONLOCAL }
_64 = { ESCAPED NONLOCAL } same as _63
callescape(80) = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 }
CALLUSED(81) = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 } same as callescape(80)
CALLCLOBBERED(82) = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 } same as callescape(80)
callarg(83) = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 }
callarg(84) = { ESCAPED NONLOCAL }
callarg(85) = { ESCAPED NONLOCAL }
_65 = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 } same as callescape(80)
callescape(87) = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 }
CALLUSED(88) = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 } same as callescape(87)
CALLCLOBBERED(89) = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 } same as callescape(87)
callarg(90) = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 }
callarg(91) = { STRING }
callarg(92) = { ESCAPED NONLOCAL }
_ZNSolsEi = { }
callescape(94) = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 }
CALLUSED(95) = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 } same as callescape(94)
CALLCLOBBERED(96) = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 } same as callescape(94)
callarg(97) = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 }
callarg(98) = { ESCAPED NONLOCAL }
_38 = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 } same as callescape(94)
callescape(100) = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 }
CALLUSED(101) = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 } same as callescape(100)
CALLCLOBBERED(102) = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 } same as callescape(100)
callarg(103) = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 }
callarg(104) = { STRING }
callarg(105) = { ESCAPED NONLOCAL }
_70 = { STRING ESCAPED NONLOCAL RESET.0+64 RESET.64+192 }
_71 = { STRING ESCAPED NONLOCAL RESET.0+64 RESET.64+192 }
_72 = { STRING ESCAPED NONLOCAL RESET.0+64 RESET.64+192 } same as _71
callescape(109) = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 RESET.0+64 RESET.64+192 _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 }
CALLUSED(110) = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 RESET.0+64 RESET.64+192 _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 } same as callescape(109)
CALLCLOBBERED(111) = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 RESET.0+64 RESET.64+192 _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 } same as callescape(109)
callarg(112) = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 }
callarg(113) = { STRING ESCAPED NONLOCAL RESET.0+64 RESET.64+192 }
callarg(114) = { STRING ESCAPED NONLOCAL RESET.0+64 RESET.64+192 }
_73 = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 RESET.0+64 RESET.64+192 _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 } same as callescape(109)
_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_ = { }
callescape(117) = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 RESET.0+64 RESET.64+192 _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 }
CALLUSED(118) = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 RESET.0+64 RESET.64+192 _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 } same as callescape(117)
CALLCLOBBERED(119) = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 RESET.0+64 RESET.64+192 _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 } same as callescape(117)
callarg(120) = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 RESET.0+64 RESET.64+192 _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 } same as callescape(117)
_74 = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 RESET.0+64 RESET.64+192 _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 } same as callescape(117)
_79 = { STRING ESCAPED NONLOCAL RESET.0+64 RESET.64+192 } same as _70
_81 = { STRING ESCAPED NONLOCAL RESET.0+64 RESET.64+192 } same as _71
_82 = { STRING ESCAPED NONLOCAL RESET.0+64 RESET.64+192 }
_ZdlPvm = { }
callescape(126) = { STRING ESCAPED NONLOCAL RESET.0+64 RESET.64+192 }
CALLUSED(127) = { STRING ESCAPED NONLOCAL RESET.0+64 RESET.64+192 } same as callescape(126)
CALLCLOBBERED(128) = { STRING ESCAPED NONLOCAL RESET.0+64 RESET.64+192 }
callarg(129) = { STRING ESCAPED NONLOCAL RESET.0+64 RESET.64+192 }
callarg(130) = { STRING ESCAPED NONLOCAL RESET.0+64 RESET.64+192 }
_75 = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 } same as _49
_77 = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 } same as _52
_78 = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 }
callescape(134) = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 }
CALLUSED(135) = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 } same as callescape(134)
CALLCLOBBERED(136) = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 }
callarg(137) = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 }
callarg(138) = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 }
_83 = { STRING ESCAPED NONLOCAL RESET.0+64 RESET.64+192 } same as _70
_85 = { STRING ESCAPED NONLOCAL RESET.0+64 RESET.64+192 } same as _71
_86 = { STRING ESCAPED NONLOCAL RESET.0+64 RESET.64+192 }
callescape(142) = { STRING ESCAPED NONLOCAL RESET.0+64 RESET.64+192 }
CALLUSED(143) = { STRING ESCAPED NONLOCAL RESET.0+64 RESET.64+192 } same as callescape(142)
CALLCLOBBERED(144) = { STRING ESCAPED NONLOCAL RESET.0+64 RESET.64+192 }
callarg(145) = { STRING ESCAPED NONLOCAL RESET.0+64 RESET.64+192 }
callarg(146) = { STRING ESCAPED NONLOCAL RESET.0+64 RESET.64+192 }
_87 = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 } same as _49
_89 = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 } same as _52
_90 = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 }
callescape(150) = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 }
CALLUSED(151) = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 } same as callescape(150)
CALLCLOBBERED(152) = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 }
callarg(153) = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 }
callarg(154) = { STRING ESCAPED NONLOCAL RED.0+64 RED.64+192 }


Alias information for logError(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)

Aliased symbols

RESET, UID D.88809, const struct string, is addressable
RED, UID D.88806, const struct string, is addressable
D.88810, UID D.88810, struct allocator, is addressable
D.88807, UID D.88807, struct allocator, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.47221 D.88806 D.88809 } (nonlocal, escaped, interposable)

Flow-insensitive points-to information

_18, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.47221 D.88806 } (nonlocal, escaped, interposable)
func_26(D), points-to non-local, points-to vars: { }
file_31(D), points-to non-local, points-to vars: { }
_38, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.47221 D.88806 } (nonlocal, escaped, interposable)
_49, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.88806 } (escaped)
_56, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_59, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.47221 D.88806 } (nonlocal, escaped, interposable)
_62, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_65, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.47221 D.88806 } (nonlocal, escaped, interposable)
_70, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.88809 } (escaped)
_73, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.47221 D.88806 D.88809 } (nonlocal, escaped, interposable)
_74, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.47221 D.88806 D.88809 } (nonlocal, escaped, interposable)
_75, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.88806 } (escaped)
_79, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.88809 } (escaped)
_83, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.88809 } (escaped)
_87, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.88806 } (escaped)

void logError (const struct string & func, const struct string & file, int line)
{
  struct basic_ostream & D.98712;
  struct basic_ostream & D.98709;
  struct basic_ostream & D.98706;
  struct basic_ostream & D.98703;
  struct basic_ostream & D.98700;
  struct basic_ostream & D.98697;
  struct basic_ostream & D.98694;
  struct basic_ostream & D.98690;
  const struct string RESET;
  const struct string RED;
  struct allocator D.88810;
  struct allocator D.88807;
  struct basic_ostream & _18;
  long int _20;
  struct basic_ostream & _38;
  char * _49;
  long unsigned int _52;
  char * _56;
  long unsigned int _57;
  long int _58;
  struct basic_ostream & _59;
  char * _62;
  long unsigned int _63;
  long int _64;
  struct basic_ostream & _65;
  char * _70;
  long unsigned int _71;
  long int _72;
  struct basic_ostream & _73;
  struct __ostream_type & _74;
  char * _75;
  long unsigned int _77;
  long unsigned int _78;
  char * _79;
  long unsigned int _81;
  long unsigned int _82;
  char * _83;
  long unsigned int _85;
  long unsigned int _86;
  char * _87;
  long unsigned int _89;
  long unsigned int _90;

  <bb 2> :
  gimple_call <__ct_comp , NULL, &RED, "\x1b[31m", &D.88807>

  <bb 3> :
  gimple_assign <constructor, D.88807, {CLOBBER(eol)}, NULL, NULL>
  gimple_call <__ct_comp , NULL, &RESET, "\x1b[0m", &D.88810>

  <bb 4> :
  gimple_assign <constructor, D.88810, {CLOBBER(eol)}, NULL, NULL>
  gimple_assign <component_ref, _49, RED._M_dataplus._M_p, NULL, NULL>
  gimple_assign <component_ref, _52, RED._M_string_length, NULL, NULL>
  gimple_assign <nop_expr, _20, _52, NULL, NULL>
  gimple_call <__ostream_insert, _18, &cerr, _49, _20>

  <bb 5> :
  gimple_call <__ostream_insert, NULL, _18, "In ", 3>

  <bb 6> :
  gimple_assign <component_ref, _56, MEM[(const struct basic_string *)func_26(D)]._M_dataplus._M_p, NULL, NULL>
  gimple_assign <component_ref, _57, MEM[(const struct basic_string *)func_26(D)]._M_string_length, NULL, NULL>
  gimple_assign <nop_expr, _58, _57, NULL, NULL>
  gimple_call <__ostream_insert, _59, _18, _56, _58>

  <bb 7> :
  gimple_call <__ostream_insert, NULL, _59, "() in ", 6>

  <bb 8> :
  gimple_assign <component_ref, _62, MEM[(const struct basic_string *)file_31(D)]._M_dataplus._M_p, NULL, NULL>
  gimple_assign <component_ref, _63, MEM[(const struct basic_string *)file_31(D)]._M_string_length, NULL, NULL>
  gimple_assign <nop_expr, _64, _63, NULL, NULL>
  gimple_call <__ostream_insert, _65, _59, _62, _64>

  <bb 9> :
  gimple_call <__ostream_insert, NULL, _65, " line ", 6>

  <bb 10> :
  gimple_call <operator<<, _38, _65, line_36(D)>

  <bb 11> :
  gimple_call <__ostream_insert, NULL, _38, ":", 1>

  <bb 12> :
  gimple_assign <component_ref, _70, RESET._M_dataplus._M_p, NULL, NULL>
  gimple_assign <component_ref, _71, RESET._M_string_length, NULL, NULL>
  gimple_assign <nop_expr, _72, _71, NULL, NULL>
  gimple_call <__ostream_insert, _73, _38, _70, _72>

  <bb 13> :
  gimple_call <endl, _74, _73>

  <bb 14> :
  gimple_assign <component_ref, _79, RESET._M_dataplus._M_p, NULL, NULL>
  gimple_cond <ne_expr, &RESET.D.28191._M_local_buf, _79, NULL, NULL>
    goto <bb 15>; [53.47%]
  else
    goto <bb 16>; [46.53%]

  <bb 15> :
  gimple_assign <component_ref, _81, RESET.D.28191._M_allocated_capacity, NULL, NULL>
  gimple_assign <plus_expr, _82, _81, 1, NULL>
  gimple_call <operator delete, NULL, _79, _82>

  <bb 16> :
  gimple_assign <constructor, RESET, {CLOBBER}, NULL, NULL>
  gimple_assign <component_ref, _75, RED._M_dataplus._M_p, NULL, NULL>
  gimple_cond <ne_expr, &RED.D.28191._M_local_buf, _75, NULL, NULL>
    goto <bb 17>; [53.47%]
  else
    goto <bb 18>; [46.53%]

  <bb 17> :
  gimple_assign <component_ref, _77, RED.D.28191._M_allocated_capacity, NULL, NULL>
  gimple_assign <plus_expr, _78, _77, 1, NULL>
  gimple_call <operator delete, NULL, _75, _78>

  <bb 18> :
  gimple_assign <constructor, RED, {CLOBBER}, NULL, NULL>
  gimple_assign <constructor, RED, {CLOBBER(eol)}, NULL, NULL>
  gimple_assign <constructor, RESET, {CLOBBER(eol)}, NULL, NULL>
  gimple_return <NULL>

  <bb 19> :
gimple_label <<L0>>
  gimple_resx <3>

  <bb 20> :
gimple_label <<L1>>
  gimple_assign <constructor, D.88807, {CLOBBER(eol)}, NULL, NULL>
  gimple_resx <2>

  <bb 21> :
gimple_label <<L2>>
  gimple_resx <8>

  <bb 22> :
gimple_label <<L3>>
  gimple_assign <constructor, D.88810, {CLOBBER(eol)}, NULL, NULL>
  gimple_resx <7>

  <bb 23> :
gimple_label <<L4>>
  gimple_assign <component_ref, _83, RESET._M_dataplus._M_p, NULL, NULL>
  gimple_cond <ne_expr, &RESET.D.28191._M_local_buf, _83, NULL, NULL>
    goto <bb 24>; [53.47%]
  else
    goto <bb 25>; [46.53%]

  <bb 24> :
  gimple_assign <component_ref, _85, RESET.D.28191._M_allocated_capacity, NULL, NULL>
  gimple_assign <plus_expr, _86, _85, 1, NULL>
  gimple_call <operator delete, NULL, _83, _86>

  <bb 25> :
  gimple_assign <constructor, RESET, {CLOBBER}, NULL, NULL>
  gimple_resx <11>

  <bb 26> :
gimple_label <<L5>>
  gimple_assign <component_ref, _87, RED._M_dataplus._M_p, NULL, NULL>
  gimple_cond <ne_expr, &RED.D.28191._M_local_buf, _87, NULL, NULL>
    goto <bb 27>; [53.47%]
  else
    goto <bb 28>; [46.53%]

  <bb 27> :
  gimple_assign <component_ref, _89, RED.D.28191._M_allocated_capacity, NULL, NULL>
  gimple_assign <plus_expr, _90, _89, 1, NULL>
  gimple_call <operator delete, NULL, _87, _90>

  <bb 28> :
  gimple_assign <constructor, RED, {CLOBBER}, NULL, NULL>
  gimple_resx <6>

  <bb 29> :
gimple_label <<L6>>
  gimple_assign <constructor, RED, {CLOBBER(eol)}, NULL, NULL>
  gimple_assign <constructor, RESET, {CLOBBER(eol)}, NULL, NULL>
  gimple_resx <1>

}



;; Function std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::~basic_stringbuf (_ZNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEED2Ev, funcdef_no=4450, decl_uid=76552, cgraph_uid=1928, symbol_order=2512)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_ZTVNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEE = NONLOCAL
derefaddrtmp(10) = &_ZTVNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEE
*this = derefaddrtmp(10)
_2 = this + UNKNOWN
_11 = *this + 576
_12 = this + UNKNOWN
_13 = *this + 704
_14 = _13 + UNKNOWN
_14 = &NONLOCAL
callescape(17) = NONLOCAL
CALLUSED(18) = callescape(17)
callarg(20) = _11
callarg(20) = callarg(20) + UNKNOWN
callarg(20) = *callarg(20) + UNKNOWN
CALLUSED(18) = callarg(20)
*callarg(20) = callescape(17)
CALLCLOBBERED(19) = callarg(20)
callescape(17) = callarg(20)
ESCAPED = _11
callarg(21) = _14
callarg(21) = callarg(21) + UNKNOWN
callarg(21) = *callarg(21) + UNKNOWN
CALLUSED(18) = callarg(21)
*callarg(21) = callescape(17)
CALLCLOBBERED(19) = callarg(21)
callescape(17) = callarg(21)
ESCAPED = _14
_3 = this + UNKNOWN
_ZTVSt15basic_streambufIcSt11char_traitsIcEE = NONLOCAL
derefaddrtmp(24) = &_ZTVSt15basic_streambufIcSt11char_traitsIcEE
*this = derefaddrtmp(24)
_10 = this + UNKNOWN
callescape(27) = NONLOCAL
CALLUSED(28) = callescape(27)
callarg(30) = _10
callarg(30) = callarg(30) + UNKNOWN
callarg(30) = *callarg(30) + UNKNOWN
CALLUSED(28) = callarg(30)
*callarg(30) = callescape(27)
CALLCLOBBERED(29) = callarg(30)
callescape(27) = callarg(30)
ESCAPED = _10

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL _ZTVNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEE _ZTVSt15basic_streambufIcSt11char_traitsIcEE }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
_ZTVNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEE = { ESCAPED NONLOCAL }
_ZTVSt15basic_streambufIcSt11char_traitsIcEE = { ESCAPED NONLOCAL }
this = { NONLOCAL }
derefaddrtmp(10) = { _ZTVNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEE }
_2 = { NONLOCAL }
_11 = { ESCAPED NONLOCAL }
_12 = { NONLOCAL }
_13 = { ESCAPED NONLOCAL }
_14 = { ESCAPED NONLOCAL }
_ZdlPvm = { }
callescape(17) = { ESCAPED NONLOCAL }
CALLUSED(18) = { ESCAPED NONLOCAL } same as callescape(17)
CALLCLOBBERED(19) = { ESCAPED NONLOCAL }
callarg(20) = { ESCAPED NONLOCAL }
callarg(21) = { ESCAPED NONLOCAL }
_3 = { NONLOCAL }
derefaddrtmp(24) = { _ZTVSt15basic_streambufIcSt11char_traitsIcEE }
_10 = { NONLOCAL }
_ZNSt6localeD1Ev = { }
callescape(27) = { ESCAPED NONLOCAL }
CALLUSED(28) = { ESCAPED NONLOCAL } same as callescape(27)
CALLCLOBBERED(29) = { ESCAPED NONLOCAL } same as callarg(30)
callarg(30) = { ESCAPED NONLOCAL }


Alias information for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::~basic_stringbuf()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.39074 D.76598 } (nonlocal, escaped, interposable)

Flow-insensitive points-to information

_2, points-to non-local, points-to NULL, points-to vars: { }
_3, points-to non-local, points-to NULL, points-to vars: { }
this_5(D), points-to non-local, points-to vars: { }
_10, points-to non-local, points-to NULL, points-to vars: { }
_11, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_12, points-to non-local, points-to NULL, points-to vars: { }

void std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::~basic_stringbuf (struct basic_stringbuf * const this)
{
  struct __string_type * _2;
  struct basic_streambuf * _3;
  struct locale * _10;
  char * _11;
  const char[16] * _12;
  long unsigned int _13;
  long unsigned int _14;

  <bb 2> :
  gimple_assign <addr_expr, this_5(D)->D.76593._vptr.basic_streambuf, &MEM <int (*__vtbl_ptr_type) ()[16]> [(void *)&_ZTVNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEE + 16B], NULL, NULL>
  gimple_assign <addr_expr, _2, &this_5(D)->_M_string, NULL, NULL>
  gimple_assign <component_ref, _11, MEM[(const struct basic_string *)this_5(D) + 72B]._M_dataplus._M_p, NULL, NULL>
  gimple_assign <addr_expr, _12, &MEM[(const struct basic_string *)this_5(D) + 72B].D.28191._M_local_buf, NULL, NULL>
  gimple_cond <ne_expr, _11, _12, NULL, NULL>
    goto <bb 3>; [53.47%]
  else
    goto <bb 4>; [46.53%]

  <bb 3> :
  gimple_assign <component_ref, _13, MEM[(struct basic_string *)this_5(D) + 72B].D.28191._M_allocated_capacity, NULL, NULL>
  gimple_assign <plus_expr, _14, _13, 1, NULL>
  gimple_call <operator delete, NULL, _11, _14>

  <bb 4> :
  gimple_assign <constructor, MEM[(struct basic_string *)this_5(D) + 72B], {CLOBBER}, NULL, NULL>
  gimple_assign <addr_expr, _3, &this_5(D)->D.76593, NULL, NULL>
  gimple_assign <addr_expr, MEM[(struct basic_streambuf *)this_5(D)]._vptr.basic_streambuf, &MEM <int (*__vtbl_ptr_type) ()[16]> [(void *)&_ZTVSt15basic_streambufIcSt11char_traitsIcEE + 16B], NULL, NULL>
  gimple_assign <addr_expr, _10, &MEM[(struct basic_streambuf *)this_5(D)]._M_buf_locale, NULL, NULL>
  gimple_call <__dt_comp , NULL, _10>
  gimple_assign <constructor, MEM[(struct basic_streambuf *)this_5(D)], {CLOBBER}, NULL, NULL>
  gimple_assign <constructor, *this_5(D), {CLOBBER}, NULL, NULL>
  gimple_return <NULL>

}



;; Function std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream (_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEC1Ev, funcdef_no=4454, decl_uid=76856, cgraph_uid=1933, symbol_order=2517)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &PARM_NOALIAS(9)
PARM_NOALIAS(9) = &NONLOCAL
_1 = this + UNKNOWN
_32 = this + UNKNOWN
callescape(13) = NONLOCAL
CALLUSED(14) = callescape(13)
callarg(16) = _32
callarg(16) = callarg(16) + UNKNOWN
callarg(16) = *callarg(16) + UNKNOWN
CALLUSED(14) = callarg(16)
*callarg(16) = callescape(13)
CALLCLOBBERED(15) = callarg(16)
callescape(13) = callarg(16)
ESCAPED = _32
_ZTVSt9basic_iosIcSt11char_traitsIcEE = NONLOCAL
derefaddrtmp(18) = &_ZTVSt9basic_iosIcSt11char_traitsIcEE
*this + 896 = derefaddrtmp(18)
derefaddrtmp(19) = &NULL
*this + 2624 = derefaddrtmp(19)
derefaddrtmp(20) = &NULL
*this + 2688 = derefaddrtmp(20)
derefaddrtmp(21) = &NULL
*this + 2696 = derefaddrtmp(21)
derefaddrtmp(22) = &NULL
*this + 2752 = derefaddrtmp(22)
derefaddrtmp(23) = &NULL
*this + 2816 = derefaddrtmp(23)
derefaddrtmp(24) = &NULL
*this + 2880 = derefaddrtmp(24)
derefaddrtmp(25) = &NULL
*this + 2944 = derefaddrtmp(25)
_2 = this + UNKNOWN
_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE = NONLOCAL
_27 = _ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE
*this = _27
_28 = *_27 + -192
_29 = _28
_30 = _2 + UNKNOWN
_31 = _ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE
*_30 = _31
callescape(34) = NONLOCAL
CALLUSED(35) = callescape(34)
callarg(37) = _30
callarg(37) = callarg(37) + UNKNOWN
callarg(37) = *callarg(37) + UNKNOWN
CALLUSED(35) = callarg(37)
*callarg(37) = callescape(34)
CALLCLOBBERED(36) = callarg(37)
callescape(34) = callarg(37)
ESCAPED = _30
callarg(38) = &NULL
callarg(38) = callarg(38) + UNKNOWN
callarg(38) = *callarg(38) + UNKNOWN
CALLUSED(35) = callarg(38)
*callarg(38) = callescape(34)
CALLCLOBBERED(36) = callarg(38)
callescape(34) = callarg(38)
ESCAPED = &NULL
_ZTVNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE = NONLOCAL
derefaddrtmp(40) = &_ZTVNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE
*this = derefaddrtmp(40)
derefaddrtmp(41) = &_ZTVNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE
*this + 896 = derefaddrtmp(41)
_7 = this + UNKNOWN
_ZTVSt15basic_streambufIcSt11char_traitsIcEE = NONLOCAL
derefaddrtmp(44) = &_ZTVSt15basic_streambufIcSt11char_traitsIcEE
*this + 64 = derefaddrtmp(44)
derefaddrtmp(45) = &NULL
*this + 128 = derefaddrtmp(45)
derefaddrtmp(46) = &NULL
*this + 192 = derefaddrtmp(46)
derefaddrtmp(47) = &NULL
*this + 256 = derefaddrtmp(47)
derefaddrtmp(48) = &NULL
*this + 320 = derefaddrtmp(48)
derefaddrtmp(49) = &NULL
*this + 384 = derefaddrtmp(49)
derefaddrtmp(50) = &NULL
*this + 448 = derefaddrtmp(50)
_33 = this + UNKNOWN
callescape(53) = NONLOCAL
CALLUSED(54) = callescape(53)
callarg(56) = _33
callarg(56) = callarg(56) + UNKNOWN
callarg(56) = *callarg(56) + UNKNOWN
CALLUSED(54) = callarg(56)
*callarg(56) = callescape(53)
CALLCLOBBERED(55) = callarg(56)
callescape(53) = callarg(56)
ESCAPED = _33
_ZTVNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEE = NONLOCAL
derefaddrtmp(58) = &_ZTVNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEE
*this + 64 = derefaddrtmp(58)
derefaddrtmp(59) = &NONLOCAL
*this + 576 = derefaddrtmp(59)
_34 = this + UNKNOWN
*this + 640 = _34
derefaddrtmp(61) = &NULL
*this + 704 = derefaddrtmp(61)
derefaddrtmp(62) = &NULL
*this + 768 = derefaddrtmp(62)
_8 = this + 896
_9 = this + UNKNOWN
callescape(65) = NONLOCAL
CALLUSED(66) = callescape(65)
callarg(68) = _8
callarg(68) = callarg(68) + UNKNOWN
callarg(68) = *callarg(68) + UNKNOWN
CALLUSED(66) = callarg(68)
*callarg(68) = callescape(65)
CALLCLOBBERED(67) = callarg(68)
callescape(65) = callarg(68)
ESCAPED = _8
callarg(69) = _9
callarg(69) = callarg(69) + UNKNOWN
callarg(69) = *callarg(69) + UNKNOWN
CALLUSED(66) = callarg(69)
*callarg(69) = callescape(65)
CALLCLOBBERED(67) = callarg(69)
callescape(65) = callarg(69)
ESCAPED = _9
_10 = this + UNKNOWN
callescape(72) = NONLOCAL
CALLUSED(73) = callescape(72)
callarg(75) = _10
callarg(75) = callarg(75) + UNKNOWN
callarg(75) = *callarg(75) + UNKNOWN
CALLUSED(73) = callarg(75)
*callarg(75) = callescape(72)
CALLCLOBBERED(74) = callarg(75)
callescape(72) = callarg(75)
ESCAPED = _10
_11 = this + UNKNOWN
_35 = _ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE
*this = _35
_36 = *_35 + -192
_37 = _36
_38 = _11 + UNKNOWN
_39 = _ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE
*_38 = _39
_13 = this + UNKNOWN
derefaddrtmp(83) = &_ZTVSt9basic_iosIcSt11char_traitsIcEE
*this + 896 = derefaddrtmp(83)
_40 = this + UNKNOWN
callescape(86) = NONLOCAL
CALLUSED(87) = callescape(86)
callarg(89) = _40
callarg(89) = callarg(89) + UNKNOWN
callarg(89) = *callarg(89) + UNKNOWN
CALLUSED(87) = callarg(89)
*callarg(89) = callescape(86)
CALLCLOBBERED(88) = callarg(89)
callescape(86) = callarg(89)
ESCAPED = _40

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL PARM_NOALIAS(9) _ZTVSt9basic_iosIcSt11char_traitsIcEE _ZTVNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE _ZTVSt15basic_streambufIcSt11char_traitsIcEE _ZTVNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEE }
NONLOCAL = { ESCAPED NONLOCAL } same as _ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE
STOREDANYTHING = { }
INTEGER = { ANYTHING }
PARM_NOALIAS(9) = { ESCAPED NONLOCAL }
_ZTVSt9basic_iosIcSt11char_traitsIcEE = { ESCAPED NONLOCAL }
_ZTVNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE = { ESCAPED NONLOCAL }
_ZTVSt15basic_streambufIcSt11char_traitsIcEE = { ESCAPED NONLOCAL }
_ZTVNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEE = { ESCAPED NONLOCAL }
this = { PARM_NOALIAS(9) }
_1 = { PARM_NOALIAS(9) }
_32 = { PARM_NOALIAS(9) }
_ZNSt8ios_baseC2Ev = { }
callescape(13) = { ESCAPED NONLOCAL PARM_NOALIAS(9) }
CALLUSED(14) = { ESCAPED NONLOCAL PARM_NOALIAS(9) } same as callescape(13)
CALLCLOBBERED(15) = { ESCAPED NONLOCAL PARM_NOALIAS(9) } same as callarg(16)
callarg(16) = { ESCAPED NONLOCAL PARM_NOALIAS(9) }
derefaddrtmp(18) = { _ZTVSt9basic_iosIcSt11char_traitsIcEE }
derefaddrtmp(19) = { NULL }
derefaddrtmp(20) = { NULL } same as derefaddrtmp(19)
derefaddrtmp(21) = { NULL } same as derefaddrtmp(19)
derefaddrtmp(22) = { NULL } same as derefaddrtmp(19)
derefaddrtmp(23) = { NULL } same as derefaddrtmp(19)
derefaddrtmp(24) = { NULL } same as derefaddrtmp(19)
derefaddrtmp(25) = { NULL } same as derefaddrtmp(19)
_2 = { PARM_NOALIAS(9) }
_27 = { ESCAPED NONLOCAL } same as _ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE
_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE = { ESCAPED NONLOCAL }
_28 = { ESCAPED NONLOCAL }
_29 = { ESCAPED NONLOCAL } same as _28
_30 = { PARM_NOALIAS(9) }
_31 = { ESCAPED NONLOCAL } same as _ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE
_ZNSt9basic_iosIcSt11char_traitsIcEE4initEPSt15basic_streambufIcS1_E = { }
callescape(34) = { NULL ESCAPED NONLOCAL PARM_NOALIAS(9) }
CALLUSED(35) = { NULL ESCAPED NONLOCAL PARM_NOALIAS(9) } same as callescape(34)
CALLCLOBBERED(36) = { NULL ESCAPED NONLOCAL PARM_NOALIAS(9) }
callarg(37) = { ESCAPED NONLOCAL PARM_NOALIAS(9) }
callarg(38) = { NULL }
derefaddrtmp(40) = { _ZTVNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE }
derefaddrtmp(41) = { _ZTVNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE } same as derefaddrtmp(40)
_7 = { PARM_NOALIAS(9) }
derefaddrtmp(44) = { _ZTVSt15basic_streambufIcSt11char_traitsIcEE }
derefaddrtmp(45) = { NULL } same as derefaddrtmp(19)
derefaddrtmp(46) = { NULL } same as derefaddrtmp(19)
derefaddrtmp(47) = { NULL } same as derefaddrtmp(19)
derefaddrtmp(48) = { NULL } same as derefaddrtmp(19)
derefaddrtmp(49) = { NULL } same as derefaddrtmp(19)
derefaddrtmp(50) = { NULL } same as derefaddrtmp(19)
_33 = { PARM_NOALIAS(9) }
_ZNSt6localeC1Ev = { }
callescape(53) = { ESCAPED NONLOCAL PARM_NOALIAS(9) }
CALLUSED(54) = { ESCAPED NONLOCAL PARM_NOALIAS(9) } same as callescape(53)
CALLCLOBBERED(55) = { ESCAPED NONLOCAL PARM_NOALIAS(9) } same as callarg(56)
callarg(56) = { ESCAPED NONLOCAL PARM_NOALIAS(9) }
derefaddrtmp(58) = { _ZTVNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEE }
derefaddrtmp(59) = { NONLOCAL }
_34 = { PARM_NOALIAS(9) }
derefaddrtmp(61) = { NULL } same as derefaddrtmp(19)
derefaddrtmp(62) = { NULL } same as derefaddrtmp(19)
_8 = { PARM_NOALIAS(9) }
_9 = { PARM_NOALIAS(9) }
callescape(65) = { ESCAPED NONLOCAL PARM_NOALIAS(9) }
CALLUSED(66) = { ESCAPED NONLOCAL PARM_NOALIAS(9) } same as callescape(65)
CALLCLOBBERED(67) = { ESCAPED NONLOCAL PARM_NOALIAS(9) }
callarg(68) = { ESCAPED NONLOCAL PARM_NOALIAS(9) }
callarg(69) = { ESCAPED NONLOCAL PARM_NOALIAS(9) }
_10 = { PARM_NOALIAS(9) }
_ZNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEED1Ev = { }
callescape(72) = { ESCAPED NONLOCAL PARM_NOALIAS(9) }
CALLUSED(73) = { ESCAPED NONLOCAL PARM_NOALIAS(9) } same as callescape(72)
CALLCLOBBERED(74) = { ESCAPED NONLOCAL PARM_NOALIAS(9) } same as callarg(75)
callarg(75) = { ESCAPED NONLOCAL PARM_NOALIAS(9) }
_11 = { PARM_NOALIAS(9) }
_35 = { ESCAPED NONLOCAL } same as _ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE
_36 = { ESCAPED NONLOCAL }
_37 = { ESCAPED NONLOCAL } same as _36
_38 = { PARM_NOALIAS(9) }
_39 = { ESCAPED NONLOCAL } same as _ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE
_13 = { PARM_NOALIAS(9) }
derefaddrtmp(83) = { _ZTVSt9basic_iosIcSt11char_traitsIcEE } same as derefaddrtmp(18)
_40 = { PARM_NOALIAS(9) }
_ZNSt8ios_baseD2Ev = { }
callescape(86) = { ESCAPED NONLOCAL PARM_NOALIAS(9) }
CALLUSED(87) = { ESCAPED NONLOCAL PARM_NOALIAS(9) } same as callescape(86)
CALLCLOBBERED(88) = { ESCAPED NONLOCAL PARM_NOALIAS(9) } same as callarg(89)
callarg(89) = { ESCAPED NONLOCAL PARM_NOALIAS(9) }


Alias information for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.39074 D.43805 D.76598 D.76881 D.98734 } (nonlocal, escaped, restrict, interposable)

Flow-insensitive points-to information

_1, points-to NULL, points-to vars: { D.98734 } (nonlocal, escaped, restrict)
_2, points-to NULL, points-to vars: { D.98734 } (nonlocal, escaped, restrict)
_7, points-to NULL, points-to vars: { D.98734 } (nonlocal, escaped, restrict)
_8, points-to NULL, points-to vars: { D.98734 } (nonlocal, escaped, restrict)
_9, points-to NULL, points-to vars: { D.98734 } (nonlocal, escaped, restrict)
_10, points-to NULL, points-to vars: { D.98734 } (nonlocal, escaped, restrict)
_11, points-to NULL, points-to vars: { D.98734 } (nonlocal, escaped, restrict)
_13, points-to NULL, points-to vars: { D.98734 } (nonlocal, escaped, restrict)
this_16(D), points-to vars: { D.98734 } (nonlocal, escaped, restrict)
_27, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_30, points-to NULL, points-to vars: { D.98734 } (nonlocal, escaped, restrict)
_31, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_32, points-to NULL, points-to vars: { D.98734 } (nonlocal, escaped, restrict)
_33, points-to NULL, points-to vars: { D.98734 } (nonlocal, escaped, restrict)
_34, points-to NULL, points-to vars: { D.98734 } (nonlocal, escaped, restrict)
_35, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_38, points-to NULL, points-to vars: { D.98734 } (nonlocal, escaped, restrict)
_39, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_40, points-to NULL, points-to vars: { D.98734 } (nonlocal, escaped, restrict)

void std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream (struct basic_ostringstream * const this)
{
  struct basic_ios * _1;
  struct basic_ostream * _2;
  struct __stringbuf_type * _7;
  struct basic_ios * _8;
  struct basic_streambuf * _9;
  struct __stringbuf_type * _10;
  struct basic_ostream * _11;
  struct basic_ios * _13;
  const void * _27;
  long int _28;
  sizetype _29;
  struct basic_ostream * _30;
  const void * _31;
  struct ios_base * _32;
  struct locale * _33;
  char[16] * _34;
  const void * _35;
  long int _36;
  sizetype _37;
  struct basic_ostream * _38;
  const void * _39;
  struct ios_base * _40;

  <bb 2> :
  gimple_assign <constructor, *this_16(D), {CLOBBER}, NULL, NULL>
  gimple_assign <addr_expr, _1, &this_16(D)->D.76880, NULL, NULL>
  gimple_assign <constructor, MEM[(struct basic_ios *)this_16(D) + 112B], {CLOBBER}, NULL, NULL>
  gimple_assign <addr_expr, _32, &MEM[(struct basic_ios *)this_16(D) + 112B].D.43795, NULL, NULL>
  gimple_call <__ct_base , NULL, _32>
  gimple_assign <addr_expr, MEM[(struct basic_ios *)this_16(D) + 112B].D.43795._vptr.ios_base, &MEM <int (*__vtbl_ptr_type) ()[4]> [(void *)&_ZTVSt9basic_iosIcSt11char_traitsIcEE + 16B], NULL, NULL>
  gimple_assign <integer_cst, MEM[(struct basic_ios *)this_16(D) + 112B]._M_tie, 0B, NULL, NULL>
  gimple_assign <integer_cst, MEM[(struct basic_ios *)this_16(D) + 112B]._M_fill, 0, NULL, NULL>
  gimple_assign <integer_cst, MEM[(struct basic_ios *)this_16(D) + 112B]._M_fill_init, 0, NULL, NULL>
  gimple_assign <integer_cst, MEM[(struct basic_ios *)this_16(D) + 112B]._M_streambuf, 0B, NULL, NULL>
  gimple_assign <integer_cst, MEM[(struct basic_ios *)this_16(D) + 112B]._M_ctype, 0B, NULL, NULL>
  gimple_assign <integer_cst, MEM[(struct basic_ios *)this_16(D) + 112B]._M_num_put, 0B, NULL, NULL>
  gimple_assign <integer_cst, MEM[(struct basic_ios *)this_16(D) + 112B]._M_num_get, 0B, NULL, NULL>
  gimple_assign <addr_expr, _2, &this_16(D)->D.76876, NULL, NULL>
  gimple_assign <mem_ref, _27, MEM[(const void * *)&_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE + 8B], NULL, NULL>
  gimple_assign <ssa_name, MEM[(struct basic_ostream *)this_16(D)]._vptr.basic_ostream, _27, NULL, NULL>
  gimple_assign <mem_ref, _28, MEM[(long int *)_27 + -24B], NULL, NULL>
  gimple_assign <nop_expr, _29, _28, NULL, NULL>
  gimple_assign <pointer_plus_expr, _30, _2, _29, NULL>
  gimple_assign <mem_ref, _31, MEM[(const void * *)&_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE + 16B], NULL, NULL>
  gimple_assign <ssa_name, MEM[(struct basic_ios *)_30].D.43795._vptr.ios_base, _31, NULL, NULL>
  gimple_call <init, NULL, _30, 0B>

  <bb 3> :
  gimple_assign <addr_expr, *this_16(D).D.76876._vptr.basic_ostream, &MEM <int (*__vtbl_ptr_type) ()[10]> [(void *)&_ZTVNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE + 24B], NULL, NULL>
  gimple_assign <addr_expr, MEM[(struct basic_ios *)this_16(D) + 112B].D.43795._vptr.ios_base, &MEM <int (*__vtbl_ptr_type) ()[10]> [(void *)&_ZTVNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE + 64B], NULL, NULL>
  gimple_assign <addr_expr, _7, &this_16(D)->_M_stringbuf, NULL, NULL>
  gimple_assign <constructor, MEM[(struct basic_stringbuf *)this_16(D) + 8B], {CLOBBER}, NULL, NULL>
  gimple_assign <constructor, MEM[(struct basic_streambuf *)this_16(D) + 8B], {CLOBBER}, NULL, NULL>
  gimple_assign <addr_expr, MEM[(struct basic_streambuf *)this_16(D) + 8B]._vptr.basic_streambuf, &MEM <int (*__vtbl_ptr_type) ()[16]> [(void *)&_ZTVSt15basic_streambufIcSt11char_traitsIcEE + 16B], NULL, NULL>
  gimple_assign <integer_cst, MEM[(struct basic_streambuf *)this_16(D) + 8B]._M_in_beg, 0B, NULL, NULL>
  gimple_assign <integer_cst, MEM[(struct basic_streambuf *)this_16(D) + 8B]._M_in_cur, 0B, NULL, NULL>
  gimple_assign <integer_cst, MEM[(struct basic_streambuf *)this_16(D) + 8B]._M_in_end, 0B, NULL, NULL>
  gimple_assign <integer_cst, MEM[(struct basic_streambuf *)this_16(D) + 8B]._M_out_beg, 0B, NULL, NULL>
  gimple_assign <integer_cst, MEM[(struct basic_streambuf *)this_16(D) + 8B]._M_out_cur, 0B, NULL, NULL>
  gimple_assign <integer_cst, MEM[(struct basic_streambuf *)this_16(D) + 8B]._M_out_end, 0B, NULL, NULL>
  gimple_assign <addr_expr, _33, &MEM[(struct basic_streambuf *)this_16(D) + 8B]._M_buf_locale, NULL, NULL>
  gimple_call <__ct_comp , NULL, _33>
  gimple_assign <addr_expr, MEM[(struct basic_stringbuf *)this_16(D) + 8B].D.76593._vptr.basic_streambuf, &MEM <int (*__vtbl_ptr_type) ()[16]> [(void *)&_ZTVNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEE + 16B], NULL, NULL>
  gimple_assign <integer_cst, MEM[(struct basic_stringbuf *)this_16(D) + 8B]._M_mode, 16, NULL, NULL>
  gimple_assign <constructor, MEM[(struct basic_string *)this_16(D) + 80B], {CLOBBER}, NULL, NULL>
  gimple_assign <addr_expr, _34, &MEM[(struct basic_string *)this_16(D) + 80B].D.28191._M_local_buf, NULL, NULL>
  gimple_assign <constructor, MEM[(struct _Alloc_hider *)this_16(D) + 80B], {CLOBBER}, NULL, NULL>
  gimple_assign <ssa_name, MEM[(struct _Alloc_hider *)this_16(D) + 80B]._M_p, _34, NULL, NULL>
  gimple_assign <integer_cst, MEM[(struct basic_string *)this_16(D) + 80B]._M_string_length, 0, NULL, NULL>
  gimple_assign <integer_cst, MEM[(char_type &)this_16(D) + 96], 0, NULL, NULL>
  gimple_assign <pointer_plus_expr, _8, this_16(D), 112, NULL>
  gimple_assign <addr_expr, _9, &this_16(D)->_M_stringbuf.D.76593, NULL, NULL>
  gimple_call <init, NULL, _8, _9>

  <bb 4> :
  gimple_return <NULL>

  <bb 5> :
gimple_label <<L0>>
  gimple_assign <addr_expr, _10, &this_16(D)->_M_stringbuf, NULL, NULL>
  gimple_call <__dt_comp , NULL, _10>
  gimple_resx <3>

  <bb 6> :
gimple_label <<L1>>
  gimple_assign <addr_expr, _11, &this_16(D)->D.76876, NULL, NULL>
  gimple_assign <mem_ref, _35, MEM[(const void * *)&_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE + 8B], NULL, NULL>
  gimple_assign <ssa_name, MEM[(struct basic_ostream *)this_16(D)]._vptr.basic_ostream, _35, NULL, NULL>
  gimple_assign <mem_ref, _36, MEM[(long int *)_35 + -24B], NULL, NULL>
  gimple_assign <nop_expr, _37, _36, NULL, NULL>
  gimple_assign <pointer_plus_expr, _38, _11, _37, NULL>
  gimple_assign <mem_ref, _39, MEM[(const void * *)&_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE + 16B], NULL, NULL>
  gimple_assign <ssa_name, MEM[(struct basic_ios *)_38].D.43795._vptr.ios_base, _39, NULL, NULL>
  gimple_resx <2>

  <bb 7> :
gimple_label <<L2>>
  gimple_assign <addr_expr, _13, &this_16(D)->D.76880, NULL, NULL>
  gimple_assign <addr_expr, MEM[(struct basic_ios *)this_16(D) + 112B].D.43795._vptr.ios_base, &MEM <int (*__vtbl_ptr_type) ()[4]> [(void *)&_ZTVSt9basic_iosIcSt11char_traitsIcEE + 16B], NULL, NULL>
  gimple_assign <addr_expr, _40, &MEM[(struct basic_ios *)this_16(D) + 112B].D.43795, NULL, NULL>
  gimple_call <__dt_base , NULL, _40>
  gimple_assign <constructor, MEM[(struct basic_ios *)this_16(D) + 112B], {CLOBBER}, NULL, NULL>
  gimple_resx <1>

}



;; Function std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::~basic_stringbuf (_ZNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEED0Ev, funcdef_no=4452, decl_uid=76546, cgraph_uid=1930, symbol_order=2514)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
callescape(10) = NONLOCAL
CALLUSED(11) = callescape(10)
callarg(13) = this
callarg(13) = callarg(13) + UNKNOWN
callarg(13) = *callarg(13) + UNKNOWN
CALLUSED(11) = callarg(13)
*callarg(13) = callescape(10)
CALLCLOBBERED(12) = callarg(13)
callescape(10) = callarg(13)
ESCAPED = this

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_ZNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEED1Ev = { }
callescape(10) = { ESCAPED NONLOCAL }
CALLUSED(11) = { ESCAPED NONLOCAL } same as callescape(10)
CALLCLOBBERED(12) = { ESCAPED NONLOCAL } same as callarg(13)
callarg(13) = { ESCAPED NONLOCAL }
_ZdlPvm = { }


Alias information for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::~basic_stringbuf()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to vars: { }

void std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::~basic_stringbuf (struct basic_stringbuf * const this)
{
  <bb 2> :
  gimple_call <__dt_comp , NULL, this_2(D)>
  gimple_call <operator delete, NULL, this_2(D), 104>
  gimple_return <NULL>

}



;; Function std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_ostringstream (_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEED1Ev, funcdef_no=4457, decl_uid=76868, cgraph_uid=1936, symbol_order=2520)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_ZTVNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE = NONLOCAL
derefaddrtmp(10) = &_ZTVNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE
*this = derefaddrtmp(10)
derefaddrtmp(11) = &_ZTVNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE
*this + 896 = derefaddrtmp(11)
_4 = this + UNKNOWN
callescape(14) = NONLOCAL
CALLUSED(15) = callescape(14)
callarg(17) = _4
callarg(17) = callarg(17) + UNKNOWN
callarg(17) = *callarg(17) + UNKNOWN
CALLUSED(15) = callarg(17)
*callarg(17) = callescape(14)
CALLCLOBBERED(16) = callarg(17)
callescape(14) = callarg(17)
ESCAPED = _4
_5 = this + UNKNOWN
_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE = NONLOCAL
_17 = _ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE
*this = _17
_18 = *_17 + -192
_19 = _18
_20 = _5 + UNKNOWN
_21 = _ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE
*_20 = _21
_7 = this + UNKNOWN
_ZTVSt9basic_iosIcSt11char_traitsIcEE = NONLOCAL
derefaddrtmp(27) = &_ZTVSt9basic_iosIcSt11char_traitsIcEE
*this + 896 = derefaddrtmp(27)
_16 = this + UNKNOWN
callescape(30) = NONLOCAL
CALLUSED(31) = callescape(30)
callarg(33) = _16
callarg(33) = callarg(33) + UNKNOWN
callarg(33) = *callarg(33) + UNKNOWN
CALLUSED(31) = callarg(33)
*callarg(33) = callescape(30)
CALLCLOBBERED(32) = callarg(33)
callescape(30) = callarg(33)
ESCAPED = _16

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL _ZTVNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE _ZTVSt9basic_iosIcSt11char_traitsIcEE }
NONLOCAL = { ESCAPED NONLOCAL } same as _ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE
STOREDANYTHING = { }
INTEGER = { ANYTHING }
_ZTVNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE = { ESCAPED NONLOCAL }
_ZTVSt9basic_iosIcSt11char_traitsIcEE = { ESCAPED NONLOCAL }
this = { NONLOCAL }
derefaddrtmp(10) = { _ZTVNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE }
derefaddrtmp(11) = { _ZTVNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE } same as derefaddrtmp(10)
_4 = { NONLOCAL }
_ZNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEED1Ev = { }
callescape(14) = { ESCAPED NONLOCAL }
CALLUSED(15) = { ESCAPED NONLOCAL } same as callescape(14)
CALLCLOBBERED(16) = { ESCAPED NONLOCAL } same as callarg(17)
callarg(17) = { ESCAPED NONLOCAL }
_5 = { NONLOCAL }
_17 = { ESCAPED NONLOCAL } same as _ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE
_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE = { ESCAPED NONLOCAL }
_18 = { ESCAPED NONLOCAL }
_19 = { ESCAPED NONLOCAL } same as _18
_20 = { NONLOCAL }
_21 = { ESCAPED NONLOCAL } same as _ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE
_7 = { NONLOCAL }
derefaddrtmp(27) = { _ZTVSt9basic_iosIcSt11char_traitsIcEE }
_16 = { NONLOCAL }
_ZNSt8ios_baseD2Ev = { }
callescape(30) = { ESCAPED NONLOCAL }
CALLUSED(31) = { ESCAPED NONLOCAL } same as callescape(30)
CALLCLOBBERED(32) = { ESCAPED NONLOCAL } same as callarg(33)
callarg(33) = { ESCAPED NONLOCAL }


Alias information for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_ostringstream()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.43805 D.76881 } (nonlocal, escaped, interposable)

Flow-insensitive points-to information

_4, points-to non-local, points-to NULL, points-to vars: { }
_5, points-to non-local, points-to NULL, points-to vars: { }
_7, points-to non-local, points-to NULL, points-to vars: { }
this_9(D), points-to non-local, points-to vars: { }
_16, points-to non-local, points-to NULL, points-to vars: { }
_17, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_20, points-to non-local, points-to NULL, points-to vars: { }
_21, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

void std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_ostringstream (struct basic_ostringstream * const this)
{
  struct __stringbuf_type * _4;
  struct basic_ostream * _5;
  struct basic_ios * _7;
  struct ios_base * _16;
  const void * _17;
  long int _18;
  sizetype _19;
  struct basic_ostream * _20;
  const void * _21;

  <bb 2> :
  gimple_assign <addr_expr, this_9(D)->D.76876._vptr.basic_ostream, &MEM <int (*__vtbl_ptr_type) ()[10]> [(void *)&_ZTVNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE + 24B], NULL, NULL>
  gimple_assign <addr_expr, MEM[(struct basic_ios *)this_9(D) + 112B].D.43795._vptr.ios_base, &MEM <int (*__vtbl_ptr_type) ()[10]> [(void *)&_ZTVNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE + 64B], NULL, NULL>
  gimple_assign <addr_expr, _4, &this_9(D)->_M_stringbuf, NULL, NULL>
  gimple_call <__dt_comp , NULL, _4>
  gimple_assign <addr_expr, _5, &this_9(D)->D.76876, NULL, NULL>
  gimple_assign <mem_ref, _17, MEM[(const void * *)&_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE + 8B], NULL, NULL>
  gimple_assign <ssa_name, MEM[(struct basic_ostream *)this_9(D)]._vptr.basic_ostream, _17, NULL, NULL>
  gimple_assign <mem_ref, _18, MEM[(long int *)_17 + -24B], NULL, NULL>
  gimple_assign <nop_expr, _19, _18, NULL, NULL>
  gimple_assign <pointer_plus_expr, _20, _5, _19, NULL>
  gimple_assign <mem_ref, _21, MEM[(const void * *)&_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE + 16B], NULL, NULL>
  gimple_assign <ssa_name, MEM[(struct basic_ios *)_20].D.43795._vptr.ios_base, _21, NULL, NULL>
  gimple_assign <addr_expr, _7, &this_9(D)->D.76880, NULL, NULL>
  gimple_assign <addr_expr, MEM[(struct basic_ios *)this_9(D) + 112B].D.43795._vptr.ios_base, &MEM <int (*__vtbl_ptr_type) ()[4]> [(void *)&_ZTVSt9basic_iosIcSt11char_traitsIcEE + 16B], NULL, NULL>
  gimple_assign <addr_expr, _16, &MEM[(struct basic_ios *)this_9(D) + 112B].D.43795, NULL, NULL>
  gimple_call <__dt_base , NULL, _16>
  gimple_assign <constructor, MEM[(struct basic_ios *)this_9(D) + 112B], {CLOBBER}, NULL, NULL>
  gimple_assign <constructor, *this_9(D), {CLOBBER}, NULL, NULL>
  gimple_return <NULL>

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)::_Guard::~_Guard (_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tagEN6_GuardD2Ev, funcdef_no=4237, decl_uid=94934, cgraph_uid=1715, symbol_order=2297)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_1 = *this
_2 = *this
_8 = *_2
_9 = _2 + UNKNOWN
_10 = *_2 + 128
_11 = _10 + UNKNOWN
_11 = &NONLOCAL
callescape(16) = NONLOCAL
CALLUSED(17) = callescape(16)
callarg(19) = _8
callarg(19) = callarg(19) + UNKNOWN
callarg(19) = *callarg(19) + UNKNOWN
CALLUSED(17) = callarg(19)
*callarg(19) = callescape(16)
CALLCLOBBERED(18) = callarg(19)
callescape(16) = callarg(19)
ESCAPED = _8
callarg(20) = _11
callarg(20) = callarg(20) + UNKNOWN
callarg(20) = *callarg(20) + UNKNOWN
CALLUSED(17) = callarg(20)
*callarg(20) = callescape(16)
CALLCLOBBERED(18) = callarg(20)
callescape(16) = callarg(20)
ESCAPED = _11

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_1 = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL } same as _1
_8 = { ESCAPED NONLOCAL }
_9 = { ESCAPED NONLOCAL }
_10 = { ESCAPED NONLOCAL }
_11 = { ESCAPED NONLOCAL }
_ZdlPvm = { }
callescape(16) = { ESCAPED NONLOCAL }
CALLUSED(17) = { ESCAPED NONLOCAL } same as callescape(16)
CALLCLOBBERED(18) = { ESCAPED NONLOCAL }
callarg(19) = { ESCAPED NONLOCAL }
callarg(20) = { ESCAPED NONLOCAL }


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)::_Guard::~_Guard()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_2, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
this_5(D), points-to non-local, points-to vars: { }
_8, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_9, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)::_Guard::~_Guard (struct _Guard * const this)
{
  struct basic_string * _1;
  struct basic_string * _2;
  char * _8;
  const char[16] * _9;
  long unsigned int _10;
  long unsigned int _11;

  <bb 2> :
  gimple_assign <component_ref, _1, this_5(D)->_M_guarded, NULL, NULL>
  gimple_cond <ne_expr, _1, 0B, NULL, NULL>
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  gimple_assign <component_ref, _2, this_5(D)->_M_guarded, NULL, NULL>
  gimple_assign <component_ref, _8, MEM[(const struct basic_string *)_2]._M_dataplus._M_p, NULL, NULL>
  gimple_assign <addr_expr, _9, &MEM[(const struct basic_string *)_2].D.28191._M_local_buf, NULL, NULL>
  gimple_cond <ne_expr, _8, _9, NULL, NULL>
    goto <bb 4>; [53.47%]
  else
    goto <bb 5>; [46.53%]

  <bb 4> :
  gimple_assign <component_ref, _10, _2->D.28191._M_allocated_capacity, NULL, NULL>
  gimple_assign <plus_expr, _11, _10, 1, NULL>
  gimple_call <operator delete, NULL, _8, _11>

  <bb 5> :

  <bb 6> :
  gimple_assign <constructor, *this_5(D), {CLOBBER}, NULL, NULL>
  gimple_return <NULL>

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*> (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag, funcdef_no=4232, decl_uid=92556, cgraph_uid=1717, symbol_order=2299)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__beg = &NONLOCAL
__end = &NONLOCAL
D.94910 = &NONLOCAL
_2 = _12
__dnew = _2
__dnew.24_3 = __dnew
callescape(17) = NONLOCAL
CALLUSED(18) = callescape(17)
callarg(20) = this
callarg(20) = callarg(20) + UNKNOWN
callarg(20) = *callarg(20) + UNKNOWN
CALLUSED(18) = callarg(20)
*callarg(20) = callescape(17)
CALLCLOBBERED(19) = callarg(20)
callescape(17) = callarg(20)
ESCAPED = this
callarg(21) = &__dnew
callarg(21) = callarg(21) + UNKNOWN
callarg(21) = *callarg(21) + UNKNOWN
CALLUSED(18) = callarg(21)
*callarg(21) = callescape(17)
CALLCLOBBERED(19) = callarg(21)
callescape(17) = callarg(21)
ESCAPED = &__dnew
callarg(22) = &NULL
callarg(22) = callarg(22) + UNKNOWN
callarg(22) = *callarg(22) + UNKNOWN
CALLUSED(18) = callarg(22)
*callarg(22) = callescape(17)
CALLCLOBBERED(19) = callarg(22)
callescape(17) = callarg(22)
ESCAPED = &NULL
_18 = NONLOCAL
_18 = callarg(20)
_18 = callarg(21)
_18 = callarg(22)
*this = _18
__dnew.25_5 = __dnew
*this + 128 = __dnew.25_5
_31 = this + UNKNOWN
__guard = this
_37 = *this
_35 = _34
_36 = *__beg
*_37 = _36
callescape(32) = NONLOCAL
CALLUSED(33) = callescape(32)
callarg(35) = _37
callarg(35) = callarg(35) + UNKNOWN
callarg(35) = *callarg(35) + UNKNOWN
CALLUSED(33) = callarg(35)
*callarg(35) = callescape(32)
CALLCLOBBERED(34) = callarg(35)
callescape(32) = callarg(35)
ESCAPED = _37
callarg(36) = __beg
callarg(36) = callarg(36) + UNKNOWN
callarg(36) = *callarg(36) + UNKNOWN
CALLUSED(33) = callarg(36)
*callarg(36) = callescape(32)
CALLCLOBBERED(34) = callarg(36)
callescape(32) = callarg(36)
ESCAPED = __beg
callarg(37) = _35
callarg(37) = callarg(37) + UNKNOWN
callarg(37) = *callarg(37) + UNKNOWN
CALLUSED(33) = callarg(37)
*callarg(37) = callescape(32)
CALLCLOBBERED(34) = callarg(37)
callescape(32) = callarg(37)
ESCAPED = _35
__guard = &NULL
__dnew.26_7 = __dnew
*this + 64 = __dnew.26_7
_32 = *this
_33 = _32 + UNKNOWN
derefaddrtmp(41) = &NULL
*_33 = derefaddrtmp(41)
callescape(43) = NONLOCAL
CALLUSED(44) = callescape(43)
callarg(46) = &__guard
callarg(46) = callarg(46) + UNKNOWN
indircallarg(47) = *callarg(46) + UNKNOWN
indircallarg(47) = indircallarg(47) + UNKNOWN
indircallarg(47) = *indircallarg(47) + UNKNOWN
CALLUSED(44) = callarg(46)
CALLUSED(44) = indircallarg(47)
*callarg(46) = callescape(43)
CALLCLOBBERED(45) = callarg(46)
*indircallarg(47) = callescape(43)
CALLCLOBBERED(45) = indircallarg(47)
callescape(43) = indircallarg(47)
ESCAPED = *callarg(46) + UNKNOWN

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL __dnew }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__dnew = { NULL ESCAPED NONLOCAL __dnew } same as __dnew.24_3
__guard = { NULL ESCAPED NONLOCAL }
this = { NONLOCAL }
__beg = { NONLOCAL } same as this
__end = { NONLOCAL } same as this
D.94910 = { NONLOCAL } same as this
_12 = { }
_2 = { }
__dnew.24_3 = { NULL ESCAPED NONLOCAL __dnew }
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm = { }
callescape(17) = { NULL ESCAPED NONLOCAL __dnew }
CALLUSED(18) = { NULL ESCAPED NONLOCAL __dnew } same as callescape(17)
CALLCLOBBERED(19) = { NULL ESCAPED NONLOCAL __dnew }
callarg(20) = { ESCAPED NONLOCAL }
callarg(21) = { NULL ESCAPED NONLOCAL __dnew }
callarg(22) = { NULL }
_18 = { NULL ESCAPED NONLOCAL __dnew } same as callescape(17)
__dnew.25_5 = { NULL ESCAPED NONLOCAL __dnew } same as __dnew.24_3
_31 = { NONLOCAL }
_37 = { ESCAPED NONLOCAL }
_34 = { }
_35 = { }
_36 = { ESCAPED NONLOCAL }
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm.part.0 = { }
callescape(32) = { ESCAPED NONLOCAL }
CALLUSED(33) = { ESCAPED NONLOCAL } same as callescape(32)
CALLCLOBBERED(34) = { ESCAPED NONLOCAL } same as callescape(32)
callarg(35) = { ESCAPED NONLOCAL }
callarg(36) = { ESCAPED NONLOCAL }
callarg(37) = { }
__dnew.26_7 = { NULL ESCAPED NONLOCAL __dnew } same as __dnew.24_3
_32 = { ESCAPED NONLOCAL } same as _37
_33 = { ESCAPED NONLOCAL }
derefaddrtmp(41) = { NULL }
_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tagEN6_GuardD1Ev = { }
callescape(43) = { NULL ESCAPED NONLOCAL }
CALLUSED(44) = { NULL ESCAPED NONLOCAL __guard }
CALLCLOBBERED(45) = { NULL ESCAPED NONLOCAL __guard }
callarg(46) = { __guard }
indircallarg(47) = { NULL ESCAPED NONLOCAL }


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)void

Aliased symbols

__guard, UID D.94950, struct _Guard, is addressable
__dnew, UID D.94912, size_type, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.94912 } (escaped)

Flow-insensitive points-to information

__beg_10(D), points-to non-local, points-to NULL, points-to vars: { }
__end_11(D), points-to non-local, points-to NULL, points-to vars: { }
this_15(D), points-to non-local, points-to vars: { }
_18, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.94912 } (escaped)
_31, points-to non-local, points-to NULL, points-to vars: { }
_32, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_33, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_37, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*> (struct basic_string * const this, char * __beg, char * __end, struct forward_iterator_tag D.94910)
{
  char * D.98760;
  char * D.98753;
  difference_type D.98747;
  struct _Guard __guard;
  size_type __dnew;
  long unsigned int _2;
  long unsigned int __dnew.24_3;
  long unsigned int __dnew.25_5;
  long unsigned int __dnew.26_7;
  long int _12;
  char * _18;
  char[16] * _31;
  char * _32;
  char * _33;
  long int _34;
  long unsigned int _35;
  char _36;
  char * _37;

  <bb 2> :
  gimple_assign <pointer_diff_expr, _12, __end_11(D), __beg_10(D), NULL>
  gimple_assign <nop_expr, _2, _12, NULL, NULL>
  gimple_assign <ssa_name, __dnew, _2, NULL, NULL>
  gimple_assign <var_decl, __dnew.24_3, __dnew, NULL, NULL>
  gimple_cond <gt_expr, __dnew.24_3, 15, NULL, NULL>
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  gimple_call <_M_create, _18, this_15(D), &__dnew, 0>

  <bb 4> :
  gimple_assign <ssa_name, this_15(D)->_M_dataplus._M_p, _18, NULL, NULL>
  gimple_assign <var_decl, __dnew.25_5, __dnew, NULL, NULL>
  gimple_assign <ssa_name, this_15(D)->D.28191._M_allocated_capacity, __dnew.25_5, NULL, NULL>
  goto <bb 6>; [100.00%]

  <bb 5> :
  gimple_assign <addr_expr, _31, &this_15(D)->D.28191._M_local_buf, NULL, NULL>

  <bb 6> :
  gimple_assign <constructor, __guard, {CLOBBER}, NULL, NULL>
  gimple_assign <ssa_name, __guard._M_guarded, this_15(D), NULL, NULL>
  gimple_assign <component_ref, _37, MEM[(const struct basic_string *)this_15(D)]._M_dataplus._M_p, NULL, NULL>
  gimple_assign <pointer_diff_expr, _34, __end_11(D), __beg_10(D), NULL>
  gimple_assign <nop_expr, _35, _34, NULL, NULL>
  gimple_cond <eq_expr, _35, 1, NULL, NULL>
    goto <bb 7>; [34.00%]
  else
    goto <bb 8>; [66.00%]

  <bb 7> :
  gimple_assign <mem_ref, _36, MEM[(const char_type &)__beg_10(D)], NULL, NULL>
  gimple_assign <ssa_name, MEM[(char_type &)_37], _36, NULL, NULL>
  goto <bb 9>; [100.00%]

  <bb 8> :
  gimple_call <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm.part.0, NULL, _37, __beg_10(D), _35>

  <bb 9> :
  gimple_assign <integer_cst, __guard._M_guarded, 0B, NULL, NULL>
  gimple_assign <var_decl, __dnew.26_7, __dnew, NULL, NULL>
  gimple_assign <ssa_name, this_15(D)->_M_string_length, __dnew.26_7, NULL, NULL>
  gimple_assign <component_ref, _32, MEM[(const struct basic_string *)this_15(D)]._M_dataplus._M_p, NULL, NULL>
  gimple_assign <pointer_plus_expr, _33, _32, __dnew.26_7, NULL>
  gimple_assign <integer_cst, MEM[(char_type &)_33], 0, NULL, NULL>
  gimple_call <__dt_comp , NULL, &__guard>
  gimple_assign <constructor, __dnew, {CLOBBER(eol)}, NULL, NULL>
  gimple_assign <constructor, __guard, {CLOBBER(eol)}, NULL, NULL>
  gimple_return <NULL>

  <bb 10> :
gimple_label <<L3>>
  gimple_assign <constructor, __dnew, {CLOBBER(eol)}, NULL, NULL>
  gimple_assign <constructor, __guard, {CLOBBER(eol)}, NULL, NULL>
  gimple_resx <1>

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_, funcdef_no=4032, decl_uid=29242, cgraph_uid=1511, symbol_order=2081)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &PARM_NOALIAS.0+64
PARM_NOALIAS.0+64 = &NONLOCAL
PARM_NOALIAS.64+192 = &NONLOCAL
__str = &NONLOCAL
_1 = this + UNKNOWN
_24 = this + UNKNOWN
_14 = __str + UNKNOWN
*this = _24
_19 = *__str
_20 = *__str
_21 = *__str + 64
_7 = _20 + UNKNOWN
callescape(21) = NONLOCAL
CALLUSED(22) = callescape(21)
callarg(24) = this
callarg(24) = callarg(24) + UNKNOWN
callarg(24) = *callarg(24) + UNKNOWN
CALLUSED(22) = callarg(24)
*callarg(24) = callescape(21)
CALLCLOBBERED(23) = callarg(24)
callescape(21) = callarg(24)
ESCAPED = this
callarg(25) = _19
callarg(25) = callarg(25) + UNKNOWN
callarg(25) = *callarg(25) + UNKNOWN
CALLUSED(22) = callarg(25)
*callarg(25) = callescape(21)
CALLCLOBBERED(23) = callarg(25)
callescape(21) = callarg(25)
ESCAPED = _19
callarg(26) = _7
callarg(26) = callarg(26) + UNKNOWN
callarg(26) = *callarg(26) + UNKNOWN
CALLUSED(22) = callarg(26)
callarg(27) = D.97796
callarg(27) = callarg(27) + UNKNOWN
callarg(27) = *callarg(27) + UNKNOWN
CALLUSED(22) = callarg(27)
*callarg(27) = callescape(21)
CALLCLOBBERED(23) = callarg(27)
callescape(21) = callarg(27)
ESCAPED = D.97796

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+192 }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
PARM_NOALIAS.0+64 = { ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+192 }
PARM_NOALIAS.64+192 = { ESCAPED NONLOCAL }
this = { PARM_NOALIAS.0+64 }
__str = { NONLOCAL }
_1 = { PARM_NOALIAS.0+64 PARM_NOALIAS.64+192 }
_24 = { PARM_NOALIAS.0+64 PARM_NOALIAS.64+192 }
_14 = { NONLOCAL }
D.92567 = { }
_19 = { ESCAPED NONLOCAL }
_20 = { ESCAPED NONLOCAL } same as _19
_21 = { ESCAPED NONLOCAL }
_7 = { ESCAPED NONLOCAL }
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag = { }
callescape(21) = { ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+192 }
CALLUSED(22) = { ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+192 }
CALLCLOBBERED(23) = { ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+192 }
callarg(24) = { ESCAPED NONLOCAL PARM_NOALIAS.0+64 PARM_NOALIAS.64+192 }
callarg(25) = { ESCAPED NONLOCAL }
callarg(26) = { ESCAPED NONLOCAL }
callarg(27) = { }
D.97796 = { }


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.98781 } (nonlocal, escaped, restrict)

Flow-insensitive points-to information

_1, points-to NULL, points-to vars: { D.98781 } (nonlocal, escaped, restrict)
_7, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
this_10(D), points-to vars: { D.98781 } (nonlocal, escaped, restrict)
__str_13(D), points-to non-local, points-to vars: { }
_14, points-to non-local, points-to NULL, points-to vars: { }
_19, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_20, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_24, points-to NULL, points-to vars: { D.98781 } (nonlocal, escaped, restrict)

void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string (struct basic_string * const this, const struct basic_string & __str)
{
  struct allocator & retvalptr.170;
  char * D.98779;
  const struct allocator_type & D.98777;
  char * D.98769;
  char * D.98767;
  size_type D.98765;
  struct forward_iterator_tag D.97796;
  struct allocator D.92567;
  struct _Alloc_hider * _1;
  char * _7;
  const struct allocator_type & _14;
  char * _19;
  char * _20;
  long unsigned int _21;
  char[16] * _24;

  <bb 2> :
  gimple_assign <constructor, *this_10(D), {CLOBBER}, NULL, NULL>
  gimple_assign <addr_expr, _1, &this_10(D)->_M_dataplus, NULL, NULL>
  gimple_assign <addr_expr, _24, &this_10(D)->D.28191._M_local_buf, NULL, NULL>
  gimple_assign <addr_expr, _14, &__str_13(D)->_M_dataplus, NULL, NULL>
  gimple_assign <constructor, MEM[(struct _Alloc_hider *)this_10(D)], {CLOBBER}, NULL, NULL>
  gimple_assign <ssa_name, MEM[(struct _Alloc_hider *)this_10(D)]._M_p, _24, NULL, NULL>
  gimple_assign <constructor, D.92567, {CLOBBER(eol)}, NULL, NULL>
  gimple_assign <component_ref, _19, *__str_13(D)._M_dataplus._M_p, NULL, NULL>
  gimple_assign <component_ref, _20, *__str_13(D)._M_dataplus._M_p, NULL, NULL>
  gimple_assign <component_ref, _21, *__str_13(D)._M_string_length, NULL, NULL>
  gimple_assign <pointer_plus_expr, _7, _20, _21, NULL>
  gimple_call <_M_construct, NULL, this_10(D), _19, _7, D.97796>

  <bb 3> :
  gimple_return <NULL>

  <bb 4> :
gimple_label <<L1>>
  gimple_assign <constructor, MEM[(struct _Alloc_hider *)this_10(D)], {CLOBBER}, NULL, NULL>
  gimple_resx <4>

}



;; Function get_log_path (_ZL12get_log_pathv, funcdef_no=3692, decl_uid=89053, cgraph_uid=1171, symbol_order=1734)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
D.89054 = &NONLOCAL
_4 = D.89054 + UNKNOWN
*D.89054 = _4
_ZL8log_path.0+64 = NONLOCAL
_ZL8log_path.64+192 = NONLOCAL
_5 = _ZL8log_path.0+64
_6 = _ZL8log_path.64+192
_7 = _5 + UNKNOWN
callescape(16) = NONLOCAL
CALLUSED(17) = callescape(16)
callarg(19) = D.89054
callarg(19) = callarg(19) + UNKNOWN
callarg(19) = *callarg(19) + UNKNOWN
CALLUSED(17) = callarg(19)
*callarg(19) = callescape(16)
CALLCLOBBERED(18) = callarg(19)
callescape(16) = callarg(19)
ESCAPED = D.89054
callarg(20) = _5
callarg(20) = callarg(20) + UNKNOWN
callarg(20) = *callarg(20) + UNKNOWN
CALLUSED(17) = callarg(20)
*callarg(20) = callescape(16)
CALLCLOBBERED(18) = callarg(20)
callescape(16) = callarg(20)
ESCAPED = _5
callarg(21) = _7
callarg(21) = callarg(21) + UNKNOWN
callarg(21) = *callarg(21) + UNKNOWN
CALLUSED(17) = callarg(21)
callarg(22) = D.98785
callarg(22) = callarg(22) + UNKNOWN
callarg(22) = *callarg(22) + UNKNOWN
CALLUSED(17) = callarg(22)
*callarg(22) = callescape(16)
CALLCLOBBERED(18) = callarg(22)
callescape(16) = callarg(22)
ESCAPED = D.98785

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _ZL8log_path.0+64
STOREDANYTHING = { }
INTEGER = { ANYTHING }
D.89054 = { NONLOCAL }
_4 = { NONLOCAL }
_5 = { ESCAPED NONLOCAL } same as _ZL8log_path.0+64
_ZL8log_path.0+64 = { ESCAPED NONLOCAL }
_ZL8log_path.64+192 = { ESCAPED NONLOCAL } same as _ZL8log_path.0+64
_6 = { ESCAPED NONLOCAL } same as _ZL8log_path.0+64
_7 = { ESCAPED NONLOCAL }
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag = { }
callescape(16) = { ESCAPED NONLOCAL }
CALLUSED(17) = { ESCAPED NONLOCAL }
CALLCLOBBERED(18) = { ESCAPED NONLOCAL } same as callescape(16)
callarg(19) = { ESCAPED NONLOCAL }
callarg(20) = { ESCAPED NONLOCAL }
callarg(21) = { ESCAPED NONLOCAL }
callarg(22) = { }
D.98785 = { }
_ZL12get_log_pathv = { }


Alias information for get_log_path()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_2(D), points-to non-local, points-to NULL, points-to vars: { }
_4, points-to non-local, points-to NULL, points-to vars: { }
_5, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_7, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

struct string get_log_path ()
{
  struct forward_iterator_tag D.98785;
  struct string & _2(D);
  char[16] * _4;
  char * _5;
  long unsigned int _6;
  char * _7;

  <bb 2> :
  gimple_assign <addr_expr, _4, &MEM[(struct basic_string *)_2(D)].D.28191._M_local_buf, NULL, NULL>
  gimple_assign <ssa_name, MEM[(struct _Alloc_hider *)_2(D)]._M_p, _4, NULL, NULL>
  gimple_assign <component_ref, _5, MEM[(const struct basic_string *)&log_path]._M_dataplus._M_p, NULL, NULL>
  gimple_assign <component_ref, _6, MEM[(const struct basic_string *)&log_path]._M_string_length, NULL, NULL>
  gimple_assign <pointer_plus_expr, _7, _5, _6, NULL>
  gimple_call <_M_construct, NULL, _2(D), _5, _7, D.98785>
  gimple_return <_2(D)>

}



;; Function write_log (_ZL9write_logPKc, funcdef_no=3693, decl_uid=89057, cgraph_uid=1172, symbol_order=1735)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
msg = &NONLOCAL
D.89060.0+64 = &D.89060.64+192
_ZL8log_path.0+64 = NONLOCAL
_ZL8log_path.64+192 = NONLOCAL
_46 = _ZL8log_path.0+64
_47 = _ZL8log_path.64+192
_48 = _46 + UNKNOWN
callescape(17) = NONLOCAL
CALLUSED(18) = callescape(17)
callarg(20) = &D.89060.0+64
callarg(20) = callarg(20) + UNKNOWN
callarg(20) = *callarg(20) + UNKNOWN
CALLUSED(18) = callarg(20)
*callarg(20) = callescape(17)
CALLCLOBBERED(19) = callarg(20)
callescape(17) = callarg(20)
ESCAPED = &D.89060.0+64
callarg(21) = _46
callarg(21) = callarg(21) + UNKNOWN
callarg(21) = *callarg(21) + UNKNOWN
CALLUSED(18) = callarg(21)
*callarg(21) = callescape(17)
CALLCLOBBERED(19) = callarg(21)
callescape(17) = callarg(21)
ESCAPED = _46
callarg(22) = _48
callarg(22) = callarg(22) + UNKNOWN
callarg(22) = *callarg(22) + UNKNOWN
CALLUSED(18) = callarg(22)
callarg(23) = D.98788
callarg(23) = callarg(23) + UNKNOWN
callarg(23) = *callarg(23) + UNKNOWN
CALLUSED(18) = callarg(23)
*callarg(23) = callescape(17)
CALLCLOBBERED(19) = callarg(23)
callescape(17) = callarg(23)
ESCAPED = D.98788
callescape(26) = NONLOCAL
CALLUSED(27) = callescape(26)
callarg(29) = &logfile
callarg(29) = callarg(29) + UNKNOWN
callarg(29) = *callarg(29) + UNKNOWN
CALLUSED(27) = callarg(29)
*callarg(29) = callescape(26)
CALLCLOBBERED(28) = callarg(29)
callescape(26) = callarg(29)
ESCAPED = &logfile
callarg(31) = &D.89060.0+64
callarg(31) = callarg(31) + UNKNOWN
indircallarg(32) = *callarg(31) + UNKNOWN
indircallarg(32) = indircallarg(32) + UNKNOWN
indircallarg(32) = *indircallarg(32) + UNKNOWN
CALLUSED(27) = callarg(31)
CALLUSED(27) = indircallarg(32)
*indircallarg(32) = callescape(26)
CALLCLOBBERED(28) = indircallarg(32)
callescape(26) = indircallarg(32)
ESCAPED = *callarg(31) + UNKNOWN
callarg(33) = &NONLOCAL
callarg(33) = callarg(33) + UNKNOWN
callarg(33) = *callarg(33) + UNKNOWN
CALLUSED(27) = callarg(33)
*callarg(33) = callescape(26)
CALLCLOBBERED(28) = callarg(33)
callescape(26) = callarg(33)
ESCAPED = &NONLOCAL
_51 = D.89060.0+64
_53 = D.89060.64+192
_54 = _53 + UNKNOWN
_54 = &NONLOCAL
callescape(38) = NONLOCAL
CALLUSED(39) = callescape(38)
callarg(41) = _51
callarg(41) = callarg(41) + UNKNOWN
callarg(41) = *callarg(41) + UNKNOWN
CALLUSED(39) = callarg(41)
*callarg(41) = callescape(38)
CALLCLOBBERED(40) = callarg(41)
callescape(38) = callarg(41)
ESCAPED = _51
callarg(42) = _54
callarg(42) = callarg(42) + UNKNOWN
callarg(42) = *callarg(42) + UNKNOWN
CALLUSED(39) = callarg(42)
*callarg(42) = callescape(38)
CALLCLOBBERED(40) = callarg(42)
callescape(38) = callarg(42)
ESCAPED = _54
callescape(44) = NONLOCAL
CALLUSED(45) = callescape(44)
callarg(47) = &logfile
callarg(47) = callarg(47) + UNKNOWN
callarg(47) = *callarg(47) + UNKNOWN
CALLUSED(45) = callarg(47)
_50 = NONLOCAL
_50 = callarg(47)
callescape(50) = NONLOCAL
CALLUSED(51) = callescape(50)
callarg(53) = &NULL
callarg(53) = callarg(53) + UNKNOWN
callarg(53) = *callarg(53) + UNKNOWN
CALLUSED(51) = callarg(53)
*callarg(53) = callescape(50)
CALLCLOBBERED(52) = callarg(53)
callescape(50) = callarg(53)
ESCAPED = &NULL
_1 = NONLOCAL
_1 = callarg(53)
t = _1
callescape(57) = NONLOCAL
CALLUSED(58) = callescape(57)
callarg(60) = &t
callarg(60) = callarg(60) + UNKNOWN
callarg(60) = *callarg(60) + UNKNOWN
CALLUSED(58) = callarg(60)
*callarg(60) = callescape(57)
CALLCLOBBERED(59) = callarg(60)
callescape(57) = callarg(60)
ESCAPED = &t
_2 = NONLOCAL
_2 = callarg(60)
callescape(63) = NONLOCAL
CALLUSED(64) = callescape(63)
callarg(66) = &timestamp
callarg(66) = callarg(66) + UNKNOWN
callarg(66) = *callarg(66) + UNKNOWN
CALLUSED(64) = callarg(66)
*callarg(66) = callescape(63)
CALLCLOBBERED(65) = callarg(66)
callescape(63) = callarg(66)
ESCAPED = &timestamp
callarg(68) = &NONLOCAL
callarg(68) = callarg(68) + UNKNOWN
callarg(68) = *callarg(68) + UNKNOWN
CALLUSED(64) = callarg(68)
*callarg(68) = callescape(63)
CALLCLOBBERED(65) = callarg(68)
callescape(63) = callarg(68)
ESCAPED = &NONLOCAL
callarg(69) = &STRING
callarg(69) = callarg(69) + UNKNOWN
callarg(69) = *callarg(69) + UNKNOWN
CALLUSED(64) = callarg(69)
*callarg(69) = callescape(63)
CALLCLOBBERED(65) = callarg(69)
callescape(63) = callarg(69)
ESCAPED = &STRING
callarg(70) = _2
callarg(70) = callarg(70) + UNKNOWN
callarg(70) = *callarg(70) + UNKNOWN
CALLUSED(64) = callarg(70)
*callarg(70) = callescape(63)
CALLCLOBBERED(65) = callarg(70)
callescape(63) = callarg(70)
ESCAPED = _2
callescape(72) = NONLOCAL
CALLUSED(73) = callescape(72)
callarg(75) = &logfile
callarg(75) = callarg(75) + UNKNOWN
callarg(75) = *callarg(75) + UNKNOWN
CALLUSED(73) = callarg(75)
*callarg(75) = callescape(72)
CALLCLOBBERED(74) = callarg(75)
callescape(72) = callarg(75)
ESCAPED = &logfile
callarg(76) = &STRING
callarg(76) = callarg(76) + UNKNOWN
callarg(76) = *callarg(76) + UNKNOWN
CALLUSED(73) = callarg(76)
*callarg(76) = callescape(72)
CALLCLOBBERED(74) = callarg(76)
callescape(72) = callarg(76)
ESCAPED = &STRING
callarg(77) = &NONLOCAL
callarg(77) = callarg(77) + UNKNOWN
callarg(77) = *callarg(77) + UNKNOWN
CALLUSED(73) = callarg(77)
*callarg(77) = callescape(72)
CALLCLOBBERED(74) = callarg(77)
callescape(72) = callarg(77)
ESCAPED = &NONLOCAL
CALLUSED(78) = CALLUSED(78) + UNKNOWN
CALLUSED(78) = &timestamp
_58 = _57
callescape(82) = NONLOCAL
CALLUSED(83) = callescape(82)
callarg(85) = &logfile
callarg(85) = callarg(85) + UNKNOWN
callarg(85) = *callarg(85) + UNKNOWN
CALLUSED(83) = callarg(85)
*callarg(85) = callescape(82)
CALLCLOBBERED(84) = callarg(85)
callescape(82) = callarg(85)
ESCAPED = &logfile
callarg(86) = &timestamp
callarg(86) = callarg(86) + UNKNOWN
callarg(86) = *callarg(86) + UNKNOWN
CALLUSED(83) = callarg(86)
*callarg(86) = callescape(82)
CALLCLOBBERED(84) = callarg(86)
callescape(82) = callarg(86)
ESCAPED = &timestamp
callarg(87) = _58
callarg(87) = callarg(87) + UNKNOWN
callarg(87) = *callarg(87) + UNKNOWN
CALLUSED(83) = callarg(87)
*callarg(87) = callescape(82)
CALLCLOBBERED(84) = callarg(87)
callescape(82) = callarg(87)
ESCAPED = _58
callescape(88) = NONLOCAL
CALLUSED(89) = callescape(88)
callarg(91) = &logfile
callarg(91) = callarg(91) + UNKNOWN
callarg(91) = *callarg(91) + UNKNOWN
CALLUSED(89) = callarg(91)
*callarg(91) = callescape(88)
CALLCLOBBERED(90) = callarg(91)
callescape(88) = callarg(91)
ESCAPED = &logfile
callarg(92) = &STRING
callarg(92) = callarg(92) + UNKNOWN
callarg(92) = *callarg(92) + UNKNOWN
CALLUSED(89) = callarg(92)
*callarg(92) = callescape(88)
CALLCLOBBERED(90) = callarg(92)
callescape(88) = callarg(92)
ESCAPED = &STRING
callarg(93) = &NONLOCAL
callarg(93) = callarg(93) + UNKNOWN
callarg(93) = *callarg(93) + UNKNOWN
CALLUSED(89) = callarg(93)
*callarg(93) = callescape(88)
CALLCLOBBERED(90) = callarg(93)
callescape(88) = callarg(93)
ESCAPED = &NONLOCAL
callescape(95) = NONLOCAL
CALLUSED(96) = callescape(95)
callarg(98) = &logfile
callarg(98) = callarg(98) + UNKNOWN
callarg(98) = *callarg(98) + UNKNOWN
CALLUSED(96) = callarg(98)
*callarg(98) = callescape(95)
CALLCLOBBERED(97) = callarg(98)
callescape(95) = callarg(98)
ESCAPED = &logfile
callarg(99) = msg
callarg(99) = callarg(99) + UNKNOWN
callarg(99) = *callarg(99) + UNKNOWN
CALLUSED(96) = callarg(99)
*callarg(99) = callescape(95)
CALLCLOBBERED(97) = callarg(99)
callescape(95) = callarg(99)
ESCAPED = msg
_32 = NONLOCAL
_32 = callarg(98)
_32 = callarg(99)
callescape(102) = NONLOCAL
CALLUSED(103) = callescape(102)
callarg(105) = _32
callarg(105) = callarg(105) + UNKNOWN
callarg(105) = *callarg(105) + UNKNOWN
CALLUSED(103) = callarg(105)
*callarg(105) = callescape(102)
CALLCLOBBERED(104) = callarg(105)
callescape(102) = callarg(105)
ESCAPED = _32
_61 = NONLOCAL
_61 = callarg(105)
callescape(108) = NONLOCAL
CALLUSED(109) = callescape(108)
callarg(111) = &logfile
callarg(111) = callarg(111) + UNKNOWN
callarg(111) = *callarg(111) + UNKNOWN
CALLUSED(109) = callarg(111)
*callarg(111) = callescape(108)
CALLCLOBBERED(110) = callarg(111)
callescape(108) = callarg(111)
ESCAPED = &logfile
callescape(113) = NONLOCAL
CALLUSED(114) = callescape(113)
callarg(116) = &logfile
callarg(116) = callarg(116) + UNKNOWN
callarg(116) = *callarg(116) + UNKNOWN
CALLUSED(114) = callarg(116)
*callarg(116) = callescape(113)
CALLCLOBBERED(115) = callarg(116)
callescape(113) = callarg(116)
ESCAPED = &logfile
callescape(117) = NONLOCAL
CALLUSED(118) = callescape(117)
_ZSt4cerr.0+64 = NONLOCAL
_ZSt4cerr.64+64 = NONLOCAL
_ZSt4cerr.128+224 = NONLOCAL
_ZSt4cerr.384+64 = NONLOCAL
_ZSt4cerr.448+64 = NONLOCAL
_ZSt4cerr.512+1120 = NONLOCAL
_ZSt4cerr.1664+64 = NONLOCAL
_ZSt4cerr.1728+64 = NONLOCAL
_ZSt4cerr.1792+64 = NONLOCAL
_ZSt4cerr.1856+16 = NONLOCAL
_ZSt4cerr.1920+64 = NONLOCAL
_ZSt4cerr.1984+64 = NONLOCAL
_ZSt4cerr.2048+64 = NONLOCAL
_ZSt4cerr.2112+64 = NONLOCAL
callarg(120) = &_ZSt4cerr.0+64
callarg(120) = callarg(120) + UNKNOWN
callarg(120) = *callarg(120) + UNKNOWN
CALLUSED(118) = callarg(120)
*callarg(120) = callescape(117)
CALLCLOBBERED(119) = callarg(120)
callescape(117) = callarg(120)
ESCAPED = &_ZSt4cerr.0+64
callarg(135) = &STRING
callarg(135) = callarg(135) + UNKNOWN
callarg(135) = *callarg(135) + UNKNOWN
CALLUSED(118) = callarg(135)
*callarg(135) = callescape(117)
CALLCLOBBERED(119) = callarg(135)
callescape(117) = callarg(135)
ESCAPED = &STRING
callescape(137) = NONLOCAL
CALLUSED(138) = callescape(137)
callarg(140) = &NONLOCAL
callarg(140) = callarg(140) + UNKNOWN
callarg(140) = *callarg(140) + UNKNOWN
CALLUSED(138) = callarg(140)
*callarg(140) = callescape(137)
CALLCLOBBERED(139) = callarg(140)
callescape(137) = callarg(140)
ESCAPED = &NONLOCAL
_62 = D.89060.0+64
_64 = D.89060.64+192
_65 = _64 + UNKNOWN
_65 = &NONLOCAL
callescape(144) = NONLOCAL
CALLUSED(145) = callescape(144)
callarg(147) = _62
callarg(147) = callarg(147) + UNKNOWN
callarg(147) = *callarg(147) + UNKNOWN
CALLUSED(145) = callarg(147)
*callarg(147) = callescape(144)
CALLCLOBBERED(146) = callarg(147)
callescape(144) = callarg(147)
ESCAPED = _62
callarg(148) = _65
callarg(148) = callarg(148) + UNKNOWN
callarg(148) = *callarg(148) + UNKNOWN
CALLUSED(145) = callarg(148)
*callarg(148) = callescape(144)
CALLCLOBBERED(146) = callarg(148)
callescape(144) = callarg(148)
ESCAPED = _65
callescape(149) = NONLOCAL
CALLUSED(150) = callescape(149)
callarg(152) = &logfile
callarg(152) = callarg(152) + UNKNOWN
callarg(152) = *callarg(152) + UNKNOWN
CALLUSED(150) = callarg(152)
*callarg(152) = callescape(149)
CALLCLOBBERED(151) = callarg(152)
callescape(149) = callarg(152)
ESCAPED = &logfile

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL STRING ESCAPED NONLOCAL D.89060.0+64 D.89060.64+192 logfile t timestamp _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 }
NONLOCAL = { ESCAPED NONLOCAL } same as _ZL8log_path.0+64
STOREDANYTHING = { }
INTEGER = { ANYTHING }
D.89060.0+64 = { ESCAPED NONLOCAL D.89060.0+64 D.89060.64+192 } same as _51
D.89060.64+192 = { ESCAPED NONLOCAL D.89060.0+64 D.89060.64+192 } same as _53
logfile = { ESCAPED NONLOCAL logfile timestamp }
t = { NULL ESCAPED NONLOCAL t }
timestamp = { ESCAPED NONLOCAL logfile timestamp }
_ZSt4cerr.0+64 = { ESCAPED NONLOCAL }
_ZSt4cerr.64+64 = { ESCAPED NONLOCAL }
_ZSt4cerr.128+224 = { ESCAPED NONLOCAL }
_ZSt4cerr.384+64 = { ESCAPED NONLOCAL }
_ZSt4cerr.448+64 = { ESCAPED NONLOCAL }
_ZSt4cerr.512+1120 = { ESCAPED NONLOCAL }
_ZSt4cerr.1664+64 = { ESCAPED NONLOCAL }
_ZSt4cerr.1728+64 = { ESCAPED NONLOCAL }
_ZSt4cerr.1792+64 = { ESCAPED NONLOCAL }
_ZSt4cerr.1856+16 = { ESCAPED NONLOCAL }
_ZSt4cerr.1920+64 = { ESCAPED NONLOCAL }
_ZSt4cerr.1984+64 = { ESCAPED NONLOCAL }
_ZSt4cerr.2048+64 = { ESCAPED NONLOCAL }
_ZSt4cerr.2112+64 = { ESCAPED NONLOCAL }
msg = { NONLOCAL }
_46 = { ESCAPED NONLOCAL } same as _ZL8log_path.0+64
_ZL8log_path.0+64 = { ESCAPED NONLOCAL }
_ZL8log_path.64+192 = { ESCAPED NONLOCAL } same as _ZL8log_path.0+64
_47 = { ESCAPED NONLOCAL } same as _ZL8log_path.0+64
_48 = { ESCAPED NONLOCAL }
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag = { }
callescape(17) = { ESCAPED NONLOCAL D.89060.0+64 D.89060.64+192 }
CALLUSED(18) = { ESCAPED NONLOCAL D.89060.0+64 D.89060.64+192 }
CALLCLOBBERED(19) = { ESCAPED NONLOCAL D.89060.0+64 D.89060.64+192 } same as callescape(17)
callarg(20) = { ESCAPED NONLOCAL D.89060.0+64 D.89060.64+192 }
callarg(21) = { ESCAPED NONLOCAL }
callarg(22) = { ESCAPED NONLOCAL }
callarg(23) = { }
D.98788 = { }
_ZNSt14basic_ofstreamIcSt11char_traitsIcEEC1ERKNSt7__cxx1112basic_stringIcS1_SaIcEEESt13_Ios_Openmode = { }
callescape(26) = { ESCAPED NONLOCAL D.89060.0+64 D.89060.64+192 logfile timestamp }
CALLUSED(27) = { ESCAPED NONLOCAL D.89060.0+64 D.89060.64+192 logfile timestamp }
CALLCLOBBERED(28) = { ESCAPED NONLOCAL D.89060.0+64 D.89060.64+192 logfile timestamp }
callarg(29) = { ESCAPED NONLOCAL logfile timestamp }
callarg(31) = { D.89060.0+64 D.89060.64+192 }
indircallarg(32) = { ESCAPED NONLOCAL D.89060.0+64 D.89060.64+192 }
callarg(33) = { ESCAPED NONLOCAL }
_51 = { ESCAPED NONLOCAL D.89060.0+64 D.89060.64+192 }
_53 = { ESCAPED NONLOCAL D.89060.0+64 D.89060.64+192 }
_54 = { ESCAPED NONLOCAL D.89060.0+64 D.89060.64+192 }
_ZdlPvm = { }
callescape(38) = { ESCAPED NONLOCAL D.89060.0+64 D.89060.64+192 }
CALLUSED(39) = { ESCAPED NONLOCAL D.89060.0+64 D.89060.64+192 } same as callescape(38)
CALLCLOBBERED(40) = { ESCAPED NONLOCAL D.89060.0+64 D.89060.64+192 }
callarg(41) = { ESCAPED NONLOCAL D.89060.0+64 D.89060.64+192 }
callarg(42) = { ESCAPED NONLOCAL D.89060.0+64 D.89060.64+192 }
_ZNKSt12__basic_fileIcE7is_openEv = { }
callescape(44) = { ESCAPED NONLOCAL } same as _ZL8log_path.0+64
CALLUSED(45) = { ESCAPED NONLOCAL logfile timestamp }
CALLCLOBBERED(46) = { }
callarg(47) = { ESCAPED NONLOCAL logfile timestamp }
_50 = { ESCAPED NONLOCAL logfile timestamp } same as CALLUSED(45)
time = { }
callescape(50) = { NULL ESCAPED NONLOCAL }
CALLUSED(51) = { NULL ESCAPED NONLOCAL } same as callescape(50)
CALLCLOBBERED(52) = { NULL } same as callarg(53)
callarg(53) = { NULL }
_1 = { NULL ESCAPED NONLOCAL } same as callescape(50)
localtime = { }
callescape(57) = { NULL ESCAPED NONLOCAL t }
CALLUSED(58) = { NULL ESCAPED NONLOCAL t } same as callescape(57)
CALLCLOBBERED(59) = { NULL ESCAPED NONLOCAL t } same as callarg(60)
callarg(60) = { NULL ESCAPED NONLOCAL t }
_2 = { NULL ESCAPED NONLOCAL t } same as callescape(57)
strftime = { }
callescape(63) = { NULL STRING ESCAPED NONLOCAL logfile t timestamp }
CALLUSED(64) = { NULL STRING ESCAPED NONLOCAL logfile t timestamp } same as callescape(63)
CALLCLOBBERED(65) = { NULL STRING ESCAPED NONLOCAL logfile t timestamp } same as callescape(63)
callarg(66) = { ESCAPED NONLOCAL logfile timestamp }
callarg(68) = { ESCAPED NONLOCAL }
callarg(69) = { STRING }
callarg(70) = { NULL ESCAPED NONLOCAL t }
_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l = { }
callescape(72) = { STRING ESCAPED NONLOCAL logfile timestamp }
CALLUSED(73) = { STRING ESCAPED NONLOCAL logfile timestamp } same as callescape(72)
CALLCLOBBERED(74) = { STRING ESCAPED NONLOCAL logfile timestamp }
callarg(75) = { ESCAPED NONLOCAL logfile timestamp }
callarg(76) = { STRING }
callarg(77) = { ESCAPED NONLOCAL }
CALLUSED(78) = { timestamp }
CALLCLOBBERED(79) = { }
_58 = { }
_57 = { }
callescape(82) = { ESCAPED NONLOCAL logfile timestamp }
CALLUSED(83) = { ESCAPED NONLOCAL logfile timestamp } same as callescape(82)
CALLCLOBBERED(84) = { ESCAPED NONLOCAL logfile timestamp }
callarg(85) = { ESCAPED NONLOCAL logfile timestamp }
callarg(86) = { ESCAPED NONLOCAL logfile timestamp }
callarg(87) = { }
callescape(88) = { STRING ESCAPED NONLOCAL logfile timestamp }
CALLUSED(89) = { STRING ESCAPED NONLOCAL logfile timestamp } same as callescape(88)
CALLCLOBBERED(90) = { STRING ESCAPED NONLOCAL logfile timestamp }
callarg(91) = { ESCAPED NONLOCAL logfile timestamp }
callarg(92) = { STRING }
callarg(93) = { ESCAPED NONLOCAL }
_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc = { }
callescape(95) = { ESCAPED NONLOCAL logfile timestamp }
CALLUSED(96) = { ESCAPED NONLOCAL logfile timestamp } same as callescape(95)
CALLCLOBBERED(97) = { ESCAPED NONLOCAL logfile timestamp }
callarg(98) = { ESCAPED NONLOCAL logfile timestamp }
callarg(99) = { ESCAPED NONLOCAL }
_32 = { ESCAPED NONLOCAL logfile timestamp } same as callescape(95)
_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_ = { }
callescape(102) = { ESCAPED NONLOCAL logfile timestamp }
CALLUSED(103) = { ESCAPED NONLOCAL logfile timestamp } same as callescape(102)
CALLCLOBBERED(104) = { ESCAPED NONLOCAL logfile timestamp } same as callescape(102)
callarg(105) = { ESCAPED NONLOCAL logfile timestamp } same as callescape(102)
_61 = { ESCAPED NONLOCAL logfile timestamp } same as callescape(102)
_ZNSt14basic_ofstreamIcSt11char_traitsIcEE5closeEv = { }
callescape(108) = { ESCAPED NONLOCAL logfile timestamp }
CALLUSED(109) = { ESCAPED NONLOCAL logfile timestamp } same as callescape(108)
CALLCLOBBERED(110) = { ESCAPED NONLOCAL logfile timestamp } same as callarg(111)
callarg(111) = { ESCAPED NONLOCAL logfile timestamp }
_ZNSt14basic_ofstreamIcSt11char_traitsIcEED1Ev = { }
callescape(113) = { ESCAPED NONLOCAL logfile timestamp }
CALLUSED(114) = { ESCAPED NONLOCAL logfile timestamp } same as callescape(113)
CALLCLOBBERED(115) = { ESCAPED NONLOCAL logfile timestamp } same as callarg(116)
callarg(116) = { ESCAPED NONLOCAL logfile timestamp }
callescape(117) = { STRING ESCAPED NONLOCAL _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 }
CALLUSED(118) = { STRING ESCAPED NONLOCAL _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 } same as callescape(117)
CALLCLOBBERED(119) = { STRING ESCAPED NONLOCAL _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 }
callarg(120) = { ESCAPED NONLOCAL _ZSt4cerr.0+64 _ZSt4cerr.64+64 _ZSt4cerr.128+224 _ZSt4cerr.384+64 _ZSt4cerr.448+64 _ZSt4cerr.512+1120 _ZSt4cerr.1664+64 _ZSt4cerr.1728+64 _ZSt4cerr.1792+64 _ZSt4cerr.1856+16 _ZSt4cerr.1920+64 _ZSt4cerr.1984+64 _ZSt4cerr.2048+64 _ZSt4cerr.2112+64 }
callarg(135) = { STRING }
exit = { }
callescape(137) = { ESCAPED NONLOCAL }
CALLUSED(138) = { ESCAPED NONLOCAL } same as callescape(137)
CALLCLOBBERED(139) = { ESCAPED NONLOCAL } same as callarg(140)
callarg(140) = { ESCAPED NONLOCAL }
_62 = { ESCAPED NONLOCAL D.89060.0+64 D.89060.64+192 } same as _51
_64 = { ESCAPED NONLOCAL D.89060.0+64 D.89060.64+192 } same as _53
_65 = { ESCAPED NONLOCAL D.89060.0+64 D.89060.64+192 }
callescape(144) = { ESCAPED NONLOCAL D.89060.0+64 D.89060.64+192 }
CALLUSED(145) = { ESCAPED NONLOCAL D.89060.0+64 D.89060.64+192 } same as callescape(144)
CALLCLOBBERED(146) = { ESCAPED NONLOCAL D.89060.0+64 D.89060.64+192 }
callarg(147) = { ESCAPED NONLOCAL D.89060.0+64 D.89060.64+192 }
callarg(148) = { ESCAPED NONLOCAL D.89060.0+64 D.89060.64+192 }
callescape(149) = { ESCAPED NONLOCAL logfile timestamp }
CALLUSED(150) = { ESCAPED NONLOCAL logfile timestamp } same as callescape(149)
CALLCLOBBERED(151) = { ESCAPED NONLOCAL logfile timestamp } same as callarg(152)
callarg(152) = { ESCAPED NONLOCAL logfile timestamp }


Alias information for write_log(char const*)

Aliased symbols

timestamp, UID D.89067, char[100], is addressable
t, UID D.89066, time_t, is addressable
logfile, UID D.89059, struct ofstream, is addressable
D.89060, UID D.89060, struct string, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.47221 D.89059 D.89060 D.89066 D.89067 } (nonlocal, escaped, interposable)

Flow-insensitive points-to information

_2, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.89066 } (escaped)
msg_30(D), points-to non-local, points-to NULL, points-to vars: { }
_32, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.89059 D.89067 } (escaped)
_46, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_48, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_51, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.89060 } (escaped)
_61, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.89059 D.89067 } (escaped)
_62, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.89060 } (escaped)

void write_log (const char * msg)
{
  struct string & retvalptr.173;
  struct basic_ostream & D.98800;
  struct basic_ostream & D.98797;
  struct basic_ostream & D.98794;
  bool D.98790;
  struct forward_iterator_tag D.98788;
  char timestamp[100];
  time_t t;
  struct ofstream logfile;
  struct string D.89060;
  long int _1;
  struct tm * _2;
  struct basic_ostream & _32;
  char * _46;
  long unsigned int _47;
  char * _48;
  bool _50;
  char * _51;
  long unsigned int _53;
  long unsigned int _54;
  long unsigned int _57;
  long int _58;
  struct __ostream_type & _61;
  char * _62;
  long unsigned int _64;
  long unsigned int _65;

  <bb 2> :
  gimple_assign <addr_expr, MEM[(struct _Alloc_hider *)&D.89060]._M_p, &MEM <char[16]> [(void *)&D.89060 + 16B], NULL, NULL>
  gimple_assign <component_ref, _46, MEM[(const struct basic_string *)&log_path]._M_dataplus._M_p, NULL, NULL>
  gimple_assign <component_ref, _47, MEM[(const struct basic_string *)&log_path]._M_string_length, NULL, NULL>
  gimple_assign <pointer_plus_expr, _48, _46, _47, NULL>
  gimple_call <_M_construct, NULL, &D.89060, _46, _48, D.98788>

  <bb 3> :
  gimple_call <__ct_comp , NULL, &logfile, &D.89060, 1>

  <bb 4> :
  gimple_assign <component_ref, _51, D.89060._M_dataplus._M_p, NULL, NULL>
  gimple_cond <ne_expr, &D.89060.D.28191._M_local_buf, _51, NULL, NULL>
    goto <bb 5>; [53.47%]
  else
    goto <bb 6>; [46.53%]

  <bb 5> :
  gimple_assign <component_ref, _53, D.89060.D.28191._M_allocated_capacity, NULL, NULL>
  gimple_assign <plus_expr, _54, _53, 1, NULL>
  gimple_call <operator delete, NULL, _51, _54>

  <bb 6> :
  gimple_assign <constructor, D.89060, {CLOBBER}, NULL, NULL>
  gimple_assign <constructor, D.89060, {CLOBBER(eol)}, NULL, NULL>
  gimple_call <is_open, _50, &MEM[(const struct basic_filebuf *)&logfile + 8B]._M_file>
  gimple_cond <ne_expr, _50, 0, NULL, NULL>
    goto <bb 7>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 7> :
  gimple_call <time, _1, 0B>
  gimple_assign <ssa_name, t, _1, NULL, NULL>
  gimple_call <localtime, _2, &t>
  gimple_call <strftime, NULL, &timestamp, 100, "%Y-%m-%d %H:%M:%S", _2>
  gimple_call <__ostream_insert, NULL, &logfile.D.51725, "[", 1>

  <bb 8> :
  gimple_call <__builtin_strlen, _57, &timestamp>
  gimple_assign <nop_expr, _58, _57, NULL, NULL>
  gimple_call <__ostream_insert, NULL, &logfile.D.51725, &timestamp, _58>

  <bb 9> :
  gimple_call <__ostream_insert, NULL, &logfile.D.51725, "] ", 2>

  <bb 10> :
  gimple_call <operator<<, _32, &logfile.D.51725, msg_30(D)>

  <bb 11> :
  gimple_call <endl, _61, _32>

  <bb 12> :
  gimple_call <close, NULL, &logfile>

  <bb 13> :
  gimple_assign <constructor, t, {CLOBBER(eol)}, NULL, NULL>
  gimple_assign <constructor, timestamp, {CLOBBER(eol)}, NULL, NULL>
  gimple_call <__dt_comp , NULL, &logfile>
  gimple_assign <constructor, logfile, {CLOBBER(eol)}, NULL, NULL>
  gimple_return <NULL>

  <bb 14> :
  gimple_call <operator<<, NULL, &cerr, "[ERROR] Failed to open log file.\n">

  <bb 15> :
  gimple_call <exit, NULL, 123>

  <bb 16> :
gimple_label <<L3>>
  gimple_assign <component_ref, _62, D.89060._M_dataplus._M_p, NULL, NULL>
  gimple_cond <ne_expr, &D.89060.D.28191._M_local_buf, _62, NULL, NULL>
    goto <bb 17>; [53.47%]
  else
    goto <bb 18>; [46.53%]

  <bb 17> :
  gimple_assign <component_ref, _64, D.89060.D.28191._M_allocated_capacity, NULL, NULL>
  gimple_assign <plus_expr, _65, _64, 1, NULL>
  gimple_call <operator delete, NULL, _62, _65>

  <bb 18> :
  gimple_assign <constructor, D.89060, {CLOBBER}, NULL, NULL>
  gimple_resx <3>

  <bb 19> :
gimple_label <<L4>>
  gimple_assign <constructor, D.98788, {CLOBBER}, NULL, NULL>
  gimple_assign <constructor, D.89060, {CLOBBER(eol)}, NULL, NULL>
  gimple_resx <2>

  <bb 20> :
gimple_label <<L5>>
  gimple_assign <constructor, t, {CLOBBER(eol)}, NULL, NULL>
  gimple_assign <constructor, timestamp, {CLOBBER(eol)}, NULL, NULL>
  gimple_resx <7>

  <bb 21> :
gimple_label <<L6>>
  gimple_call <__dt_comp , NULL, &logfile>
  gimple_resx <6>

  <bb 22> :
gimple_label <<L7>>
  gimple_assign <constructor, logfile, {CLOBBER(eol)}, NULL, NULL>
  gimple_resx <1>

}



;; Function main (main, funcdef_no=3701, decl_uid=89308, cgraph_uid=1180, symbol_order=1743)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
callescape(9) = NONLOCAL
CALLUSED(10) = callescape(9)
result.0+64 = &result.64+192
result.64+192 = &NULL
result.64+192 = &NULL
callescape(15) = NONLOCAL
CALLUSED(16) = callescape(15)
callarg(18) = &D.89313.0+64
callarg(18) = callarg(18) + UNKNOWN
callarg(18) = *callarg(18) + UNKNOWN
CALLUSED(16) = callarg(18)
*callarg(18) = callescape(15)
CALLCLOBBERED(17) = callarg(18)
callescape(15) = callarg(18)
ESCAPED = &D.89313.0+64
callarg(21) = &STRING
callarg(21) = callarg(21) + UNKNOWN
callarg(21) = *callarg(21) + UNKNOWN
CALLUSED(16) = callarg(21)
*callarg(21) = callescape(15)
CALLCLOBBERED(17) = callarg(21)
callescape(15) = callarg(21)
ESCAPED = &STRING
callarg(22) = &D.89312
callarg(22) = callarg(22) + UNKNOWN
callarg(22) = *callarg(22) + UNKNOWN
CALLUSED(16) = callarg(22)
callescape(25) = NONLOCAL
CALLUSED(26) = callescape(25)
callarg(28) = &D.89313.0+64
callarg(28) = callarg(28) + UNKNOWN
indircallarg(29) = *callarg(28) + UNKNOWN
indircallarg(29) = indircallarg(29) + UNKNOWN
indircallarg(29) = *indircallarg(29) + UNKNOWN
CALLUSED(26) = callarg(28)
CALLUSED(26) = indircallarg(29)
*indircallarg(29) = callescape(25)
CALLCLOBBERED(27) = indircallarg(29)
callescape(25) = indircallarg(29)
ESCAPED = *callarg(28) + UNKNOWN
_11 = D.89313.0+64
_25 = D.89313.64+192
_18 = _25 + UNKNOWN
_18 = &NONLOCAL
callescape(34) = NONLOCAL
CALLUSED(35) = callescape(34)
callarg(37) = _11
callarg(37) = callarg(37) + UNKNOWN
callarg(37) = *callarg(37) + UNKNOWN
CALLUSED(35) = callarg(37)
*callarg(37) = callescape(34)
CALLCLOBBERED(36) = callarg(37)
callescape(34) = callarg(37)
ESCAPED = _11
callarg(38) = _18
callarg(38) = callarg(38) + UNKNOWN
callarg(38) = *callarg(38) + UNKNOWN
CALLUSED(35) = callarg(38)
*callarg(38) = callescape(34)
CALLCLOBBERED(36) = callarg(38)
callescape(34) = callarg(38)
ESCAPED = _18
_14 = result.0+64
callescape(41) = NONLOCAL
CALLUSED(42) = callescape(41)
callarg(44) = _14
callarg(44) = callarg(44) + UNKNOWN
callarg(44) = *callarg(44) + UNKNOWN
CALLUSED(42) = callarg(44)
*callarg(44) = callescape(41)
CALLCLOBBERED(43) = callarg(44)
callescape(41) = callarg(44)
ESCAPED = _14
_27 = result.0+64
_29 = result.64+192
_30 = _29 + UNKNOWN
_30 = &NONLOCAL
callescape(48) = NONLOCAL
CALLUSED(49) = callescape(48)
callarg(51) = _27
callarg(51) = callarg(51) + UNKNOWN
callarg(51) = *callarg(51) + UNKNOWN
CALLUSED(49) = callarg(51)
*callarg(51) = callescape(48)
CALLCLOBBERED(50) = callarg(51)
callescape(48) = callarg(51)
ESCAPED = _27
callarg(52) = _30
callarg(52) = callarg(52) + UNKNOWN
callarg(52) = *callarg(52) + UNKNOWN
CALLUSED(49) = callarg(52)
*callarg(52) = callescape(48)
CALLCLOBBERED(50) = callarg(52)
callescape(48) = callarg(52)
ESCAPED = _30
_31 = D.89313.0+64
_33 = D.89313.64+192
_34 = _33 + UNKNOWN
_34 = &NONLOCAL
callescape(57) = NONLOCAL
CALLUSED(58) = callescape(57)
callarg(60) = _31
callarg(60) = callarg(60) + UNKNOWN
callarg(60) = *callarg(60) + UNKNOWN
CALLUSED(58) = callarg(60)
*callarg(60) = callescape(57)
CALLCLOBBERED(59) = callarg(60)
callescape(57) = callarg(60)
ESCAPED = _31
callarg(61) = _34
callarg(61) = callarg(61) + UNKNOWN
callarg(61) = *callarg(61) + UNKNOWN
CALLUSED(58) = callarg(61)
*callarg(61) = callescape(57)
CALLCLOBBERED(59) = callarg(61)
callescape(57) = callarg(61)
ESCAPED = _34
_35 = result.0+64
_37 = result.64+192
_38 = _37 + UNKNOWN
_38 = &NONLOCAL
callescape(65) = NONLOCAL
CALLUSED(66) = callescape(65)
callarg(68) = _35
callarg(68) = callarg(68) + UNKNOWN
callarg(68) = *callarg(68) + UNKNOWN
CALLUSED(66) = callarg(68)
*callarg(68) = callescape(65)
CALLCLOBBERED(67) = callarg(68)
callescape(65) = callarg(68)
ESCAPED = _35
callarg(69) = _38
callarg(69) = callarg(69) + UNKNOWN
callarg(69) = *callarg(69) + UNKNOWN
CALLUSED(66) = callarg(69)
*callarg(69) = callescape(65)
CALLCLOBBERED(67) = callarg(69)
callescape(65) = callarg(69)
ESCAPED = _38

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL STRING ESCAPED NONLOCAL result.0+64 result.64+192 D.89313.0+64 D.89313.64+192 }
NONLOCAL = { ESCAPED NONLOCAL } same as callescape(9)
STOREDANYTHING = { }
INTEGER = { ANYTHING }
result.0+64 = { NULL ESCAPED NONLOCAL result.0+64 result.64+192 }
result.64+192 = { NULL ESCAPED NONLOCAL result.0+64 result.64+192 } same as _29
D.89313.0+64 = { STRING ESCAPED NONLOCAL D.89313.0+64 D.89313.64+192 } same as _11
D.89313.64+192 = { STRING ESCAPED NONLOCAL D.89313.0+64 D.89313.64+192 } same as _25
D.89312 = { }
_Z15register_signalv = { }
callescape(9) = { ESCAPED NONLOCAL }
CALLUSED(10) = { ESCAPED NONLOCAL } same as callescape(9)
CALLCLOBBERED(11) = { }
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_ = { }
callescape(15) = { STRING ESCAPED NONLOCAL D.89313.0+64 D.89313.64+192 }
CALLUSED(16) = { STRING ESCAPED NONLOCAL D.89313.0+64 D.89313.64+192 D.89312 }
CALLCLOBBERED(17) = { STRING ESCAPED NONLOCAL D.89313.0+64 D.89313.64+192 }
callarg(18) = { STRING ESCAPED NONLOCAL D.89313.0+64 D.89313.64+192 }
callarg(21) = { STRING }
callarg(22) = { D.89312 }
_Z14execute_scriptRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE = { }
callescape(25) = { STRING ESCAPED NONLOCAL D.89313.0+64 D.89313.64+192 }
CALLUSED(26) = { STRING ESCAPED NONLOCAL D.89313.0+64 D.89313.64+192 }
CALLCLOBBERED(27) = { STRING ESCAPED NONLOCAL D.89313.0+64 D.89313.64+192 } same as indircallarg(29)
callarg(28) = { D.89313.0+64 D.89313.64+192 }
indircallarg(29) = { STRING ESCAPED NONLOCAL D.89313.0+64 D.89313.64+192 }
_11 = { STRING ESCAPED NONLOCAL D.89313.0+64 D.89313.64+192 }
_25 = { STRING ESCAPED NONLOCAL D.89313.0+64 D.89313.64+192 }
_18 = { STRING ESCAPED NONLOCAL D.89313.0+64 D.89313.64+192 }
_ZdlPvm = { }
callescape(34) = { STRING ESCAPED NONLOCAL D.89313.0+64 D.89313.64+192 }
CALLUSED(35) = { STRING ESCAPED NONLOCAL D.89313.0+64 D.89313.64+192 } same as callescape(34)
CALLCLOBBERED(36) = { STRING ESCAPED NONLOCAL D.89313.0+64 D.89313.64+192 }
callarg(37) = { STRING ESCAPED NONLOCAL D.89313.0+64 D.89313.64+192 }
callarg(38) = { STRING ESCAPED NONLOCAL D.89313.0+64 D.89313.64+192 }
_14 = { NULL ESCAPED NONLOCAL result.0+64 result.64+192 } same as result.0+64
_ZL9write_logPKc = { }
callescape(41) = { NULL ESCAPED NONLOCAL result.0+64 result.64+192 }
CALLUSED(42) = { NULL ESCAPED NONLOCAL result.0+64 result.64+192 } same as callescape(41)
CALLCLOBBERED(43) = { NULL ESCAPED NONLOCAL result.0+64 result.64+192 } same as callarg(44)
callarg(44) = { NULL ESCAPED NONLOCAL result.0+64 result.64+192 }
_27 = { NULL ESCAPED NONLOCAL result.0+64 result.64+192 } same as result.0+64
_29 = { NULL ESCAPED NONLOCAL result.0+64 result.64+192 }
_30 = { NULL ESCAPED NONLOCAL result.0+64 result.64+192 }
callescape(48) = { NULL ESCAPED NONLOCAL result.0+64 result.64+192 }
CALLUSED(49) = { NULL ESCAPED NONLOCAL result.0+64 result.64+192 } same as callescape(48)
CALLCLOBBERED(50) = { NULL ESCAPED NONLOCAL result.0+64 result.64+192 }
callarg(51) = { NULL ESCAPED NONLOCAL result.0+64 result.64+192 }
callarg(52) = { NULL ESCAPED NONLOCAL result.0+64 result.64+192 }
main = { }
_31 = { STRING ESCAPED NONLOCAL D.89313.0+64 D.89313.64+192 } same as _11
_33 = { STRING ESCAPED NONLOCAL D.89313.0+64 D.89313.64+192 } same as _25
_34 = { STRING ESCAPED NONLOCAL D.89313.0+64 D.89313.64+192 }
callescape(57) = { STRING ESCAPED NONLOCAL D.89313.0+64 D.89313.64+192 }
CALLUSED(58) = { STRING ESCAPED NONLOCAL D.89313.0+64 D.89313.64+192 } same as callescape(57)
CALLCLOBBERED(59) = { STRING ESCAPED NONLOCAL D.89313.0+64 D.89313.64+192 }
callarg(60) = { STRING ESCAPED NONLOCAL D.89313.0+64 D.89313.64+192 }
callarg(61) = { STRING ESCAPED NONLOCAL D.89313.0+64 D.89313.64+192 }
_35 = { NULL ESCAPED NONLOCAL result.0+64 result.64+192 } same as result.0+64
_37 = { NULL ESCAPED NONLOCAL result.0+64 result.64+192 } same as _29
_38 = { NULL ESCAPED NONLOCAL result.0+64 result.64+192 }
callescape(65) = { NULL ESCAPED NONLOCAL result.0+64 result.64+192 }
CALLUSED(66) = { NULL ESCAPED NONLOCAL result.0+64 result.64+192 } same as callescape(65)
CALLCLOBBERED(67) = { NULL ESCAPED NONLOCAL result.0+64 result.64+192 }
callarg(68) = { NULL ESCAPED NONLOCAL result.0+64 result.64+192 }
callarg(69) = { NULL ESCAPED NONLOCAL result.0+64 result.64+192 }


Alias information for main

Aliased symbols

result, UID D.89311, struct string, is addressable
D.89312, UID D.89312, struct allocator, is addressable
D.89313, UID D.89313, const struct string, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.89311 D.89313 } (escaped)

Flow-insensitive points-to information

_11, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.89313 } (escaped)
_14, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.89311 } (escaped)
_27, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.89311 } (escaped)
_31, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.89313 } (escaped)
_35, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.89311 } (escaped)

int main ()
{
  const char * D.98809;
  struct string result;
  struct allocator D.89312;
  const struct string D.89313;
  char * _11;
  char * _14;
  long unsigned int _18;
  long unsigned int _25;
  char * _27;
  long unsigned int _29;
  long unsigned int _30;
  char * _31;
  long unsigned int _33;
  long unsigned int _34;
  char * _35;
  long unsigned int _37;
  long unsigned int _38;

  <bb 2> :
  gimple_call <register_signal, NULL>
  gimple_assign <constructor, MEM[(struct basic_string *)&result], {CLOBBER}, NULL, NULL>
  gimple_assign <constructor, MEM[(struct _Alloc_hider *)&result], {CLOBBER}, NULL, NULL>
  gimple_assign <addr_expr, MEM[(struct _Alloc_hider *)&result]._M_p, &result.D.28191._M_local_buf, NULL, NULL>
  gimple_assign <integer_cst, MEM[(struct basic_string *)&result]._M_string_length, 0, NULL, NULL>
  gimple_assign <integer_cst, MEM[(char_type &)&result + 16], 0, NULL, NULL>
  gimple_call <__ct_comp , NULL, &D.89313, "./log.sh", &D.89312>

  <bb 3> :
  gimple_call <execute_script, NULL, &D.89313>

  <bb 4> :
  gimple_assign <component_ref, _11, D.89313._M_dataplus._M_p, NULL, NULL>
  gimple_cond <ne_expr, &D.89313.D.28191._M_local_buf, _11, NULL, NULL>
    goto <bb 5>; [53.47%]
  else
    goto <bb 6>; [46.53%]

  <bb 5> :
  gimple_assign <component_ref, _25, D.89313.D.28191._M_allocated_capacity, NULL, NULL>
  gimple_assign <plus_expr, _18, _25, 1, NULL>
  gimple_call <operator delete, NULL, _11, _18>

  <bb 6> :
  gimple_assign <constructor, D.89313, {CLOBBER}, NULL, NULL>
  gimple_assign <constructor, D.89312, {CLOBBER(eol)}, NULL, NULL>
  gimple_assign <constructor, D.89313, {CLOBBER(eol)}, NULL, NULL>
  gimple_assign <component_ref, _14, result._M_dataplus._M_p, NULL, NULL>
  gimple_call <write_log, NULL, _14>

  <bb 7> :
  gimple_assign <component_ref, _27, result._M_dataplus._M_p, NULL, NULL>
  gimple_cond <ne_expr, &result.D.28191._M_local_buf, _27, NULL, NULL>
    goto <bb 8>; [53.47%]
  else
    goto <bb 9>; [46.53%]

  <bb 8> :
  gimple_assign <component_ref, _29, result.D.28191._M_allocated_capacity, NULL, NULL>
  gimple_assign <plus_expr, _30, _29, 1, NULL>
  gimple_call <operator delete, NULL, _27, _30>

  <bb 9> :
  gimple_assign <constructor, result, {CLOBBER}, NULL, NULL>
  gimple_assign <constructor, result, {CLOBBER(eol)}, NULL, NULL>
  gimple_return <0>

  <bb 10> :
gimple_label <<L3>>
  gimple_assign <component_ref, _31, D.89313._M_dataplus._M_p, NULL, NULL>
  gimple_cond <ne_expr, &D.89313.D.28191._M_local_buf, _31, NULL, NULL>
    goto <bb 11>; [53.47%]
  else
    goto <bb 12>; [46.53%]

  <bb 11> :
  gimple_assign <component_ref, _33, D.89313.D.28191._M_allocated_capacity, NULL, NULL>
  gimple_assign <plus_expr, _34, _33, 1, NULL>
  gimple_call <operator delete, NULL, _31, _34>

  <bb 12> :
  gimple_assign <constructor, D.89313, {CLOBBER}, NULL, NULL>
  gimple_resx <6>

  <bb 13> :
gimple_label <<L4>>
  gimple_resx <5>

  <bb 14> :
gimple_label <<L5>>
  gimple_assign <constructor, D.89312, {CLOBBER(eol)}, NULL, NULL>
  gimple_resx <4>

  <bb 15> :
gimple_label <<L6>>
  gimple_assign <constructor, D.89313, {CLOBBER(eol)}, NULL, NULL>
  gimple_resx <3>

  <bb 16> :
gimple_label <<L7>>
  gimple_assign <component_ref, _35, result._M_dataplus._M_p, NULL, NULL>
  gimple_cond <ne_expr, &result.D.28191._M_local_buf, _35, NULL, NULL>
    goto <bb 17>; [53.47%]
  else
    goto <bb 18>; [46.53%]

  <bb 17> :
  gimple_assign <component_ref, _37, result.D.28191._M_allocated_capacity, NULL, NULL>
  gimple_assign <plus_expr, _38, _37, 1, NULL>
  gimple_call <operator delete, NULL, _35, _38>

  <bb 18> :
  gimple_assign <constructor, result, {CLOBBER}, NULL, NULL>
  gimple_resx <2>

  <bb 19> :
gimple_label <<L8>>
  gimple_assign <constructor, result, {CLOBBER(eol)}, NULL, NULL>
  gimple_resx <1>

}



;; Function __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::__normal_iterator (_ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2ERKS2_, funcdef_no=4538, decl_uid=73508, cgraph_uid=2017, symbol_order=2601)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &PARM_NOALIAS(9)
PARM_NOALIAS(9) = &NONLOCAL
__i = &NONLOCAL
_1 = *__i
*this = _1

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
PARM_NOALIAS(9) = { ESCAPED NONLOCAL }
this = { PARM_NOALIAS(9) }
__i = { NONLOCAL }
_1 = { ESCAPED NONLOCAL }


Alias information for __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::__normal_iterator(char const* const&)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
this_3(D), points-to vars: { D.98817 } (nonlocal, restrict)
__i_5(D), points-to non-local, points-to vars: { }

void __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::__normal_iterator (struct __normal_iterator * const this, const char * const & __i)
{
  const char * _1;

  <bb 2> :
  gimple_assign <constructor, *this_3(D), {CLOBBER}, NULL, NULL>
  gimple_assign <mem_ref, _1, *__i_5(D), NULL, NULL>
  gimple_assign <ssa_name, *this_3(D)._M_current, _1, NULL, NULL>
  gimple_return <NULL>

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::begin (_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv, funcdef_no=4460, decl_uid=28499, cgraph_uid=1939, symbol_order=2523)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_10 = *this
SR.177_1 = _10
D.97691 = SR.177_1

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_10 = { ESCAPED NONLOCAL }
SR.177_1 = { ESCAPED NONLOCAL } same as _10
D.97691 = { ESCAPED NONLOCAL } same as _10
_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv = { }


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::begin() const

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

SR.177_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
this_3(D), points-to non-local, points-to vars: { }
_10, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

struct const_iterator std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::begin (const struct basic_string * const this)
{
  const char * SR.177;
  char * D.98822;
  const char * const D.96328;
  struct const_iterator D.96329;
  struct const_iterator D.97691;
  char * _10;
  const char * const _15(D);

  <bb 2> :
  gimple_assign <component_ref, _10, this_3(D)->_M_dataplus._M_p, NULL, NULL>
  gimple_assign <ssa_name, SR.177_1, _10, NULL, NULL>
  gimple_assign <ssa_name, D.97691._M_current, SR.177_1, NULL, NULL>
  gimple_return <D.97691>

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::end (_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE3endEv, funcdef_no=4461, decl_uid=28503, cgraph_uid=1940, symbol_order=2524)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_13 = *this
_6 = *this + 64
_3 = _13 + UNKNOWN
SR.179_1 = _3
D.97695 = SR.179_1

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_13 = { ESCAPED NONLOCAL }
_6 = { ESCAPED NONLOCAL }
_3 = { ESCAPED NONLOCAL }
SR.179_1 = { ESCAPED NONLOCAL } same as _3
D.97695 = { ESCAPED NONLOCAL } same as _3
_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE3endEv = { }


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::end() const

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

SR.179_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_3, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
this_5(D), points-to non-local, points-to vars: { }
_13, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

struct const_iterator std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::end (const struct basic_string * const this)
{
  const char * SR.179;
  char * D.98830;
  size_type D.98828;
  const char * const D.96331;
  struct const_iterator D.96332;
  struct const_iterator D.97695;
  char * _3;
  long unsigned int _6;
  char * _13;
  const char * const _19(D);

  <bb 2> :
  gimple_assign <component_ref, _13, this_5(D)->_M_dataplus._M_p, NULL, NULL>
  gimple_assign <component_ref, _6, this_5(D)->_M_string_length, NULL, NULL>
  gimple_assign <pointer_plus_expr, _3, _13, _6, NULL>
  gimple_assign <ssa_name, SR.179_1, _3, NULL, NULL>
  gimple_assign <ssa_name, D.97695._M_current, SR.179_1, NULL, NULL>
  gimple_return <D.97695>

}



;; Function __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::base (_ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv, funcdef_no=4540, decl_uid=73495, cgraph_uid=2019, symbol_order=2603)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_2 = this

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_2 = { NONLOCAL } same as this
_ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv = { }


Alias information for __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::base() const

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_1(D), points-to non-local, points-to vars: { }
_2, points-to non-local, points-to NULL, points-to vars: { }

const char * const & __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::base (const struct __normal_iterator * const this)
{
  const char * const & _2;

  <bb 2> :
  gimple_assign <addr_expr, _2, &this_1(D)->_M_current, NULL, NULL>
  gimple_return <_2>

}



;; Function __gnu_cxx::operator!=<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > (_ZN9__gnu_cxxneIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKNS_17__normal_iteratorIT_T0_EESE_, funcdef_no=4462, decl_uid=95685, cgraph_uid=1941, symbol_order=2525)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__lhs = &NONLOCAL
__rhs = &NONLOCAL
_2 = *__lhs
_4 = *__rhs

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__lhs = { NONLOCAL }
__rhs = { NONLOCAL } same as __lhs
_2 = { ESCAPED NONLOCAL }
_4 = { ESCAPED NONLOCAL }
_10 = { }
_ZN9__gnu_cxxneIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKNS_17__normal_iteratorIT_T0_EESE_ = { }


Alias information for __gnu_cxx::operator!=<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const&, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const&)bool

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information

_2, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_4, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
__lhs_6(D), points-to non-local, points-to vars: { }
__rhs_8(D), points-to non-local, points-to vars: { }

__attribute__((nodiscard))
bool __gnu_cxx::operator!=<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > (const struct __normal_iterator & __lhs, const struct __normal_iterator & __rhs)
{
  const char * const & D.98837;
  const char * const & D.98835;
  const char * _2;
  const char * _4;
  bool _10;

  <bb 2> :
  gimple_assign <mem_ref, _2, MEM[(const char * const &)__lhs_6(D)], NULL, NULL>
  gimple_assign <mem_ref, _4, MEM[(const char * const &)__rhs_8(D)], NULL, NULL>
  gimple_assign <ne_expr, _10, _2, _4, NULL>
  gimple_return <_10>

}



;; Function std::__new_allocator<char>::_M_max_size (_ZNKSt15__new_allocatorIcE11_M_max_sizeEv, funcdef_no=4563, decl_uid=12241, cgraph_uid=2042, symbol_order=2626)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_ZNKSt15__new_allocatorIcE11_M_max_sizeEv = { }


Alias information for std::__new_allocator<char>::_M_max_size() const

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information


size_type std::__new_allocator<char>::_M_max_size (const struct __new_allocator * const this)
{
  <bb 2> :
  gimple_return <9223372036854775807>

}



;; Function std::__new_allocator<char>::max_size (_ZNKSt15__new_allocatorIcE8max_sizeEv, funcdef_no=4587, decl_uid=12217, cgraph_uid=2066, symbol_order=2650)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_ZNKSt15__new_allocatorIcE8max_sizeEv = { }


Alias information for std::__new_allocator<char>::max_size() const

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to vars: { }

size_type std::__new_allocator<char>::max_size (const struct __new_allocator * const this)
{
  size_type D.98841;

  <bb 2> :
  gimple_return <9223372036854775807>

}



;; Function std::allocator_traits<std::allocator<char> >::max_size (_ZNSt16allocator_traitsISaIcEE8max_sizeERKS0_, funcdef_no=4560, decl_uid=28049, cgraph_uid=2039, symbol_order=2623)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__a = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__a = { NONLOCAL }
_ZNSt16allocator_traitsISaIcEE8max_sizeERKS0_ = { }


Alias information for std::allocator_traits<std::allocator<char> >::max_size(std::allocator<char> const&)

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information

__a_2(D), points-to non-local, points-to vars: { }

size_type std::allocator_traits<std::allocator<char> >::max_size (const struct allocator_type & __a)
{
  size_type D.98844;

  <bb 2> :
  gimple_return <9223372036854775807>

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::max_size (_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8max_sizeEv, funcdef_no=4508, decl_uid=28525, cgraph_uid=1987, symbol_order=2571)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_7 = this + UNKNOWN

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_7 = { NONLOCAL }
_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8max_sizeEv = { }


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::max_size() const

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information

this_5(D), points-to non-local, points-to vars: { }
_7, points-to non-local, points-to NULL, points-to vars: { }

size_type std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::max_size (const struct basic_string * const this)
{
  const struct allocator_type & D.98849;
  size_type D.98847;
  const struct allocator_type & _7;

  <bb 2> :
  gimple_assign <addr_expr, _7, &this_5(D)->_M_dataplus, NULL, NULL>
  gimple_return <4611686018427387903>

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check_length (_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEmmPKc, funcdef_no=4395, decl_uid=28252, cgraph_uid=1874, symbol_order=2458)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__n1 = &NONLOCAL
__n2 = &NONLOCAL
__s = &NONLOCAL
_8 = *this + 64
_3 = __n1 + UNKNOWN
_3 = _8 + UNKNOWN
_4 = _3 + UNKNOWN
_4 = &NONLOCAL
callescape(16) = NONLOCAL
CALLUSED(17) = callescape(16)
callarg(19) = __s
callarg(19) = callarg(19) + UNKNOWN
callarg(19) = *callarg(19) + UNKNOWN
CALLUSED(17) = callarg(19)
*callarg(19) = callescape(16)
CALLCLOBBERED(18) = callarg(19)
callescape(16) = callarg(19)
ESCAPED = __s

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__n1 = { NONLOCAL } same as this
__n2 = { NONLOCAL } same as this
__s = { NONLOCAL } same as this
_8 = { ESCAPED NONLOCAL }
_3 = { ESCAPED NONLOCAL }
_4 = { ESCAPED NONLOCAL }
_ZSt20__throw_length_errorPKc = { }
callescape(16) = { ESCAPED NONLOCAL }
CALLUSED(17) = { ESCAPED NONLOCAL } same as callescape(16)
CALLCLOBBERED(18) = { ESCAPED NONLOCAL } same as callarg(19)
callarg(19) = { ESCAPED NONLOCAL }


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check_length(unsigned long, unsigned long, char const*) const

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_6(D), points-to non-local, points-to vars: { }
__s_12(D), points-to non-local, points-to NULL, points-to vars: { }

void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check_length (const struct basic_string * const this, size_type __n1, size_type __n2, const char * __s)
{
  size_type D.98854;
  size_type D.98852;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _8;

  <bb 2> :
  gimple_assign <component_ref, _8, this_6(D)->_M_string_length, NULL, NULL>
  gimple_assign <minus_expr, _3, __n1_9(D), _8, NULL>
  gimple_assign <plus_expr, _4, _3, 4611686018427387903, NULL>
  gimple_cond <lt_expr, _4, __n2_10(D), NULL, NULL>
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  gimple_call <__throw_length_error, NULL, __s_12(D)>

  <bb 4> :
  gimple_return <NULL>

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc, funcdef_no=4195, decl_uid=28596, cgraph_uid=1674, symbol_order=2250)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__s = &NONLOCAL
CALLUSED(10) = CALLUSED(10) + UNKNOWN
CALLUSED(10) = __s
_3 = *this + 64
_11 = _3 + UNKNOWN
_10 = &NONLOCAL
_10 = _3 + UNKNOWN
callescape(16) = NONLOCAL
CALLUSED(17) = callescape(16)
callarg(19) = &STRING
callarg(19) = callarg(19) + UNKNOWN
callarg(19) = *callarg(19) + UNKNOWN
CALLUSED(17) = callarg(19)
*callarg(19) = callescape(16)
CALLCLOBBERED(18) = callarg(19)
callescape(16) = callarg(19)
ESCAPED = &STRING
callescape(21) = NONLOCAL
CALLUSED(22) = callescape(21)
callarg(24) = this
callarg(24) = callarg(24) + UNKNOWN
callarg(24) = *callarg(24) + UNKNOWN
CALLUSED(22) = callarg(24)
*callarg(24) = callescape(21)
CALLCLOBBERED(23) = callarg(24)
callescape(21) = callarg(24)
ESCAPED = this
callarg(25) = __s
callarg(25) = callarg(25) + UNKNOWN
callarg(25) = *callarg(25) + UNKNOWN
CALLUSED(22) = callarg(25)
*callarg(25) = callescape(21)
CALLCLOBBERED(23) = callarg(25)
callescape(21) = callarg(25)
ESCAPED = __s
callarg(26) = _13
callarg(26) = callarg(26) + UNKNOWN
callarg(26) = *callarg(26) + UNKNOWN
CALLUSED(22) = callarg(26)
*callarg(26) = callescape(21)
CALLCLOBBERED(23) = callarg(26)
callescape(21) = callarg(26)
ESCAPED = _13
_9 = NONLOCAL
_9 = callarg(24)
_9 = callarg(25)
_9 = callarg(26)

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { STRING ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__s = { NONLOCAL } same as this
CALLUSED(10) = { NONLOCAL }
CALLCLOBBERED(11) = { }
_3 = { ESCAPED NONLOCAL }
_11 = { ESCAPED NONLOCAL }
_10 = { ESCAPED NONLOCAL }
_ZSt20__throw_length_errorPKc = { }
callescape(16) = { STRING ESCAPED NONLOCAL }
CALLUSED(17) = { STRING ESCAPED NONLOCAL } same as callescape(16)
CALLCLOBBERED(18) = { STRING } same as callarg(19)
callarg(19) = { STRING }
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm = { }
callescape(21) = { ESCAPED NONLOCAL }
CALLUSED(22) = { ESCAPED NONLOCAL } same as callescape(21)
CALLCLOBBERED(23) = { ESCAPED NONLOCAL }
callarg(24) = { ESCAPED NONLOCAL }
callarg(25) = { ESCAPED NONLOCAL }
callarg(26) = { }
_13 = { }
_9 = { ESCAPED NONLOCAL } same as callescape(21)
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc = { }


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__s_2(D), points-to non-local, points-to NULL, points-to vars: { }
this_6(D), points-to non-local, points-to vars: { }
_9, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

struct basic_string & std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append (struct basic_string * const this, const char * __s)
{
  size_t D.98861;
  const size_type __n;
  long unsigned int _3;
  struct basic_string & _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _13;

  <bb 2> :
  gimple_call <__builtin_strlen, _13, __s_2(D)>
  gimple_assign <component_ref, _3, MEM[(const struct basic_string *)this_6(D)]._M_string_length, NULL, NULL>
  gimple_assign <negate_expr, _11, _3, NULL, NULL>
  gimple_assign <minus_expr, _10, 4611686018427387903, _3, NULL>
  gimple_cond <lt_expr, _10, _13, NULL, NULL>
    goto <bb 3>; [0.04%]
  else
    goto <bb 4>; [99.96%]

  <bb 3> :
  gimple_call <__throw_length_error, NULL, "basic_string::append">

  <bb 4> :
  gimple_call <_M_append, _9, this_6(D), __s_2(D), _13>
  gimple_return <_9>

}



;; Function std::operator+<char, std::char_traits<char>, std::allocator<char> > (_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_, funcdef_no=4094, decl_uid=89127, cgraph_uid=1573, symbol_order=2149)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__lhs = &NONLOCAL
__rhs = &NONLOCAL
D.93472 = &NONLOCAL
callescape(12) = NONLOCAL
CALLUSED(13) = callescape(12)
callarg(15) = __lhs
callarg(15) = callarg(15) + UNKNOWN
callarg(15) = *callarg(15) + UNKNOWN
CALLUSED(13) = callarg(15)
*callarg(15) = callescape(12)
CALLCLOBBERED(14) = callarg(15)
callescape(12) = callarg(15)
ESCAPED = __lhs
callarg(16) = __rhs
callarg(16) = callarg(16) + UNKNOWN
callarg(16) = *callarg(16) + UNKNOWN
CALLUSED(13) = callarg(16)
*callarg(16) = callescape(12)
CALLCLOBBERED(14) = callarg(16)
callescape(12) = callarg(16)
ESCAPED = __rhs
_6 = NONLOCAL
_6 = callarg(15)
_6 = callarg(16)
callescape(19) = &NONLOCAL
CALLUSED(20) = callescape(19)
callarg(22) = D.93472
callarg(22) = callarg(22) + UNKNOWN
callarg(22) = *callarg(22) + UNKNOWN
CALLUSED(20) = callarg(22)
*callarg(22) = callescape(19)
CALLCLOBBERED(21) = callarg(22)
callescape(19) = callarg(22)
callarg(23) = _6
callarg(23) = callarg(23) + UNKNOWN
callarg(23) = *callarg(23) + UNKNOWN
CALLUSED(20) = callarg(23)
*callarg(23) = callescape(19)
CALLCLOBBERED(21) = callarg(23)
callescape(19) = callarg(23)

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__lhs = { NONLOCAL }
__rhs = { NONLOCAL } same as __lhs
D.93472 = { NONLOCAL } same as __lhs
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc = { }
callescape(12) = { ESCAPED NONLOCAL }
CALLUSED(13) = { ESCAPED NONLOCAL } same as callescape(12)
CALLCLOBBERED(14) = { ESCAPED NONLOCAL }
callarg(15) = { ESCAPED NONLOCAL }
callarg(16) = { ESCAPED NONLOCAL }
_6 = { ESCAPED NONLOCAL } same as callescape(12)
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_ = { }
callescape(19) = { ESCAPED NONLOCAL }
CALLUSED(20) = { ESCAPED NONLOCAL } same as callescape(19)
CALLCLOBBERED(21) = { ESCAPED NONLOCAL } same as callescape(19)
callarg(22) = { ESCAPED NONLOCAL }
callarg(23) = { ESCAPED NONLOCAL }
_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_ = { }


Alias information for std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, char const*)std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__lhs_3(D), points-to non-local, points-to vars: { }
__rhs_4(D), points-to non-local, points-to NULL, points-to vars: { }
_6, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_7(D), points-to non-local, points-to NULL, points-to vars: { }

struct basic_string std::operator+<char, std::char_traits<char>, std::allocator<char> > (struct basic_string & __lhs, const char * __rhs)
{
  struct basic_string & _6;
  struct basic_string & _7(D);

  <bb 2> :
  gimple_call <append, _6, __lhs_3(D), __rhs_4(D)>
  gimple_call <__ct_comp , NULL, _7(D), _6>
  gimple_return <_7(D)>

}



;; Function std::_Head_base<0ul, std::filesystem::__cxx11::path::_List::_Impl*, false>::_M_head (_ZNSt10_Head_baseILm0EPNSt10filesystem7__cxx114path5_List5_ImplELb0EE7_M_headERS6_, funcdef_no=4588, decl_uid=80875, cgraph_uid=2067, symbol_order=2651)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__b = &NONLOCAL
_2 = __b

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__b = { NONLOCAL }
_2 = { NONLOCAL } same as __b
_ZNSt10_Head_baseILm0EPNSt10filesystem7__cxx114path5_List5_ImplELb0EE7_M_headERS6_ = { }


Alias information for std::_Head_base<0ul, std::filesystem::__cxx11::path::_List::_Impl*, false>::_M_head(std::_Head_base<0ul, std::filesystem::__cxx11::path::_List::_Impl*, false>&)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__b_1(D), points-to non-local, points-to vars: { }
_2, points-to non-local, points-to NULL, points-to vars: { }

struct _Impl * & std::_Head_base<0ul, std::filesystem::__cxx11::path::_List::_Impl*, false>::_M_head (struct _Head_base & __b)
{
  struct _Impl * & _2;

  <bb 2> :
  gimple_assign <addr_expr, _2, &__b_1(D)->_M_head_impl, NULL, NULL>
  gimple_return <_2>

}



;; Function std::_Tuple_impl<0ul, std::filesystem::__cxx11::path::_List::_Impl*, std::filesystem::__cxx11::path::_List::_Impl_deleter>::_M_head (_ZNSt11_Tuple_implILm0EJPNSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEEE7_M_headERS7_, funcdef_no=4561, decl_uid=80982, cgraph_uid=2040, symbol_order=2624)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__t = &NONLOCAL
_4 = __t

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__t = { NONLOCAL }
_4 = { NONLOCAL } same as __t
_ZNSt11_Tuple_implILm0EJPNSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEEE7_M_headERS7_ = { }


Alias information for std::_Tuple_impl<0ul, std::filesystem::__cxx11::path::_List::_Impl*, std::filesystem::__cxx11::path::_List::_Impl_deleter>::_M_head(std::_Tuple_impl<0ul, std::filesystem::__cxx11::path::_List::_Impl*, std::filesystem::__cxx11::path::_List::_Impl_deleter>&)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__t_2(D), points-to non-local, points-to vars: { }
_4, points-to non-local, points-to NULL, points-to vars: { }

struct _Impl * & std::_Tuple_impl<0ul, std::filesystem::__cxx11::path::_List::_Impl*, std::filesystem::__cxx11::path::_List::_Impl_deleter>::_M_head (struct _Tuple_impl & __t)
{
  struct _Impl * & D.98866;
  struct _Impl * & _4;

  <bb 2> :
  gimple_assign <addr_expr, _4, &MEM[(struct _Head_base &)__t_2(D)]._M_head_impl, NULL, NULL>
  gimple_return <_4>

}



;; Function std::__get_helper<0ul, std::filesystem::__cxx11::path::_List::_Impl*, std::filesystem::__cxx11::path::_List::_Impl_deleter> (_ZSt12__get_helperILm0EPNSt10filesystem7__cxx114path5_List5_ImplEJNS3_13_Impl_deleterEEERT0_RSt11_Tuple_implIXT_EJS7_DpT1_EE, funcdef_no=4512, decl_uid=96112, cgraph_uid=1991, symbol_order=2575)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__t = &NONLOCAL
_3 = __t

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__t = { NONLOCAL }
_3 = { NONLOCAL } same as __t
_ZSt12__get_helperILm0EPNSt10filesystem7__cxx114path5_List5_ImplEJNS3_13_Impl_deleterEEERT0_RSt11_Tuple_implIXT_EJS7_DpT1_EE = { }


Alias information for std::__get_helper<0ul, std::filesystem::__cxx11::path::_List::_Impl*, std::filesystem::__cxx11::path::_List::_Impl_deleter>(std::_Tuple_impl<0ul, std::filesystem::__cxx11::path::_List::_Impl*, std::filesystem::__cxx11::path::_List::_Impl_deleter>&)std::filesystem::__cxx11::path::_List::_Impl*&

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__t_2(D), points-to non-local, points-to vars: { }
_3, points-to non-local, points-to NULL, points-to vars: { }

struct _Impl * & std::__get_helper<0ul, std::filesystem::__cxx11::path::_List::_Impl*, std::filesystem::__cxx11::path::_List::_Impl_deleter> (struct _Tuple_impl & __t)
{
  struct _Impl * & D.98869;
  struct _Impl * & _3;

  <bb 2> :
  gimple_assign <addr_expr, _3, &MEM[(struct _Head_base &)__t_2(D)]._M_head_impl, NULL, NULL>
  gimple_return <_3>

}



;; Function std::get<0ul, std::filesystem::__cxx11::path::_List::_Impl*, std::filesystem::__cxx11::path::_List::_Impl_deleter> (_ZSt3getILm0EJPNSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSB_, funcdef_no=4405, decl_uid=94881, cgraph_uid=1884, symbol_order=2468)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__t = &NONLOCAL
_4 = __t

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__t = { NONLOCAL }
_4 = { NONLOCAL } same as __t
_ZSt3getILm0EJPNSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSB_ = { }


Alias information for std::get<0ul, std::filesystem::__cxx11::path::_List::_Impl*, std::filesystem::__cxx11::path::_List::_Impl_deleter>(std::tuple<std::filesystem::__cxx11::path::_List::_Impl*, std::filesystem::__cxx11::path::_List::_Impl_deleter>&)std::tuple_element<0ul, std::tuple<std::filesystem::__cxx11::path::_List::_Impl*, std::filesystem::__cxx11::path::_List::_Impl_deleter> >::type&

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__t_2(D), points-to non-local, points-to vars: { }
_4, points-to non-local, points-to NULL, points-to vars: { }

struct _Impl * & std::get<0ul, std::filesystem::__cxx11::path::_List::_Impl*, std::filesystem::__cxx11::path::_List::_Impl_deleter> (struct tuple & __t)
{
  struct _Impl * & D.98872;
  struct _Impl * & _4;

  <bb 2> :
  gimple_assign <addr_expr, _4, &MEM[(struct _Head_base &)__t_2(D)]._M_head_impl, NULL, NULL>
  gimple_return <_4>

}



;; Function std::__uniq_ptr_impl<std::filesystem::__cxx11::path::_List::_Impl, std::filesystem::__cxx11::path::_List::_Impl_deleter>::_M_ptr (_ZNSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE6_M_ptrEv, funcdef_no=4222, decl_uid=80194, cgraph_uid=1701, symbol_order=2283)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_4 = this

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_4 = { NONLOCAL } same as this
_ZNSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE6_M_ptrEv = { }


Alias information for std::__uniq_ptr_impl<std::filesystem::__cxx11::path::_List::_Impl, std::filesystem::__cxx11::path::_List::_Impl_deleter>::_M_ptr()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to vars: { }
_4, points-to non-local, points-to NULL, points-to vars: { }

struct _Impl * & std::__uniq_ptr_impl<std::filesystem::__cxx11::path::_List::_Impl, std::filesystem::__cxx11::path::_List::_Impl_deleter>::_M_ptr (struct __uniq_ptr_impl * const this)
{
  struct _Impl * & D.98875;
  struct _Impl * & _4;

  <bb 2> :
  gimple_assign <addr_expr, _4, &MEM[(struct _Head_base &)this_2(D)]._M_head_impl, NULL, NULL>
  gimple_return <_4>

}



;; Function std::_Head_base<1ul, std::filesystem::__cxx11::path::_List::_Impl_deleter, true>::_M_head (_ZNSt10_Head_baseILm1ENSt10filesystem7__cxx114path5_List13_Impl_deleterELb1EE7_M_headERS5_, funcdef_no=4590, decl_uid=80339, cgraph_uid=2069, symbol_order=2653)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__b = &NONLOCAL
_2 = __b + UNKNOWN

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__b = { NONLOCAL }
_2 = { NONLOCAL }
_ZNSt10_Head_baseILm1ENSt10filesystem7__cxx114path5_List13_Impl_deleterELb1EE7_M_headERS5_ = { }


Alias information for std::_Head_base<1ul, std::filesystem::__cxx11::path::_List::_Impl_deleter, true>::_M_head(std::_Head_base<1ul, std::filesystem::__cxx11::path::_List::_Impl_deleter, true>&)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__b_1(D), points-to non-local, points-to vars: { }
_2, points-to non-local, points-to NULL, points-to vars: { }

struct _Impl_deleter & std::_Head_base<1ul, std::filesystem::__cxx11::path::_List::_Impl_deleter, true>::_M_head (struct _Head_base & __b)
{
  struct _Impl_deleter & _2;

  <bb 2> :
  gimple_assign <addr_expr, _2, &__b_1(D)->_M_head_impl, NULL, NULL>
  gimple_return <_2>

}



;; Function std::_Tuple_impl<1ul, std::filesystem::__cxx11::path::_List::_Impl_deleter>::_M_head (_ZNSt11_Tuple_implILm1EJNSt10filesystem7__cxx114path5_List13_Impl_deleterEEE7_M_headERS5_, funcdef_no=4564, decl_uid=80445, cgraph_uid=2043, symbol_order=2627)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__t = &NONLOCAL
_3 = __t + UNKNOWN

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__t = { NONLOCAL }
_3 = { NONLOCAL }
_ZNSt11_Tuple_implILm1EJNSt10filesystem7__cxx114path5_List13_Impl_deleterEEE7_M_headERS5_ = { }


Alias information for std::_Tuple_impl<1ul, std::filesystem::__cxx11::path::_List::_Impl_deleter>::_M_head(std::_Tuple_impl<1ul, std::filesystem::__cxx11::path::_List::_Impl_deleter>&)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__t_2(D), points-to non-local, points-to vars: { }
_3, points-to non-local, points-to NULL, points-to vars: { }

struct _Impl_deleter & std::_Tuple_impl<1ul, std::filesystem::__cxx11::path::_List::_Impl_deleter>::_M_head (struct _Tuple_impl & __t)
{
  struct _Impl_deleter & D.98879;
  struct _Impl_deleter & _3;

  <bb 2> :
  gimple_assign <addr_expr, _3, &MEM[(struct _Head_base &)__t_2(D)]._M_head_impl, NULL, NULL>
  gimple_return <_3>

}



;; Function std::__get_helper<1ul, std::filesystem::__cxx11::path::_List::_Impl_deleter> (_ZSt12__get_helperILm1ENSt10filesystem7__cxx114path5_List13_Impl_deleterEJEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE, funcdef_no=4518, decl_uid=96178, cgraph_uid=1997, symbol_order=2581)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__t = &NONLOCAL
_3 = __t + UNKNOWN

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__t = { NONLOCAL }
_3 = { NONLOCAL }
_ZSt12__get_helperILm1ENSt10filesystem7__cxx114path5_List13_Impl_deleterEJEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE = { }


Alias information for std::__get_helper<1ul, std::filesystem::__cxx11::path::_List::_Impl_deleter>(std::_Tuple_impl<1ul, std::filesystem::__cxx11::path::_List::_Impl_deleter>&)std::filesystem::__cxx11::path::_List::_Impl_deleter&

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__t_2(D), points-to non-local, points-to vars: { }
_3, points-to non-local, points-to NULL, points-to vars: { }

struct _Impl_deleter & std::__get_helper<1ul, std::filesystem::__cxx11::path::_List::_Impl_deleter> (struct _Tuple_impl & __t)
{
  struct _Impl_deleter & D.98882;
  struct _Impl_deleter & _3;

  <bb 2> :
  gimple_assign <addr_expr, _3, &MEM[(struct _Head_base &)__t_2(D)]._M_head_impl, NULL, NULL>
  gimple_return <_3>

}



;; Function std::get<1ul, std::filesystem::__cxx11::path::_List::_Impl*, std::filesystem::__cxx11::path::_List::_Impl_deleter> (_ZSt3getILm1EJPNSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSB_, funcdef_no=4415, decl_uid=95196, cgraph_uid=1894, symbol_order=2478)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__t = &NONLOCAL
_3 = __t + UNKNOWN

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__t = { NONLOCAL }
_3 = { NONLOCAL }
_ZSt3getILm1EJPNSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSB_ = { }


Alias information for std::get<1ul, std::filesystem::__cxx11::path::_List::_Impl*, std::filesystem::__cxx11::path::_List::_Impl_deleter>(std::tuple<std::filesystem::__cxx11::path::_List::_Impl*, std::filesystem::__cxx11::path::_List::_Impl_deleter>&)std::tuple_element<1ul, std::tuple<std::filesystem::__cxx11::path::_List::_Impl*, std::filesystem::__cxx11::path::_List::_Impl_deleter> >::type&

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__t_2(D), points-to non-local, points-to vars: { }
_3, points-to non-local, points-to NULL, points-to vars: { }

struct __tuple_element_t & std::get<1ul, std::filesystem::__cxx11::path::_List::_Impl*, std::filesystem::__cxx11::path::_List::_Impl_deleter> (struct tuple & __t)
{
  struct _Impl_deleter & D.98885;
  struct _Impl_deleter & _3;

  <bb 2> :
  gimple_assign <addr_expr, _3, &MEM[(struct _Head_base &)__t_2(D)]._M_head_impl, NULL, NULL>
  gimple_return <_3>

}



;; Function std::__uniq_ptr_impl<std::filesystem::__cxx11::path::_List::_Impl, std::filesystem::__cxx11::path::_List::_Impl_deleter>::_M_deleter (_ZNSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE10_M_deleterEv, funcdef_no=4260, decl_uid=80198, cgraph_uid=1739, symbol_order=2323)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_4 = this + UNKNOWN

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_4 = { NONLOCAL }
_ZNSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE10_M_deleterEv = { }


Alias information for std::__uniq_ptr_impl<std::filesystem::__cxx11::path::_List::_Impl, std::filesystem::__cxx11::path::_List::_Impl_deleter>::_M_deleter()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to vars: { }
_4, points-to non-local, points-to NULL, points-to vars: { }

struct _Impl_deleter & std::__uniq_ptr_impl<std::filesystem::__cxx11::path::_List::_Impl, std::filesystem::__cxx11::path::_List::_Impl_deleter>::_M_deleter (struct __uniq_ptr_impl * const this)
{
  struct __tuple_element_t & D.98888;
  struct _Impl_deleter & _4;

  <bb 2> :
  gimple_assign <addr_expr, _4, &MEM[(struct _Head_base &)this_2(D)]._M_head_impl, NULL, NULL>
  gimple_return <_4>

}



;; Function std::unique_ptr<std::filesystem::__cxx11::path::_List::_Impl, std::filesystem::__cxx11::path::_List::_Impl_deleter>::get_deleter (_ZNSt10unique_ptrINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE11get_deleterEv, funcdef_no=4223, decl_uid=83091, cgraph_uid=1702, symbol_order=2284)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_4 = this + UNKNOWN

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_4 = { NONLOCAL }
_ZNSt10unique_ptrINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE11get_deleterEv = { }


Alias information for std::unique_ptr<std::filesystem::__cxx11::path::_List::_Impl, std::filesystem::__cxx11::path::_List::_Impl_deleter>::get_deleter()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to vars: { }
_4, points-to non-local, points-to NULL, points-to vars: { }

struct deleter_type & std::unique_ptr<std::filesystem::__cxx11::path::_List::_Impl, std::filesystem::__cxx11::path::_List::_Impl_deleter>::get_deleter (struct unique_ptr * const this)
{
  struct _Impl_deleter & D.98891;
  struct _Impl_deleter & _4;

  <bb 2> :
  gimple_assign <addr_expr, _4, &MEM[(struct _Head_base &)this_2(D)]._M_head_impl, NULL, NULL>
  gimple_return <_4>

}



;; Function std::unique_ptr<std::filesystem::__cxx11::path::_List::_Impl, std::filesystem::__cxx11::path::_List::_Impl_deleter>::~unique_ptr (_ZNSt10unique_ptrINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEED2Ev, funcdef_no=4014, decl_uid=83221, cgraph_uid=1493, symbol_order=2063)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_10 = this
_2 = *this
_8 = this + UNKNOWN
_4 = *this
callescape(14) = NONLOCAL
CALLUSED(15) = callescape(14)
callarg(17) = _8
callarg(17) = callarg(17) + UNKNOWN
callarg(17) = *callarg(17) + UNKNOWN
CALLUSED(15) = callarg(17)
*callarg(17) = callescape(14)
CALLCLOBBERED(16) = callarg(17)
callescape(14) = callarg(17)
ESCAPED = _8
callarg(18) = _4
callarg(18) = callarg(18) + UNKNOWN
callarg(18) = *callarg(18) + UNKNOWN
CALLUSED(15) = callarg(18)
*callarg(18) = callescape(14)
CALLCLOBBERED(16) = callarg(18)
callescape(14) = callarg(18)
ESCAPED = _4
derefaddrtmp(19) = &NULL
*this = derefaddrtmp(19)

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_10 = { NONLOCAL } same as this
_2 = { ESCAPED NONLOCAL }
_8 = { NONLOCAL }
_4 = { ESCAPED NONLOCAL } same as _2
_ZNKSt10filesystem7__cxx114path5_List13_Impl_deleterclEPNS2_5_ImplE = { }
callescape(14) = { ESCAPED NONLOCAL }
CALLUSED(15) = { ESCAPED NONLOCAL } same as callescape(14)
CALLCLOBBERED(16) = { ESCAPED NONLOCAL }
callarg(17) = { ESCAPED NONLOCAL }
callarg(18) = { ESCAPED NONLOCAL }
derefaddrtmp(19) = { NULL }


Alias information for std::unique_ptr<std::filesystem::__cxx11::path::_List::_Impl, std::filesystem::__cxx11::path::_List::_Impl_deleter>::~unique_ptr()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

_2, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_4, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
this_6(D), points-to non-local, points-to vars: { }
_8, points-to non-local, points-to NULL, points-to vars: { }
_10, points-to non-local, points-to NULL, points-to vars: { }

void std::unique_ptr<std::filesystem::__cxx11::path::_List::_Impl, std::filesystem::__cxx11::path::_List::_Impl_deleter>::~unique_ptr (struct unique_ptr * const this)
{
  struct deleter_type & D.98896;
  struct _Impl * & D.98894;
  struct _Impl * & __ptr;
  struct _Impl * _2;
  struct _Impl * _4;
  struct _Impl_deleter & _8;
  struct _Impl * & _10;

  <bb 2> :
  gimple_assign <addr_expr, _10, &MEM[(struct _Head_base &)this_6(D)]._M_head_impl, NULL, NULL>
  gimple_assign <mem_ref, _2, MEM[(struct _Impl * &)this_6(D)], NULL, NULL>
  gimple_cond <ne_expr, _2, 0B, NULL, NULL>
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  gimple_assign <addr_expr, _8, &MEM[(struct _Head_base &)this_6(D)]._M_head_impl, NULL, NULL>
  gimple_assign <mem_ref, _4, MEM[(struct _Impl * &)this_6(D)], NULL, NULL>
  gimple_call <operator(), NULL, _8, _4>

  <bb 4> :
  gimple_assign <integer_cst, MEM[(struct _Impl * &)this_6(D)], 0B, NULL, NULL>
  gimple_assign <constructor, *this_6(D), {CLOBBER}, NULL, NULL>
  gimple_return <NULL>

}



;; Function std::filesystem::__cxx11::path::_List::~_List (_ZNSt10filesystem7__cxx114path5_ListD2Ev, funcdef_no=3375, decl_uid=83255, cgraph_uid=880, symbol_order=1439)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_1 = this + UNKNOWN
_6 = *this
_7 = this + UNKNOWN
callescape(13) = NONLOCAL
CALLUSED(14) = callescape(13)
callarg(16) = _7
callarg(16) = callarg(16) + UNKNOWN
callarg(16) = *callarg(16) + UNKNOWN
CALLUSED(14) = callarg(16)
*callarg(16) = callescape(13)
CALLCLOBBERED(15) = callarg(16)
callescape(13) = callarg(16)
ESCAPED = _7
callarg(17) = _6
callarg(17) = callarg(17) + UNKNOWN
callarg(17) = *callarg(17) + UNKNOWN
CALLUSED(14) = callarg(17)
*callarg(17) = callescape(13)
CALLCLOBBERED(15) = callarg(17)
callescape(13) = callarg(17)
ESCAPED = _6

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_1 = { NONLOCAL }
_6 = { ESCAPED NONLOCAL }
_7 = { NONLOCAL }
_ZNKSt10filesystem7__cxx114path5_List13_Impl_deleterclEPNS2_5_ImplE = { }
callescape(13) = { ESCAPED NONLOCAL }
CALLUSED(14) = { ESCAPED NONLOCAL } same as callescape(13)
CALLCLOBBERED(15) = { ESCAPED NONLOCAL }
callarg(16) = { ESCAPED NONLOCAL }
callarg(17) = { ESCAPED NONLOCAL }


Alias information for std::filesystem::__cxx11::path::_List::~_List()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to NULL, points-to vars: { }
this_2(D), points-to non-local, points-to vars: { }
_6, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_7, points-to non-local, points-to NULL, points-to vars: { }

void std::filesystem::__cxx11::path::_List::~_List (struct _List * const this)
{
  struct unique_ptr * _1;
  struct _Impl * _6;
  struct _Impl_deleter & _7;

  <bb 2> :
  gimple_assign <addr_expr, _1, &this_2(D)->_M_impl, NULL, NULL>
  gimple_assign <mem_ref, _6, MEM[(struct _Impl * &)this_2(D)], NULL, NULL>
  gimple_cond <ne_expr, _6, 0B, NULL, NULL>
    goto <bb 3>; [53.47%]
  else
    goto <bb 4>; [46.53%]

  <bb 3> :
  gimple_assign <addr_expr, _7, &MEM[(struct _Head_base &)this_2(D)]._M_head_impl, NULL, NULL>
  gimple_call <operator(), NULL, _7, _6>

  <bb 4> :
  gimple_assign <constructor, MEM[(struct unique_ptr *)this_2(D)], {CLOBBER}, NULL, NULL>
  gimple_assign <constructor, *this_2(D), {CLOBBER}, NULL, NULL>
  gimple_return <NULL>

}



;; Function std::filesystem::__cxx11::path::~path (_ZNSt10filesystem7__cxx114pathD2Ev, funcdef_no=3377, decl_uid=83351, cgraph_uid=883, symbol_order=1442)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_1 = this + UNKNOWN
_12 = *this + 256
_13 = this + UNKNOWN
callescape(13) = NONLOCAL
CALLUSED(14) = callescape(13)
callarg(16) = _13
callarg(16) = callarg(16) + UNKNOWN
callarg(16) = *callarg(16) + UNKNOWN
CALLUSED(14) = callarg(16)
*callarg(16) = callescape(13)
CALLCLOBBERED(15) = callarg(16)
callescape(13) = callarg(16)
ESCAPED = _13
callarg(17) = _12
callarg(17) = callarg(17) + UNKNOWN
callarg(17) = *callarg(17) + UNKNOWN
CALLUSED(14) = callarg(17)
*callarg(17) = callescape(13)
CALLCLOBBERED(15) = callarg(17)
callescape(13) = callarg(17)
ESCAPED = _12
_2 = this + UNKNOWN
_8 = *this
_9 = this + UNKNOWN
_10 = *this + 128
_11 = _10 + UNKNOWN
_11 = &NONLOCAL
callescape(24) = NONLOCAL
CALLUSED(25) = callescape(24)
callarg(27) = _8
callarg(27) = callarg(27) + UNKNOWN
callarg(27) = *callarg(27) + UNKNOWN
CALLUSED(25) = callarg(27)
*callarg(27) = callescape(24)
CALLCLOBBERED(26) = callarg(27)
callescape(24) = callarg(27)
ESCAPED = _8
callarg(28) = _11
callarg(28) = callarg(28) + UNKNOWN
callarg(28) = *callarg(28) + UNKNOWN
CALLUSED(25) = callarg(28)
*callarg(28) = callescape(24)
CALLCLOBBERED(26) = callarg(28)
callescape(24) = callarg(28)
ESCAPED = _11

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_1 = { NONLOCAL }
_12 = { ESCAPED NONLOCAL }
_13 = { NONLOCAL }
_ZNKSt10filesystem7__cxx114path5_List13_Impl_deleterclEPNS2_5_ImplE = { }
callescape(13) = { ESCAPED NONLOCAL }
CALLUSED(14) = { ESCAPED NONLOCAL } same as callescape(13)
CALLCLOBBERED(15) = { ESCAPED NONLOCAL }
callarg(16) = { ESCAPED NONLOCAL }
callarg(17) = { ESCAPED NONLOCAL }
_2 = { NONLOCAL }
_8 = { ESCAPED NONLOCAL }
_9 = { NONLOCAL }
_10 = { ESCAPED NONLOCAL }
_11 = { ESCAPED NONLOCAL }
_ZdlPvm = { }
callescape(24) = { ESCAPED NONLOCAL }
CALLUSED(25) = { ESCAPED NONLOCAL } same as callescape(24)
CALLCLOBBERED(26) = { ESCAPED NONLOCAL }
callarg(27) = { ESCAPED NONLOCAL }
callarg(28) = { ESCAPED NONLOCAL }


Alias information for std::filesystem::__cxx11::path::~path()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to NULL, points-to vars: { }
_2, points-to non-local, points-to NULL, points-to vars: { }
this_3(D), points-to non-local, points-to vars: { }
_8, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_9, points-to non-local, points-to NULL, points-to vars: { }
_12, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_13, points-to non-local, points-to NULL, points-to vars: { }

void std::filesystem::__cxx11::path::~path (struct path * const this)
{
  struct _List * _1;
  struct string_type * _2;
  char * _8;
  const char[16] * _9;
  long unsigned int _10;
  long unsigned int _11;
  struct _Impl * _12;
  struct _Impl_deleter & _13;

  <bb 2> :
  gimple_assign <addr_expr, _1, &this_3(D)->_M_cmpts, NULL, NULL>
  gimple_assign <mem_ref, _12, MEM[(struct _Impl * &)this_3(D) + 32], NULL, NULL>
  gimple_cond <ne_expr, _12, 0B, NULL, NULL>
    goto <bb 3>; [53.47%]
  else
    goto <bb 4>; [46.53%]

  <bb 3> :
  gimple_assign <addr_expr, _13, &MEM[(struct _Head_base &)this_3(D) + 32]._M_head_impl, NULL, NULL>
  gimple_call <operator(), NULL, _13, _12>

  <bb 4> :
  gimple_assign <constructor, MEM[(struct _List *)this_3(D) + 32B], {CLOBBER}, NULL, NULL>
  gimple_assign <addr_expr, _2, &this_3(D)->_M_pathname, NULL, NULL>
  gimple_assign <component_ref, _8, MEM[(const struct basic_string *)this_3(D)]._M_dataplus._M_p, NULL, NULL>
  gimple_assign <addr_expr, _9, &MEM[(const struct basic_string *)this_3(D)].D.28191._M_local_buf, NULL, NULL>
  gimple_cond <ne_expr, _8, _9, NULL, NULL>
    goto <bb 5>; [53.47%]
  else
    goto <bb 6>; [46.53%]

  <bb 5> :
  gimple_assign <component_ref, _10, MEM[(struct basic_string *)this_3(D)].D.28191._M_allocated_capacity, NULL, NULL>
  gimple_assign <plus_expr, _11, _10, 1, NULL>
  gimple_call <operator delete, NULL, _8, _11>

  <bb 6> :
  gimple_assign <constructor, MEM[(struct basic_string *)this_3(D)], {CLOBBER}, NULL, NULL>
  gimple_assign <constructor, *this_3(D), {CLOBBER}, NULL, NULL>
  gimple_return <NULL>

}



;; Function __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::__normal_iterator (_ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2ERKS1_, funcdef_no=4629, decl_uid=73418, cgraph_uid=2108, symbol_order=2692)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &PARM_NOALIAS(9)
PARM_NOALIAS(9) = &NONLOCAL
__i = &NONLOCAL
_1 = *__i
*this = _1

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
PARM_NOALIAS(9) = { ESCAPED NONLOCAL }
this = { PARM_NOALIAS(9) }
__i = { NONLOCAL }
_1 = { ESCAPED NONLOCAL }


Alias information for __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::__normal_iterator(char* const&)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
this_3(D), points-to vars: { D.98903 } (nonlocal, restrict)
__i_5(D), points-to non-local, points-to vars: { }

void __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::__normal_iterator (struct __normal_iterator * const this, char * const & __i)
{
  char * _1;

  <bb 2> :
  gimple_assign <constructor, *this_3(D), {CLOBBER}, NULL, NULL>
  gimple_assign <mem_ref, _1, *__i_5(D), NULL, NULL>
  gimple_assign <ssa_name, *this_3(D)._M_current, _1, NULL, NULL>
  gimple_return <NULL>

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::begin (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv, funcdef_no=4611, decl_uid=28497, cgraph_uid=2090, symbol_order=2674)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_10 = *this
SR.205_1 = _10
D.97745 = SR.205_1

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_10 = { ESCAPED NONLOCAL }
SR.205_1 = { ESCAPED NONLOCAL } same as _10
D.97745 = { ESCAPED NONLOCAL } same as _10
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv = { }


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::begin()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

SR.205_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
this_3(D), points-to non-local, points-to vars: { }
_10, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

struct iterator std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::begin (struct basic_string * const this)
{
  char * SR.205;
  char * D.98908;
  char * const D.97212;
  struct iterator D.97213;
  struct iterator D.97745;
  char * _10;
  char * const _15(D);

  <bb 2> :
  gimple_assign <component_ref, _10, MEM[(const struct basic_string *)this_3(D)]._M_dataplus._M_p, NULL, NULL>
  gimple_assign <ssa_name, SR.205_1, _10, NULL, NULL>
  gimple_assign <ssa_name, D.97745._M_current, SR.205_1, NULL, NULL>
  gimple_return <D.97745>

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::end (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE3endEv, funcdef_no=4612, decl_uid=28501, cgraph_uid=2091, symbol_order=2675)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_13 = *this
_6 = *this + 64
_3 = _13 + UNKNOWN
SR.207_1 = _3
D.97749 = SR.207_1

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_13 = { ESCAPED NONLOCAL }
_6 = { ESCAPED NONLOCAL }
_3 = { ESCAPED NONLOCAL }
SR.207_1 = { ESCAPED NONLOCAL } same as _3
D.97749 = { ESCAPED NONLOCAL } same as _3
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE3endEv = { }


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::end()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

SR.207_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_3, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
this_5(D), points-to non-local, points-to vars: { }
_13, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

struct iterator std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::end (struct basic_string * const this)
{
  char * SR.207;
  char * D.98916;
  size_type D.98914;
  char * const D.97215;
  struct iterator D.97216;
  struct iterator D.97749;
  char * _3;
  long unsigned int _6;
  char * _13;
  char * const _19(D);

  <bb 2> :
  gimple_assign <component_ref, _13, MEM[(const struct basic_string *)this_5(D)]._M_dataplus._M_p, NULL, NULL>
  gimple_assign <component_ref, _6, MEM[(const struct basic_string *)this_5(D)]._M_string_length, NULL, NULL>
  gimple_assign <pointer_plus_expr, _3, _13, _6, NULL>
  gimple_assign <ssa_name, SR.207_1, _3, NULL, NULL>
  gimple_assign <ssa_name, D.97749._M_current, SR.207_1, NULL, NULL>
  gimple_return <D.97749>

}



;; Function __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::base (_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv, funcdef_no=4631, decl_uid=73405, cgraph_uid=2110, symbol_order=2694)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_2 = this

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_2 = { NONLOCAL } same as this
_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv = { }


Alias information for __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::base() const

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_1(D), points-to non-local, points-to vars: { }
_2, points-to non-local, points-to NULL, points-to vars: { }

char * const & __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::base (const struct __normal_iterator * const this)
{
  char * const & _2;

  <bb 2> :
  gimple_assign <addr_expr, _2, &this_1(D)->_M_current, NULL, NULL>
  gimple_return <_2>

}



;; Function __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::__normal_iterator<char*, void> (_ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2IPcvEERKNS0_IT_S8_EE, funcdef_no=4614, decl_uid=73584, cgraph_uid=2093, symbol_order=2677)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &PARM_NOALIAS(9)
PARM_NOALIAS(9) = &NONLOCAL
__i = &NONLOCAL
_2 = *__i
*this = _2

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
PARM_NOALIAS(9) = { ESCAPED NONLOCAL }
this = { PARM_NOALIAS(9) }
__i = { NONLOCAL }
_2 = { ESCAPED NONLOCAL }


Alias information for __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::__normal_iterator<char*, void>(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const&)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_2, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
this_4(D), points-to vars: { D.98922 } (nonlocal, restrict)
__i_6(D), points-to non-local, points-to vars: { }

void __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::__normal_iterator<char*, void> (struct __normal_iterator * const this, const struct __normal_iterator & __i)
{
  char * const & D.98921;
  char * _2;

  <bb 2> :
  gimple_assign <constructor, *this_4(D), {CLOBBER}, NULL, NULL>
  gimple_assign <mem_ref, _2, MEM[(char * const &)__i_6(D)], NULL, NULL>
  gimple_assign <ssa_name, *this_4(D)._M_current, _2, NULL, NULL>
  gimple_return <NULL>

}



;; Function __gnu_cxx::operator-<char const*, char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > (_ZN9__gnu_cxxmiIPKcPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEDTmicldtfp_4baseEcldtfp0_4baseEERKNS_17__normal_iteratorIT_T1_EERKNSB_IT0_SD_EE, funcdef_no=4632, decl_uid=97229, cgraph_uid=2111, symbol_order=2695)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__lhs = &NONLOCAL
__rhs = &NONLOCAL
_2 = *__lhs
_4 = *__rhs

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__lhs = { NONLOCAL }
__rhs = { NONLOCAL } same as __lhs
_2 = { ESCAPED NONLOCAL }
_4 = { ESCAPED NONLOCAL }
_10 = { }
_ZN9__gnu_cxxmiIPKcPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEDTmicldtfp_4baseEcldtfp0_4baseEERKNS_17__normal_iteratorIT_T1_EERKNSB_IT0_SD_EE = { }


Alias information for __gnu_cxx::operator-<char const*, char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const&, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const&)decltype ((({parm#1}.base)())-(({parm#2}.base)()))

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information

_2, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_4, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
__lhs_6(D), points-to non-local, points-to vars: { }
__rhs_8(D), points-to non-local, points-to vars: { }

__attribute__((nodiscard))
long int __gnu_cxx::operator-<char const*, char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > (const struct __normal_iterator & __lhs, const struct __normal_iterator & __rhs)
{
  const char * const & D.98927;
  char * const & D.98925;
  const char * _2;
  char * _4;
  long int _10;

  <bb 2> :
  gimple_assign <mem_ref, _2, MEM[(const char * const &)__lhs_6(D)], NULL, NULL>
  gimple_assign <mem_ref, _4, MEM[(char * const &)__rhs_8(D)], NULL, NULL>
  gimple_assign <pointer_diff_expr, _10, _2, _4, NULL>
  gimple_return <_10>

}



;; Function __gnu_cxx::operator-<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > (_ZN9__gnu_cxxmiIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_, funcdef_no=4633, decl_uid=97232, cgraph_uid=2112, symbol_order=2696)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__lhs = &NONLOCAL
__rhs = &NONLOCAL
_2 = *__lhs
_4 = *__rhs

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__lhs = { NONLOCAL }
__rhs = { NONLOCAL } same as __lhs
_2 = { ESCAPED NONLOCAL }
_4 = { ESCAPED NONLOCAL }
_10 = { }
_ZN9__gnu_cxxmiIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_ = { }


Alias information for __gnu_cxx::operator-<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const&, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const&)__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::difference_type

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information

_2, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_4, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
__lhs_6(D), points-to non-local, points-to vars: { }
__rhs_8(D), points-to non-local, points-to vars: { }

__attribute__((nodiscard))
difference_type __gnu_cxx::operator-<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > (const struct __normal_iterator & __lhs, const struct __normal_iterator & __rhs)
{
  const char * const & D.98932;
  const char * const & D.98930;
  const char * _2;
  const char * _4;
  difference_type _10;

  <bb 2> :
  gimple_assign <mem_ref, _2, MEM[(const char * const &)__lhs_6(D)], NULL, NULL>
  gimple_assign <mem_ref, _4, MEM[(const char * const &)__rhs_8(D)], NULL, NULL>
  gimple_assign <pointer_diff_expr, _10, _2, _4, NULL>
  gimple_return <_10>

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEN9__gnu_cxx17__normal_iteratorIPKcS4_EES9_PcSA_, funcdef_no=4616, decl_uid=28804, cgraph_uid=2095, symbol_order=2679)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__i1 = &NONLOCAL
__i2 = &NONLOCAL
__k1 = &NONLOCAL
__k2 = &NONLOCAL
__i1_28 = __i1
_23 = *this
SR.216_1 = _23
SR.215_29 = SR.216_1
SR.214_3 = SR.215_29
_20 = __i1_28
_21 = SR.214_3
_2 = _22
_11 = __i2
_10 = __i1_28
_4 = _19
_6 = _5
callescape(29) = NONLOCAL
CALLUSED(30) = callescape(29)
callarg(32) = this
callarg(32) = callarg(32) + UNKNOWN
callarg(32) = *callarg(32) + UNKNOWN
CALLUSED(30) = callarg(32)
*callarg(32) = callescape(29)
CALLCLOBBERED(31) = callarg(32)
callescape(29) = callarg(32)
ESCAPED = this
callarg(33) = _2
callarg(33) = callarg(33) + UNKNOWN
callarg(33) = *callarg(33) + UNKNOWN
CALLUSED(30) = callarg(33)
*callarg(33) = callescape(29)
CALLCLOBBERED(31) = callarg(33)
callescape(29) = callarg(33)
ESCAPED = _2
callarg(34) = _4
callarg(34) = callarg(34) + UNKNOWN
callarg(34) = *callarg(34) + UNKNOWN
CALLUSED(30) = callarg(34)
*callarg(34) = callescape(29)
CALLCLOBBERED(31) = callarg(34)
callescape(29) = callarg(34)
ESCAPED = _4
callarg(35) = __k1
callarg(35) = callarg(35) + UNKNOWN
callarg(35) = *callarg(35) + UNKNOWN
CALLUSED(30) = callarg(35)
*callarg(35) = callescape(29)
CALLCLOBBERED(31) = callarg(35)
callescape(29) = callarg(35)
ESCAPED = __k1
callarg(36) = _6
callarg(36) = callarg(36) + UNKNOWN
callarg(36) = *callarg(36) + UNKNOWN
CALLUSED(30) = callarg(36)
*callarg(36) = callescape(29)
CALLCLOBBERED(31) = callarg(36)
callescape(29) = callarg(36)
ESCAPED = _6
_15 = NONLOCAL
_15 = callarg(32)
_15 = callarg(33)
_15 = callarg(34)
_15 = callarg(35)
_15 = callarg(36)

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__i1 = { NONLOCAL } same as this
__i2 = { NONLOCAL } same as this
__k1 = { NONLOCAL } same as this
__k2 = { NONLOCAL } same as this
__i1_28 = { NONLOCAL } same as this
_23 = { ESCAPED NONLOCAL }
SR.216_1 = { ESCAPED NONLOCAL } same as _23
SR.215_29 = { ESCAPED NONLOCAL } same as _23
SR.214_3 = { ESCAPED NONLOCAL } same as _23
_20 = { NONLOCAL } same as this
_21 = { ESCAPED NONLOCAL } same as _23
_22 = { }
_2 = { }
_11 = { NONLOCAL } same as this
_10 = { NONLOCAL } same as this
_19 = { }
_4 = { }
_5 = { }
_6 = { }
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEmmPKcm = { }
callescape(29) = { ESCAPED NONLOCAL }
CALLUSED(30) = { ESCAPED NONLOCAL } same as callescape(29)
CALLCLOBBERED(31) = { ESCAPED NONLOCAL }
callarg(32) = { ESCAPED NONLOCAL }
callarg(33) = { }
callarg(34) = { }
callarg(35) = { ESCAPED NONLOCAL }
callarg(36) = { }
_15 = { ESCAPED NONLOCAL } same as callescape(29)
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEN9__gnu_cxx17__normal_iteratorIPKcS4_EES9_PcSA_ = { }


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, char*, char*)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

SR.216_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
SR.214_3, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
this_8(D), points-to non-local, points-to vars: { }
_10, points-to non-local, points-to NULL, points-to vars: { }
_11, points-to non-local, points-to NULL, points-to vars: { }
__k2_12(D), points-to non-local, points-to NULL, points-to vars: { }
__k1_13(D), points-to non-local, points-to NULL, points-to vars: { }
_15, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_20, points-to non-local, points-to NULL, points-to vars: { }
_21, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_23, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
__i1_28, points-to non-local, points-to NULL, points-to vars: { }
SR.215_29, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

struct basic_string & std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace (struct basic_string * const this, struct __const_iterator __i1, struct __const_iterator __i2, char * __k1, char * __k2)
{
  char * SR.216;
  char * SR.215;
  char * const SR.214;
  const char * const __i1;
  struct iterator D.98942;
  struct iterator D.98941;
  long int D.98939;
  difference_type D.98936;
  struct iterator D.97226;
  long unsigned int _2;
  long unsigned int _4;
  long int _5;
  long unsigned int _6;
  const char * _10;
  const char * _11;
  struct basic_string & _15;
  long int _19;
  const char * _20;
  char * _21;
  long int _22;
  char * _23;

  <bb 2> :
  gimple_assign <mem_ref, __i1_28, MEM[(struct __normal_iterator *)&__i1], NULL, NULL>
  gimple_assign <component_ref, _23, MEM[(const struct basic_string *)this_8(D)]._M_dataplus._M_p, NULL, NULL>
  gimple_assign <ssa_name, SR.216_1, _23, NULL, NULL>
  gimple_assign <ssa_name, SR.215_29, SR.216_1, NULL, NULL>
  gimple_assign <ssa_name, SR.214_3, SR.215_29, NULL, NULL>
  gimple_assign <ssa_name, _20, __i1_28, NULL, NULL>
  gimple_assign <ssa_name, _21, SR.214_3, NULL, NULL>
  gimple_assign <pointer_diff_expr, _22, _20, _21, NULL>
  gimple_assign <nop_expr, _2, _22, NULL, NULL>
  gimple_assign <mem_ref, _11, MEM[(const char * const &)&__i2], NULL, NULL>
  gimple_assign <ssa_name, _10, __i1_28, NULL, NULL>
  gimple_assign <pointer_diff_expr, _19, _11, _10, NULL>
  gimple_assign <nop_expr, _4, _19, NULL, NULL>
  gimple_assign <pointer_diff_expr, _5, __k2_12(D), __k1_13(D), NULL>
  gimple_assign <nop_expr, _6, _5, NULL, NULL>
  gimple_call <replace, _15, this_8(D), _2, _4, __k1_13(D), _6>

  <bb 3> :
  gimple_return <_15>

  <bb 4> :
gimple_label <<L2>>
  gimple_resx <1>

}



;; Function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign<char*, void> (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignIPcvEERS4_T_S8_, funcdef_no=4578, decl_uid=96814, cgraph_uid=2057, symbol_order=2641)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__first = &NONLOCAL
__last = &NONLOCAL
_35 = *this
SR.227_51 = _35
SR.226_10 = SR.227_51
SR.218_11 = SR.226_10
_34 = SR.218_11
SR.220_5 = _34
_31 = *this
_32 = *this + 64
_33 = _31 + UNKNOWN
SR.225_6 = _33
SR.224_9 = SR.225_6
SR.219_54 = SR.224_9
_30 = SR.219_54
SR.221_57 = _30
__i1_58 = SR.220_5
__i2_59 = SR.221_57
__i1_20 = __i1_58
_21 = *this
_23 = _22
_24 = __i2_59
_26 = _25
_28 = _27
callescape(37) = NONLOCAL
CALLUSED(38) = callescape(37)
callarg(40) = this
callarg(40) = callarg(40) + UNKNOWN
callarg(40) = *callarg(40) + UNKNOWN
CALLUSED(38) = callarg(40)
*callarg(40) = callescape(37)
CALLCLOBBERED(39) = callarg(40)
callescape(37) = callarg(40)
ESCAPED = this
callarg(41) = _23
callarg(41) = callarg(41) + UNKNOWN
callarg(41) = *callarg(41) + UNKNOWN
CALLUSED(38) = callarg(41)
*callarg(41) = callescape(37)
CALLCLOBBERED(39) = callarg(41)
callescape(37) = callarg(41)
ESCAPED = _23
callarg(42) = _26
callarg(42) = callarg(42) + UNKNOWN
callarg(42) = *callarg(42) + UNKNOWN
CALLUSED(38) = callarg(42)
*callarg(42) = callescape(37)
CALLCLOBBERED(39) = callarg(42)
callescape(37) = callarg(42)
ESCAPED = _26
callarg(43) = __first
callarg(43) = callarg(43) + UNKNOWN
callarg(43) = *callarg(43) + UNKNOWN
CALLUSED(38) = callarg(43)
*callarg(43) = callescape(37)
CALLCLOBBERED(39) = callarg(43)
callescape(37) = callarg(43)
ESCAPED = __first
callarg(44) = _28
callarg(44) = callarg(44) + UNKNOWN
callarg(44) = *callarg(44) + UNKNOWN
CALLUSED(38) = callarg(44)
*callarg(44) = callescape(37)
CALLCLOBBERED(39) = callarg(44)
callescape(37) = callarg(44)
ESCAPED = _28
_29 = NONLOCAL
_29 = callarg(40)
_29 = callarg(41)
_29 = callarg(42)
_29 = callarg(43)
_29 = callarg(44)

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__first = { NONLOCAL } same as this
__last = { NONLOCAL } same as this
_35 = { ESCAPED NONLOCAL }
SR.227_51 = { ESCAPED NONLOCAL } same as _35
SR.226_10 = { ESCAPED NONLOCAL } same as _35
SR.218_11 = { ESCAPED NONLOCAL } same as _35
_34 = { ESCAPED NONLOCAL } same as _35
SR.220_5 = { ESCAPED NONLOCAL } same as _35
_31 = { ESCAPED NONLOCAL } same as _35
_32 = { ESCAPED NONLOCAL }
_33 = { ESCAPED NONLOCAL }
SR.225_6 = { ESCAPED NONLOCAL } same as _33
SR.224_9 = { ESCAPED NONLOCAL } same as _33
SR.219_54 = { ESCAPED NONLOCAL } same as _33
_30 = { ESCAPED NONLOCAL } same as _33
SR.221_57 = { ESCAPED NONLOCAL } same as _33
__i1_58 = { ESCAPED NONLOCAL } same as _35
__i2_59 = { ESCAPED NONLOCAL } same as _33
__i1_20 = { ESCAPED NONLOCAL } same as _35
_21 = { ESCAPED NONLOCAL } same as _35
_22 = { }
_23 = { }
_24 = { ESCAPED NONLOCAL } same as _33
_25 = { }
_26 = { }
_27 = { }
_28 = { }
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEmmPKcm = { }
callescape(37) = { ESCAPED NONLOCAL }
CALLUSED(38) = { ESCAPED NONLOCAL } same as callescape(37)
CALLCLOBBERED(39) = { ESCAPED NONLOCAL }
callarg(40) = { ESCAPED NONLOCAL }
callarg(41) = { }
callarg(42) = { }
callarg(43) = { ESCAPED NONLOCAL }
callarg(44) = { }
_29 = { ESCAPED NONLOCAL } same as callescape(37)
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignIPcvEERS4_T_S8_ = { }


Alias information for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign<char*, void>(char*, char*)std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to vars: { }
SR.220_5, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
SR.225_6, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
__first_7(D), points-to non-local, points-to NULL, points-to vars: { }
__last_8(D), points-to non-local, points-to NULL, points-to vars: { }
SR.224_9, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
SR.226_10, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
SR.218_11, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
__i1_20, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_21, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_24, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_29, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_30, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_31, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_33, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_34, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_35, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
SR.227_51, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
SR.219_54, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
SR.221_57, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
__i1_58, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
__i2_59, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

struct basic_string & std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign<char*, void> (struct basic_string * const this, char * __first, char * __last)
{
  char * SR.227;
  char * SR.226;
  char * SR.225;
  char * SR.224;
  const char * const __i2;
  const char * const __i1;
  const char * SR.221;
  const char * SR.220;
  char * const SR.219;
  char * const SR.218;
  struct iterator D.98964;
  struct iterator D.98963;
  struct iterator D.98959;
  struct iterator D.98958;
  const char * const __i1;
  struct basic_string & D.98953;
  struct __const_iterator __i1;
  struct __const_iterator __i2;
  struct iterator D.97124;
  struct __const_iterator D.97132;
  struct iterator D.97114;
  struct __const_iterator D.97131;
  char * _21;
  long int _22;
  long unsigned int _23;
  const char * _24;
  long int _25;
  long unsigned int _26;
  long int _27;
  long unsigned int _28;
  struct basic_string & _29;
  char * _30;
  char * _31;
  long unsigned int _32;
  char * _33;
  char * _34;
  char * _35;

  <bb 2> :
  gimple_assign <component_ref, _35, MEM[(const struct basic_string *)this_2(D)]._M_dataplus._M_p, NULL, NULL>
  gimple_assign <ssa_name, SR.227_51, _35, NULL, NULL>
  gimple_assign <ssa_name, SR.226_10, SR.227_51, NULL, NULL>
  gimple_assign <ssa_name, SR.218_11, SR.226_10, NULL, NULL>
  gimple_assign <ssa_name, _34, SR.218_11, NULL, NULL>
  gimple_assign <ssa_name, SR.220_5, _34, NULL, NULL>
  gimple_assign <component_ref, _31, MEM[(const struct basic_string *)this_2(D)]._M_dataplus._M_p, NULL, NULL>
  gimple_assign <component_ref, _32, MEM[(const struct basic_string *)this_2(D)]._M_string_length, NULL, NULL>
  gimple_assign <pointer_plus_expr, _33, _31, _32, NULL>
  gimple_assign <ssa_name, SR.225_6, _33, NULL, NULL>
  gimple_assign <ssa_name, SR.224_9, SR.225_6, NULL, NULL>
  gimple_assign <ssa_name, SR.219_54, SR.224_9, NULL, NULL>
  gimple_assign <ssa_name, _30, SR.219_54, NULL, NULL>
  gimple_assign <ssa_name, SR.221_57, _30, NULL, NULL>
  gimple_assign <ssa_name, __i1_58, SR.220_5, NULL, NULL>
  gimple_assign <ssa_name, __i2_59, SR.221_57, NULL, NULL>
  gimple_assign <ssa_name, __i1_20, __i1_58, NULL, NULL>
  gimple_assign <component_ref, _21, MEM[(const struct basic_string *)this_2(D)]._M_dataplus._M_p, NULL, NULL>
  gimple_assign <pointer_diff_expr, _22, __i1_20, _21, NULL>
  gimple_assign <nop_expr, _23, _22, NULL, NULL>
  gimple_assign <ssa_name, _24, __i2_59, NULL, NULL>
  gimple_assign <pointer_diff_expr, _25, _24, __i1_20, NULL>
  gimple_assign <nop_expr, _26, _25, NULL, NULL>
  gimple_assign <pointer_diff_expr, _27, __last_8(D), __first_7(D), NULL>
  gimple_assign <nop_expr, _28, _27, NULL, NULL>
  gimple_call <replace, _29, this_2(D), _23, _26, __first_7(D), _28>

  <bb 3> :
  gimple_return <_29>

  <bb 4> :
gimple_label <<L5>>
  gimple_resx <4>

  <bb 5> :
gimple_label <<L6>>
  gimple_resx <3>

  <bb 6> :
gimple_label <<L7>>
  gimple_resx <2>

  <bb 7> :
gimple_label <<L8>>
  gimple_resx <1>

}



;; Function std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::str (_ZNKSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEE3strEv, funcdef_no=4541, decl_uid=76494, cgraph_uid=2020, symbol_order=2604)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__ret = &NONLOCAL
_1 = this + UNKNOWN
_25 = __ret + UNKNOWN
*__ret = _25
derefaddrtmp(12) = &NULL
*__ret + 64 = derefaddrtmp(12)
derefaddrtmp(13) = &NULL
*__ret + 128 = derefaddrtmp(13)
_27 = *this + 320
_2 = &NULL
_28 = *this + 192
_23 = _21 + UNKNOWN
_23 = _22 + UNKNOWN
_17 = _28
_24 = _27
_26 = _24
_26 = _17
_36 = *this + 256
_29 = *__ret + 64
_30 = _29
_34 = _33
callescape(30) = NONLOCAL
CALLUSED(31) = callescape(30)
callarg(33) = __ret
callarg(33) = callarg(33) + UNKNOWN
callarg(33) = *callarg(33) + UNKNOWN
CALLUSED(31) = callarg(33)
*callarg(33) = callescape(30)
CALLCLOBBERED(32) = callarg(33)
callescape(30) = callarg(33)
ESCAPED = __ret
callarg(34) = &NULL
callarg(34) = callarg(34) + UNKNOWN
callarg(34) = *callarg(34) + UNKNOWN
CALLUSED(31) = callarg(34)
*callarg(34) = callescape(30)
CALLCLOBBERED(32) = callarg(34)
callescape(30) = callarg(34)
ESCAPED = &NULL
callarg(35) = _29
callarg(35) = callarg(35) + UNKNOWN
callarg(35) = *callarg(35) + UNKNOWN
CALLUSED(31) = callarg(35)
*callarg(35) = callescape(30)
CALLCLOBBERED(32) = callarg(35)
callescape(30) = callarg(35)
ESCAPED = _29
callarg(36) = _36
callarg(36) = callarg(36) + UNKNOWN
callarg(36) = *callarg(36) + UNKNOWN
CALLUSED(31) = callarg(36)
*callarg(36) = callescape(30)
CALLCLOBBERED(32) = callarg(36)
callescape(30) = callarg(36)
ESCAPED = _36
callarg(37) = _34
callarg(37) = callarg(37) + UNKNOWN
callarg(37) = *callarg(37) + UNKNOWN
CALLUSED(31) = callarg(37)
*callarg(37) = callescape(30)
CALLCLOBBERED(32) = callarg(37)
callescape(30) = callarg(37)
ESCAPED = _34
_35 = NONLOCAL
_35 = callarg(33)
_35 = callarg(34)
_35 = callarg(35)
_35 = callarg(36)
_35 = callarg(37)
_4 = this + UNKNOWN
callescape(41) = NONLOCAL
CALLUSED(42) = callescape(41)
callarg(44) = __ret
callarg(44) = callarg(44) + UNKNOWN
callarg(44) = *callarg(44) + UNKNOWN
CALLUSED(42) = callarg(44)
*callarg(44) = callescape(41)
CALLCLOBBERED(43) = callarg(44)
callescape(41) = callarg(44)
ESCAPED = __ret
callarg(45) = _4
callarg(45) = callarg(45) + UNKNOWN
callarg(45) = *callarg(45) + UNKNOWN
CALLUSED(42) = callarg(45)
*callarg(45) = callescape(41)
CALLCLOBBERED(43) = callarg(45)
callescape(41) = callarg(45)
ESCAPED = _4
_37 = *__ret
_38 = __ret + UNKNOWN
_39 = *__ret + 128
_40 = _39 + UNKNOWN
_40 = &NONLOCAL
callescape(52) = NONLOCAL
CALLUSED(53) = callescape(52)
callarg(55) = _37
callarg(55) = callarg(55) + UNKNOWN
callarg(55) = *callarg(55) + UNKNOWN
CALLUSED(53) = callarg(55)
*callarg(55) = callescape(52)
CALLCLOBBERED(54) = callarg(55)
callescape(52) = callarg(55)
ESCAPED = _37
callarg(56) = _40
callarg(56) = callarg(56) + UNKNOWN
callarg(56) = *callarg(56) + UNKNOWN
CALLUSED(53) = callarg(56)
*callarg(56) = callescape(52)
CALLCLOBBERED(54) = callarg(56)
callescape(52) = callarg(56)
ESCAPED = _40

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__ret = { NONLOCAL } same as this
_1 = { NONLOCAL }
_25 = { NONLOCAL }
derefaddrtmp(12) = { NULL }
derefaddrtmp(13) = { NULL } same as derefaddrtmp(12)
D.96746 = { }
_27 = { ESCAPED NONLOCAL }
_2 = { NULL } same as derefaddrtmp(12)
_28 = { ESCAPED NONLOCAL }
_21 = { }
_22 = { }
_23 = { }
_17 = { ESCAPED NONLOCAL } same as _28
_24 = { ESCAPED NONLOCAL } same as _27
_26 = { ESCAPED NONLOCAL }
_36 = { ESCAPED NONLOCAL }
_29 = { ESCAPED NONLOCAL }
_30 = { ESCAPED NONLOCAL } same as _29
_33 = { }
_34 = { }
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEmmPKcm = { }
callescape(30) = { NULL ESCAPED NONLOCAL }
CALLUSED(31) = { NULL ESCAPED NONLOCAL } same as callescape(30)
CALLCLOBBERED(32) = { NULL ESCAPED NONLOCAL }
callarg(33) = { ESCAPED NONLOCAL }
callarg(34) = { NULL }
callarg(35) = { ESCAPED NONLOCAL }
callarg(36) = { ESCAPED NONLOCAL }
callarg(37) = { }
_35 = { NULL ESCAPED NONLOCAL } same as callescape(30)
_4 = { NONLOCAL }
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_ = { }
callescape(41) = { ESCAPED NONLOCAL }
CALLUSED(42) = { ESCAPED NONLOCAL } same as callescape(41)
CALLCLOBBERED(43) = { ESCAPED NONLOCAL }
callarg(44) = { ESCAPED NONLOCAL }
callarg(45) = { ESCAPED NONLOCAL }
_ZNKSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEE3strEv = { }
_37 = { ESCAPED NONLOCAL }
_38 = { NONLOCAL }
_39 = { ESCAPED NONLOCAL }
_40 = { ESCAPED NONLOCAL }
_ZdlPvm = { }
callescape(52) = { ESCAPED NONLOCAL }
CALLUSED(53) = { ESCAPED NONLOCAL } same as callescape(52)
CALLCLOBBERED(54) = { ESCAPED NONLOCAL }
callarg(55) = { ESCAPED NONLOCAL }
callarg(56) = { ESCAPED NONLOCAL }


Alias information for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::str() const

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to NULL, points-to vars: { }
_2, points-to NULL, points-to vars: { }
_4, points-to non-local, points-to NULL, points-to vars: { }
this_7(D), points-to non-local, points-to vars: { }
__ret_10(D), points-to non-local, points-to NULL, points-to vars: { }
_17, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_24, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_25, points-to non-local, points-to NULL, points-to vars: { }
_26, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_27, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_28, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_35, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_36, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_37, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_38, points-to non-local, points-to NULL, points-to vars: { }

struct __string_type std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::str (const struct basic_stringbuf * const this)
{
  struct allocator_type & retvalptr.229;
  char_type * D.98994;
  char_type * D.98988;
  char_type * D.98986;
  char_type * __pptr;
  char_type * __egptr;
  char_type * D.98979;
  char_type * __hi;
  struct allocator_type D.96746;
  const struct __string_type * _1;
  char_type * _2;
  const struct __string_type * _4;
  char_type * _17;
  bool _21;
  bool _22;
  bool _23;
  char_type * _24;
  char[16] * _25;
  char_type * _26;
  char_type * _27;
  char_type * _28;
  long unsigned int _29;
  signed long _30;
  long int _33;
  long unsigned int _34;
  struct basic_string & _35;
  char_type * _36;
  char * _37;
  const char[16] * _38;
  long unsigned int _39;
  long unsigned int _40;

  <bb 2> :
  gimple_assign <addr_expr, _1, &this_7(D)->_M_string, NULL, NULL>
  gimple_assign <addr_expr, _25, &MEM[(struct basic_string *)__ret_10(D)].D.28191._M_local_buf, NULL, NULL>
  gimple_assign <ssa_name, MEM[(struct _Alloc_hider *)__ret_10(D)]._M_p, _25, NULL, NULL>
  gimple_assign <integer_cst, MEM[(struct basic_string *)__ret_10(D)]._M_string_length, 0, NULL, NULL>
  gimple_assign <integer_cst, MEM[(char_type &)__ret_10(D) + 16], 0, NULL, NULL>
  gimple_assign <constructor, D.96746, {CLOBBER(eol)}, NULL, NULL>
  gimple_assign <component_ref, _27, MEM[(const struct basic_streambuf *)this_7(D)]._M_out_cur, NULL, NULL>
  gimple_cond <ne_expr, _27, 0B, NULL, NULL>
    goto <bb 4>; [73.78%]
  else
    goto <bb 3>; [26.22%]

  <bb 3> :
  # gimple_phi <_2, 0B(2)>
  goto <bb 8>; [100.00%]

  <bb 4> :
  gimple_assign <component_ref, _28, MEM[(const struct basic_streambuf *)this_7(D)]._M_in_end, NULL, NULL>
  gimple_assign <eq_expr, _21, _28, 0B, NULL>
  gimple_assign <gt_expr, _22, _27, _28, NULL>
  gimple_assign <bit_ior_expr, _23, _21, _22, NULL>
  gimple_cond <ne_expr, _23, 0, NULL, NULL>
    goto <bb 6>; [50.00%]
  else
    goto <bb 5>; [50.00%]

  <bb 5> :
  # gimple_phi <_17, _28(4)>
  goto <bb 7>; [100.00%]

  <bb 6> :
  # gimple_phi <_24, _27(4)>
  gimple_cond <ne_expr, _24, 0B, NULL, NULL>
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # gimple_phi <_26, _24(6), _17(5)>
  gimple_assign <component_ref, _36, MEM[(const struct basic_streambuf *)this_7(D)]._M_out_beg, NULL, NULL>
  gimple_assign <component_ref, _29, MEM[(const struct basic_string *)__ret_10(D)]._M_string_length, NULL, NULL>
  gimple_assign <nop_expr, _30, _29, NULL, NULL>
  gimple_assign <pointer_diff_expr, _33, _26, _36, NULL>
  gimple_assign <nop_expr, _34, _33, NULL, NULL>
  gimple_call <replace, _35, __ret_10(D), 0, _29, _36, _34>
  goto <bb 9>; [100.00%]

  <bb 8> :
  gimple_assign <addr_expr, _4, &this_7(D)->_M_string, NULL, NULL>
  gimple_call <_M_assign, NULL, __ret_10(D), _4>

  <bb 9> :
  gimple_return <__ret_10(D)>

  <bb 10> :
gimple_label <<L4>>
  gimple_assign <component_ref, _37, MEM[(const struct basic_string *)__ret_10(D)]._M_dataplus._M_p, NULL, NULL>
  gimple_assign <addr_expr, _38, &MEM[(const struct basic_string *)__ret_10(D)].D.28191._M_local_buf, NULL, NULL>
  gimple_cond <ne_expr, _37, _38, NULL, NULL>
    goto <bb 11>; [53.47%]
  else
    goto <bb 12>; [46.53%]

  <bb 11> :
  gimple_assign <component_ref, _39, MEM[(struct basic_string *)__ret_10(D)].D.28191._M_allocated_capacity, NULL, NULL>
  gimple_assign <plus_expr, _40, _39, 1, NULL>
  gimple_call <operator delete, NULL, _37, _40>

  <bb 12> :
  gimple_resx <3>

}



;; Function std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::str (_ZNKSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEE3strEv, funcdef_no=4465, decl_uid=76809, cgraph_uid=1944, symbol_order=2528)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
D.96338 = &NONLOCAL
_1 = this + UNKNOWN
callescape(12) = NONLOCAL
CALLUSED(13) = callescape(12)
callarg(15) = _1
callarg(15) = callarg(15) + UNKNOWN
callarg(15) = *callarg(15) + UNKNOWN
CALLUSED(13) = callarg(15)
*callarg(15) = callescape(12)
CALLCLOBBERED(14) = callarg(15)
callescape(12) = callarg(15)
ESCAPED = _1
callescape(12) = D.96338
ESCAPED = D.96338
*D.96338 + UNKNOWN = NONLOCAL
*D.96338 + UNKNOWN = callarg(15)
*D.96338 + UNKNOWN = D.96338

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
D.96338 = { NONLOCAL } same as this
_1 = { NONLOCAL }
_ZNKSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEE3strEv = { }
callescape(12) = { ESCAPED NONLOCAL }
CALLUSED(13) = { ESCAPED NONLOCAL } same as callescape(12)
CALLCLOBBERED(14) = { ESCAPED NONLOCAL } same as callarg(15)
callarg(15) = { ESCAPED NONLOCAL }
_ZNKSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEE3strEv = { }


Alias information for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::str() const

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to NULL, points-to vars: { }
this_2(D), points-to non-local, points-to vars: { }
_4(D), points-to non-local, points-to NULL, points-to vars: { }

struct __string_type std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::str (const struct basic_ostringstream * const this)
{
  const struct __stringbuf_type * _1;
  struct __string_type & _4(D);

  <bb 2> :
  gimple_assign <addr_expr, _1, &this_2(D)->_M_stringbuf, NULL, NULL>
  gimple_call <str, *_4(D), _1> [return slot optimization]
  gimple_return <_4(D)>

}



;; Function std::__detail::operator<< <char, std::char_traits<char>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&> (_ZNSt8__detaillsIcSt11char_traitsIcERKNSt7__cxx1112basic_stringIcS2_SaIcEEEEERSt13basic_ostreamIT_T0_ESD_RKNS_14_Quoted_stringIT1_SA_EE, funcdef_no=4337, decl_uid=93570, cgraph_uid=1816, symbol_order=2400)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__os = &NONLOCAL
__str = &NONLOCAL
callescape(11) = NONLOCAL
CALLUSED(12) = callescape(11)
callarg(14) = &__ostr
callarg(14) = callarg(14) + UNKNOWN
callarg(14) = *callarg(14) + UNKNOWN
CALLUSED(12) = callarg(14)
*callarg(14) = callescape(11)
CALLCLOBBERED(13) = callarg(14)
callescape(11) = callarg(14)
ESCAPED = &__ostr
_1 = *__str + 64
callescape(18) = NONLOCAL
CALLUSED(19) = callescape(18)
callarg(21) = &__ostr
callarg(21) = callarg(21) + UNKNOWN
callarg(21) = *callarg(21) + UNKNOWN
CALLUSED(19) = callarg(21)
*callarg(21) = callescape(18)
CALLCLOBBERED(20) = callarg(21)
callescape(18) = callarg(21)
ESCAPED = &__ostr
callarg(22) = _1
callarg(22) = callarg(22) + UNKNOWN
callarg(22) = *callarg(22) + UNKNOWN
CALLUSED(19) = callarg(22)
*callarg(22) = callescape(18)
CALLCLOBBERED(20) = callarg(22)
callescape(18) = callarg(22)
ESCAPED = _1
__for_range_17 = *__str
_46 = *__for_range_17
SR.238_77 = _46
SR.237_21 = SR.238_77
SR.233_53 = SR.237_21
_20 = *__for_range_17
_36 = *__for_range_17 + 64
_45 = _20 + UNKNOWN
SR.236_64 = _45
SR.235_82 = SR.236_64
SR.234_28 = SR.235_82
_47 = SR.233_52
__c_37 = *_47
_3 = *__str + 64
_4 = *__str + 72
_5 = *__str + 72
callescape(40) = NONLOCAL
CALLUSED(41) = callescape(40)
callarg(43) = &__ostr
callarg(43) = callarg(43) + UNKNOWN
callarg(43) = *callarg(43) + UNKNOWN
CALLUSED(41) = callarg(43)
*callarg(43) = callescape(40)
CALLCLOBBERED(42) = callarg(43)
callescape(40) = callarg(43)
ESCAPED = &__ostr
callarg(44) = _5
callarg(44) = callarg(44) + UNKNOWN
callarg(44) = *callarg(44) + UNKNOWN
CALLUSED(41) = callarg(44)
*callarg(44) = callescape(40)
CALLCLOBBERED(42) = callarg(44)
callescape(40) = callarg(44)
ESCAPED = _5
callescape(45) = NONLOCAL
CALLUSED(46) = callescape(45)
callarg(48) = &__ostr
callarg(48) = callarg(48) + UNKNOWN
callarg(48) = *callarg(48) + UNKNOWN
CALLUSED(46) = callarg(48)
*callarg(48) = callescape(45)
CALLCLOBBERED(47) = callarg(48)
callescape(45) = callarg(48)
ESCAPED = &__ostr
callarg(49) = __c_37
callarg(49) = callarg(49) + UNKNOWN
callarg(49) = *callarg(49) + UNKNOWN
CALLUSED(46) = callarg(49)
*callarg(49) = callescape(45)
CALLCLOBBERED(47) = callarg(49)
callescape(45) = callarg(49)
ESCAPED = __c_37
_48 = SR.233_52
_49 = _48 + 8
SR.233_2 = _49
SR.233_52 = SR.233_53
SR.233_52 = SR.233_2
_50 = SR.233_52
_51 = SR.234_28
_6 = *__str + 64
callescape(56) = NONLOCAL
CALLUSED(57) = callescape(56)
callarg(59) = &__ostr
callarg(59) = callarg(59) + UNKNOWN
callarg(59) = *callarg(59) + UNKNOWN
CALLUSED(57) = callarg(59)
*callarg(59) = callescape(56)
CALLCLOBBERED(58) = callarg(59)
callescape(56) = callarg(59)
ESCAPED = &__ostr
callarg(60) = _6
callarg(60) = callarg(60) + UNKNOWN
callarg(60) = *callarg(60) + UNKNOWN
CALLUSED(57) = callarg(60)
*callarg(60) = callescape(56)
CALLCLOBBERED(58) = callarg(60)
callescape(56) = callarg(60)
ESCAPED = _6
callescape(62) = NONLOCAL
CALLUSED(63) = callescape(62)
callarg(65) = &__ostr
callarg(65) = callarg(65) + UNKNOWN
callarg(65) = *callarg(65) + UNKNOWN
CALLUSED(63) = callarg(65)
*callarg(65) = callescape(62)
CALLCLOBBERED(64) = callarg(65)
callescape(62) = callarg(65)
ESCAPED = &__ostr
callescape(62) = &D.95691.0+64
ESCAPED = &D.95691.0+64
allalltmp(68) = NONLOCAL
allalltmp(68) = callarg(65)
allalltmp(68) = &D.95691.0+64
D.95691.0+64 = allalltmp(68)
D.95691.64+192 = allalltmp(68)
_55 = D.95691.0+64
_56 = D.95691.64+192
_57 = _56
callescape(73) = NONLOCAL
CALLUSED(74) = callescape(73)
callarg(76) = __os
callarg(76) = callarg(76) + UNKNOWN
callarg(76) = *callarg(76) + UNKNOWN
CALLUSED(74) = callarg(76)
*callarg(76) = callescape(73)
CALLCLOBBERED(75) = callarg(76)
callescape(73) = callarg(76)
ESCAPED = __os
callarg(77) = _55
callarg(77) = callarg(77) + UNKNOWN
callarg(77) = *callarg(77) + UNKNOWN
CALLUSED(74) = callarg(77)
*callarg(77) = callescape(73)
CALLCLOBBERED(75) = callarg(77)
callescape(73) = callarg(77)
ESCAPED = _55
callarg(78) = _57
callarg(78) = callarg(78) + UNKNOWN
callarg(78) = *callarg(78) + UNKNOWN
CALLUSED(74) = callarg(78)
*callarg(78) = callescape(73)
CALLCLOBBERED(75) = callarg(78)
callescape(73) = callarg(78)
ESCAPED = _57
_58 = NONLOCAL
_58 = callarg(76)
_58 = callarg(77)
_58 = callarg(78)
_59 = D.95691.0+64
_61 = D.95691.64+192
_62 = _61 + UNKNOWN
_62 = &NONLOCAL
callescape(84) = NONLOCAL
CALLUSED(85) = callescape(84)
callarg(87) = _59
callarg(87) = callarg(87) + UNKNOWN
callarg(87) = *callarg(87) + UNKNOWN
CALLUSED(85) = callarg(87)
*callarg(87) = callescape(84)
CALLCLOBBERED(86) = callarg(87)
callescape(84) = callarg(87)
ESCAPED = _59
callarg(88) = _62
callarg(88) = callarg(88) + UNKNOWN
callarg(88) = *callarg(88) + UNKNOWN
CALLUSED(85) = callarg(88)
*callarg(88) = callescape(84)
CALLCLOBBERED(86) = callarg(88)
callescape(84) = callarg(88)
ESCAPED = _62
callescape(90) = NONLOCAL
CALLUSED(91) = callescape(90)
callarg(93) = &__ostr
callarg(93) = callarg(93) + UNKNOWN
callarg(93) = *callarg(93) + UNKNOWN
CALLUSED(91) = callarg(93)
*callarg(93) = callescape(90)
CALLCLOBBERED(92) = callarg(93)
callescape(90) = callarg(93)
ESCAPED = &__ostr
_63 = D.95691.0+64
_65 = D.95691.64+192
_66 = _65 + UNKNOWN
_66 = &NONLOCAL
callescape(98) = NONLOCAL
CALLUSED(99) = callescape(98)
callarg(101) = _63
callarg(101) = callarg(101) + UNKNOWN
callarg(101) = *callarg(101) + UNKNOWN
CALLUSED(99) = callarg(101)
*callarg(101) = callescape(98)
CALLCLOBBERED(100) = callarg(101)
callescape(98) = callarg(101)
ESCAPED = _63
callarg(102) = _66
callarg(102) = callarg(102) + UNKNOWN
callarg(102) = *callarg(102) + UNKNOWN
CALLUSED(99) = callarg(102)
*callarg(102) = callescape(98)
CALLCLOBBERED(100) = callarg(102)
callescape(98) = callarg(102)
ESCAPED = _66
callescape(103) = NONLOCAL
CALLUSED(104) = callescape(103)
callarg(106) = &__ostr
callarg(106) = callarg(106) + UNKNOWN
callarg(106) = *callarg(106) + UNKNOWN
CALLUSED(104) = callarg(106)
*callarg(106) = callescape(103)
CALLCLOBBERED(105) = callarg(106)
callescape(103) = callarg(106)
ESCAPED = &__ostr

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL __ostr D.95691.0+64 D.95691.64+192 }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__ostr = { ESCAPED NONLOCAL __ostr D.95691.0+64 D.95691.64+192 }
D.95691.0+64 = { ESCAPED NONLOCAL __ostr D.95691.0+64 D.95691.64+192 } same as _55
D.95691.64+192 = { ESCAPED NONLOCAL __ostr D.95691.0+64 D.95691.64+192 }
__os = { NONLOCAL }
__str = { NONLOCAL } same as __os
_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEC1Ev = { }
callescape(11) = { ESCAPED NONLOCAL __ostr D.95691.0+64 D.95691.64+192 }
CALLUSED(12) = { ESCAPED NONLOCAL __ostr D.95691.0+64 D.95691.64+192 } same as callescape(11)
CALLCLOBBERED(13) = { ESCAPED NONLOCAL __ostr D.95691.0+64 D.95691.64+192 } same as callarg(14)
callarg(14) = { ESCAPED NONLOCAL __ostr D.95691.0+64 D.95691.64+192 }
_1 = { ESCAPED NONLOCAL }
_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c = { }
callescape(18) = { ESCAPED NONLOCAL __ostr D.95691.0+64 D.95691.64+192 }
CALLUSED(19) = { ESCAPED NONLOCAL __ostr D.95691.0+64 D.95691.64+192 } same as callescape(18)
CALLCLOBBERED(20) = { ESCAPED NONLOCAL __ostr D.95691.0+64 D.95691.64+192 }
callarg(21) = { ESCAPED NONLOCAL __ostr D.95691.0+64 D.95691.64+192 }
callarg(22) = { ESCAPED NONLOCAL }
__for_range_17 = { ESCAPED NONLOCAL }
_46 = { ESCAPED NONLOCAL }
SR.238_77 = { ESCAPED NONLOCAL } same as _46
SR.237_21 = { ESCAPED NONLOCAL } same as _46
SR.233_53 = { ESCAPED NONLOCAL } same as _46
_20 = { ESCAPED NONLOCAL } same as _46
_36 = { ESCAPED NONLOCAL }
_45 = { ESCAPED NONLOCAL }
SR.236_64 = { ESCAPED NONLOCAL } same as _45
SR.235_82 = { ESCAPED NONLOCAL } same as _45
SR.234_28 = { ESCAPED NONLOCAL } same as _45
_47 = { ESCAPED NONLOCAL }
SR.233_52 = { ESCAPED NONLOCAL } same as _47
__c_37 = { ESCAPED NONLOCAL }
_3 = { ESCAPED NONLOCAL }
_4 = { ESCAPED NONLOCAL }
_5 = { ESCAPED NONLOCAL }
callescape(40) = { ESCAPED NONLOCAL __ostr D.95691.0+64 D.95691.64+192 }
CALLUSED(41) = { ESCAPED NONLOCAL __ostr D.95691.0+64 D.95691.64+192 } same as callescape(40)
CALLCLOBBERED(42) = { ESCAPED NONLOCAL __ostr D.95691.0+64 D.95691.64+192 }
callarg(43) = { ESCAPED NONLOCAL __ostr D.95691.0+64 D.95691.64+192 }
callarg(44) = { ESCAPED NONLOCAL }
callescape(45) = { ESCAPED NONLOCAL __ostr D.95691.0+64 D.95691.64+192 }
CALLUSED(46) = { ESCAPED NONLOCAL __ostr D.95691.0+64 D.95691.64+192 } same as callescape(45)
CALLCLOBBERED(47) = { ESCAPED NONLOCAL __ostr D.95691.0+64 D.95691.64+192 }
callarg(48) = { ESCAPED NONLOCAL __ostr D.95691.0+64 D.95691.64+192 }
callarg(49) = { ESCAPED NONLOCAL }
_48 = { ESCAPED NONLOCAL } same as _47
_49 = { ESCAPED NONLOCAL }
SR.233_2 = { ESCAPED NONLOCAL } same as _49
_50 = { ESCAPED NONLOCAL } same as _47
_51 = { ESCAPED NONLOCAL } same as _45
_6 = { ESCAPED NONLOCAL }
callescape(56) = { ESCAPED NONLOCAL __ostr D.95691.0+64 D.95691.64+192 }
CALLUSED(57) = { ESCAPED NONLOCAL __ostr D.95691.0+64 D.95691.64+192 } same as callescape(56)
CALLCLOBBERED(58) = { ESCAPED NONLOCAL __ostr D.95691.0+64 D.95691.64+192 }
callarg(59) = { ESCAPED NONLOCAL __ostr D.95691.0+64 D.95691.64+192 }
callarg(60) = { ESCAPED NONLOCAL }
_ZNKSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEE3strEv = { }
callescape(62) = { ESCAPED NONLOCAL __ostr D.95691.0+64 D.95691.64+192 }
CALLUSED(63) = { ESCAPED NONLOCAL __ostr D.95691.0+64 D.95691.64+192 } same as callescape(62)
CALLCLOBBERED(64) = { ESCAPED NONLOCAL __ostr D.95691.0+64 D.95691.64+192 } same as callarg(65)
callarg(65) = { ESCAPED NONLOCAL __ostr D.95691.0+64 D.95691.64+192 }
allalltmp(68) = { ESCAPED NONLOCAL __ostr D.95691.0+64 D.95691.64+192 } same as callescape(62)
_55 = { ESCAPED NONLOCAL __ostr D.95691.0+64 D.95691.64+192 }
_56 = { ESCAPED NONLOCAL __ostr D.95691.0+64 D.95691.64+192 } same as D.95691.64+192
_57 = { ESCAPED NONLOCAL __ostr D.95691.0+64 D.95691.64+192 } same as D.95691.64+192
_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l = { }
callescape(73) = { ESCAPED NONLOCAL __ostr D.95691.0+64 D.95691.64+192 }
CALLUSED(74) = { ESCAPED NONLOCAL __ostr D.95691.0+64 D.95691.64+192 } same as callescape(73)
CALLCLOBBERED(75) = { ESCAPED NONLOCAL __ostr D.95691.0+64 D.95691.64+192 } same as callescape(73)
callarg(76) = { ESCAPED NONLOCAL }
callarg(77) = { ESCAPED NONLOCAL __ostr D.95691.0+64 D.95691.64+192 }
callarg(78) = { ESCAPED NONLOCAL __ostr D.95691.0+64 D.95691.64+192 }
_58 = { ESCAPED NONLOCAL __ostr D.95691.0+64 D.95691.64+192 } same as callescape(73)
_59 = { ESCAPED NONLOCAL __ostr D.95691.0+64 D.95691.64+192 } same as _55
_61 = { ESCAPED NONLOCAL __ostr D.95691.0+64 D.95691.64+192 } same as D.95691.64+192
_62 = { ESCAPED NONLOCAL __ostr D.95691.0+64 D.95691.64+192 }
_ZdlPvm = { }
callescape(84) = { ESCAPED NONLOCAL __ostr D.95691.0+64 D.95691.64+192 }
CALLUSED(85) = { ESCAPED NONLOCAL __ostr D.95691.0+64 D.95691.64+192 } same as callescape(84)
CALLCLOBBERED(86) = { ESCAPED NONLOCAL __ostr D.95691.0+64 D.95691.64+192 } same as callescape(84)
callarg(87) = { ESCAPED NONLOCAL __ostr D.95691.0+64 D.95691.64+192 }
callarg(88) = { ESCAPED NONLOCAL __ostr D.95691.0+64 D.95691.64+192 }
_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEED1Ev = { }
callescape(90) = { ESCAPED NONLOCAL __ostr D.95691.0+64 D.95691.64+192 }
CALLUSED(91) = { ESCAPED NONLOCAL __ostr D.95691.0+64 D.95691.64+192 } same as callescape(90)
CALLCLOBBERED(92) = { ESCAPED NONLOCAL __ostr D.95691.0+64 D.95691.64+192 } same as callarg(93)
callarg(93) = { ESCAPED NONLOCAL __ostr D.95691.0+64 D.95691.64+192 }
_ZNSt8__detaillsIcSt11char_traitsIcERKNSt7__cxx1112basic_stringIcS2_SaIcEEEEERSt13basic_ostreamIT_T0_ESD_RKNS_14_Quoted_stringIT1_SA_EE = { }
_63 = { ESCAPED NONLOCAL __ostr D.95691.0+64 D.95691.64+192 } same as _55
_65 = { ESCAPED NONLOCAL __ostr D.95691.0+64 D.95691.64+192 } same as D.95691.64+192
_66 = { ESCAPED NONLOCAL __ostr D.95691.0+64 D.95691.64+192 }
callescape(98) = { ESCAPED NONLOCAL __ostr D.95691.0+64 D.95691.64+192 }
CALLUSED(99) = { ESCAPED NONLOCAL __ostr D.95691.0+64 D.95691.64+192 } same as callescape(98)
CALLCLOBBERED(100) = { ESCAPED NONLOCAL __ostr D.95691.0+64 D.95691.64+192 } same as callescape(98)
callarg(101) = { ESCAPED NONLOCAL __ostr D.95691.0+64 D.95691.64+192 }
callarg(102) = { ESCAPED NONLOCAL __ostr D.95691.0+64 D.95691.64+192 }
callescape(103) = { ESCAPED NONLOCAL __ostr D.95691.0+64 D.95691.64+192 }
CALLUSED(104) = { ESCAPED NONLOCAL __ostr D.95691.0+64 D.95691.64+192 } same as callescape(103)
CALLCLOBBERED(105) = { ESCAPED NONLOCAL __ostr D.95691.0+64 D.95691.64+192 } same as callarg(106)
callarg(106) = { ESCAPED NONLOCAL __ostr D.95691.0+64 D.95691.64+192 }


Alias information for std::__detail::operator<< <char, std::char_traits<char>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(std::basic_ostream<char, std::char_traits<char> >&, std::__detail::_Quoted_string<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char> const&)std::basic_ostream<char, std::char_traits<char> >&

Aliased symbols

__ostr, UID D.95607, struct basic_ostringstream, is addressable
D.95691, UID D.95691, struct __string_type, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.95607 D.95691 } (escaped)

Flow-insensitive points-to information

SR.233_2, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
__str_15(D), points-to non-local, points-to vars: { }
__for_range_17, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_20, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
SR.237_21, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
__os_26(D), points-to non-local, points-to vars: { }
SR.234_28, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_45, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_46, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_47, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_48, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_49, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_50, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_51, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
SR.233_52, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
SR.233_53, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_55, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.95607 D.95691 } (escaped)
_58, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.95607 D.95691 } (escaped)
_59, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.95607 D.95691 } (escaped)
_63, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.95607 D.95691 } (escaped)
SR.236_64, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
SR.238_77, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
SR.235_82, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

struct basic_ostream & std::__detail::operator<< <char, std::char_traits<char>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&> (struct basic_ostream & __os, const struct _Quoted_string & __str)
{
  const char * SR.238;
  const char * SR.237;
  const char * SR.236;
  const char * SR.235;
  const char * const SR.234;
  const char * SR.233;
  struct __string_type & retvalptr.232;
  struct basic_ostream & D.99018;
  bool D.99013;
  const char & D.99008;
  struct const_iterator D.99006;
  struct const_iterator D.99005;
  struct const_iterator D.99003;
  struct const_iterator D.99002;
  struct const_iterator __for_end;
  struct const_iterator __for_begin;
  const struct basic_string & __for_range;
  char __c;
  struct basic_ostringstream __ostr;
  struct __string_type D.95691;
  char _1;
  char _3;
  char _4;
  char _5;
  char _6;
  char * _20;
  long unsigned int _36;
  char * _45;
  char * _46;
  const char & _47;
  const char * _48;
  const char * _49;
  const char * _50;
  const char * _51;
  char * _55;
  long unsigned int _56;
  long int _57;
  struct basic_ostream & _58;
  char * _59;
  long unsigned int _61;
  long unsigned int _62;
  char * _63;
  long unsigned int _65;
  long unsigned int _66;

  <bb 2> :
  gimple_call <__ct_comp , NULL, &__ostr>

  <bb 3> :
  gimple_assign <component_ref, _1, __str_15(D)->_M_delim, NULL, NULL>
  gimple_call <operator<<, NULL, &__ostr.D.76876, _1>

  <bb 4> :
  gimple_assign <component_ref, __for_range_17, __str_15(D)->_M_string, NULL, NULL>
  gimple_assign <component_ref, _46, __for_range_17->_M_dataplus._M_p, NULL, NULL>
  gimple_assign <ssa_name, SR.238_77, _46, NULL, NULL>
  gimple_assign <ssa_name, SR.237_21, SR.238_77, NULL, NULL>
  gimple_assign <ssa_name, SR.233_53, SR.237_21, NULL, NULL>
  gimple_assign <component_ref, _20, __for_range_17->_M_dataplus._M_p, NULL, NULL>
  gimple_assign <component_ref, _36, __for_range_17->_M_string_length, NULL, NULL>
  gimple_assign <pointer_plus_expr, _45, _20, _36, NULL>
  gimple_assign <ssa_name, SR.236_64, _45, NULL, NULL>
  gimple_assign <ssa_name, SR.235_82, SR.236_64, NULL, NULL>
  gimple_assign <ssa_name, SR.234_28, SR.235_82, NULL, NULL>
  goto <bb 10>; [INV]

  <bb 5> :
  gimple_assign <ssa_name, _47, SR.233_52, NULL, NULL>
  gimple_assign <mem_ref, __c_37, *_47, NULL, NULL>
  gimple_assign <component_ref, _3, __str_15(D)->_M_delim, NULL, NULL>
  gimple_cond <eq_expr, _3, __c_37, NULL, NULL>
    goto <bb 7>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  gimple_assign <component_ref, _4, __str_15(D)->_M_escape, NULL, NULL>
  gimple_cond <eq_expr, _4, __c_37, NULL, NULL>
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  gimple_assign <component_ref, _5, __str_15(D)->_M_escape, NULL, NULL>
  gimple_call <operator<<, NULL, &__ostr.D.76876, _5>

  <bb 8> :
  gimple_call <operator<<, NULL, &__ostr.D.76876, __c_37>

  <bb 9> :
  gimple_assign <ssa_name, _48, SR.233_52, NULL, NULL>
  gimple_assign <pointer_plus_expr, _49, _48, 1, NULL>
  gimple_assign <ssa_name, SR.233_2, _49, NULL, NULL>

  <bb 10> :
  # gimple_phi <SR.233_52, SR.233_53(4), SR.233_2(9)>
  gimple_assign <ssa_name, _50, SR.233_52, NULL, NULL>
  gimple_assign <ssa_name, _51, SR.234_28, NULL, NULL>
  gimple_cond <ne_expr, _50, _51, NULL, NULL>
    goto <bb 5>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  gimple_assign <component_ref, _6, __str_15(D)->_M_delim, NULL, NULL>
  gimple_call <operator<<, NULL, &__ostr.D.76876, _6>

  <bb 12> :
  gimple_call <str, D.95691, &__ostr._M_stringbuf> [return slot optimization]

  <bb 13> :
  gimple_assign <component_ref, _55, D.95691._M_dataplus._M_p, NULL, NULL>
  gimple_assign <component_ref, _56, D.95691._M_string_length, NULL, NULL>
  gimple_assign <nop_expr, _57, _56, NULL, NULL>
  gimple_call <__ostream_insert, _58, __os_26(D), _55, _57>

  <bb 14> :
  gimple_assign <component_ref, _59, D.95691._M_dataplus._M_p, NULL, NULL>
  gimple_cond <ne_expr, &D.95691.D.28191._M_local_buf, _59, NULL, NULL>
    goto <bb 15>; [53.47%]
  else
    goto <bb 16>; [46.53%]

  <bb 15> :
  gimple_assign <component_ref, _61, D.95691.D.28191._M_allocated_capacity, NULL, NULL>
  gimple_assign <plus_expr, _62, _61, 1, NULL>
  gimple_call <operator delete, NULL, _59, _62>

  <bb 16> :
  gimple_assign <constructor, D.95691, {CLOBBER}, NULL, NULL>
  gimple_assign <constructor, D.95691, {CLOBBER(eol)}, NULL, NULL>
  gimple_call <__dt_comp , NULL, &__ostr>
  gimple_assign <constructor, __ostr, {CLOBBER(eol)}, NULL, NULL>
  gimple_return <_58>

  <bb 17> :
gimple_label <<L11>>
  gimple_resx <3>

  <bb 18> :
gimple_label <<L12>>
  gimple_assign <component_ref, _63, D.95691._M_dataplus._M_p, NULL, NULL>
  gimple_cond <ne_expr, &D.95691.D.28191._M_local_buf, _63, NULL, NULL>
    goto <bb 19>; [53.47%]
  else
    goto <bb 20>; [46.53%]

  <bb 19> :
  gimple_assign <component_ref, _65, D.95691.D.28191._M_allocated_capacity, NULL, NULL>
  gimple_assign <plus_expr, _66, _65, 1, NULL>
  gimple_call <operator delete, NULL, _63, _66>

  <bb 20> :
  gimple_assign <constructor, D.95691, {CLOBBER}, NULL, NULL>
  gimple_resx <6>

  <bb 21> :
gimple_label <<L13>>
  gimple_assign <constructor, D.95691, {CLOBBER(eol)}, NULL, NULL>
  gimple_resx <5>

  <bb 22> :
gimple_label <<L14>>
  gimple_call <__dt_comp , NULL, &__ostr>
  gimple_resx <2>

  <bb 23> :
gimple_label <<L15>>
  gimple_assign <constructor, __ostr, {CLOBBER(eol)}, NULL, NULL>
  gimple_resx <1>

}



;; Function std::filesystem::__cxx11::operator<< <char, std::char_traits<char> > (_ZNSt10filesystem7__cxx11lsIcSt11char_traitsIcEEERSt13basic_ostreamIT_T0_ES8_RKNS0_4pathE, funcdef_no=4095, decl_uid=89137, cgraph_uid=1575, symbol_order=2151)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__os = &NONLOCAL
__p = &NONLOCAL
_10 = *__p
_3 = *__p + 64
callescape(13) = NONLOCAL
CALLUSED(14) = callescape(13)
callarg(16) = &D.93479.0+64
callarg(16) = callarg(16) + UNKNOWN
callarg(16) = *callarg(16) + UNKNOWN
CALLUSED(14) = callarg(16)
*callarg(16) = callescape(13)
CALLCLOBBERED(15) = callarg(16)
callescape(13) = callarg(16)
ESCAPED = &D.93479.0+64
callarg(19) = _10
callarg(19) = callarg(19) + UNKNOWN
callarg(19) = *callarg(19) + UNKNOWN
CALLUSED(14) = callarg(19)
*callarg(19) = callescape(13)
CALLCLOBBERED(15) = callarg(19)
callescape(13) = callarg(19)
ESCAPED = _10
callarg(20) = _3
callarg(20) = callarg(20) + UNKNOWN
callarg(20) = *callarg(20) + UNKNOWN
CALLUSED(14) = callarg(20)
callarg(21) = &D.93478
callarg(21) = callarg(21) + UNKNOWN
callarg(21) = *callarg(21) + UNKNOWN
CALLUSED(14) = callarg(21)
SR.244_16 = &D.93479.0+64
SR.245_21 = &NONLOCAL
SR.246_14 = &NONLOCAL
SR.241_25 = SR.244_16
SR.242_15 = SR.245_21
SR.243_9 = SR.246_14
D.93569.0+64 = SR.241_25
D.93569.64+16 = SR.242_15
D.93569.64+16 = SR.243_9
callescape(32) = NONLOCAL
CALLUSED(33) = callescape(32)
callarg(35) = __os
callarg(35) = callarg(35) + UNKNOWN
callarg(35) = *callarg(35) + UNKNOWN
CALLUSED(33) = callarg(35)
*callarg(35) = callescape(32)
CALLCLOBBERED(34) = callarg(35)
callescape(32) = callarg(35)
ESCAPED = __os
callarg(36) = &D.93569.0+64
callarg(36) = callarg(36) + UNKNOWN
indircallarg(37) = *callarg(36) + UNKNOWN
indircallarg(37) = indircallarg(37) + UNKNOWN
indircallarg(37) = *indircallarg(37) + UNKNOWN
CALLUSED(33) = callarg(36)
CALLUSED(33) = indircallarg(37)
*indircallarg(37) = callescape(32)
CALLCLOBBERED(34) = indircallarg(37)
callescape(32) = indircallarg(37)
ESCAPED = *callarg(36) + UNKNOWN
_20 = D.93479.0+64
_22 = D.93479.64+192
_23 = _22 + UNKNOWN
_23 = &NONLOCAL
callescape(42) = NONLOCAL
CALLUSED(43) = callescape(42)
callarg(45) = _20
callarg(45) = callarg(45) + UNKNOWN
callarg(45) = *callarg(45) + UNKNOWN
CALLUSED(43) = callarg(45)
*callarg(45) = callescape(42)
CALLCLOBBERED(44) = callarg(45)
callescape(42) = callarg(45)
ESCAPED = _20
callarg(46) = _23
callarg(46) = callarg(46) + UNKNOWN
callarg(46) = *callarg(46) + UNKNOWN
CALLUSED(43) = callarg(46)
*callarg(46) = callescape(42)
CALLCLOBBERED(44) = callarg(46)
callescape(42) = callarg(46)
ESCAPED = _23
_24 = D.93479.0+64
_26 = D.93479.64+192
_27 = _26 + UNKNOWN
_27 = &NONLOCAL
callescape(51) = NONLOCAL
CALLUSED(52) = callescape(51)
callarg(54) = _24
callarg(54) = callarg(54) + UNKNOWN
callarg(54) = *callarg(54) + UNKNOWN
CALLUSED(52) = callarg(54)
*callarg(54) = callescape(51)
CALLCLOBBERED(53) = callarg(54)
callescape(51) = callarg(54)
ESCAPED = _24
callarg(55) = _27
callarg(55) = callarg(55) + UNKNOWN
callarg(55) = *callarg(55) + UNKNOWN
CALLUSED(52) = callarg(55)
*callarg(55) = callescape(51)
CALLCLOBBERED(53) = callarg(55)
callescape(51) = callarg(55)
ESCAPED = _27

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL D.93479.0+64 D.93479.64+192 }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
D.93479.0+64 = { ESCAPED NONLOCAL D.93479.0+64 D.93479.64+192 } same as _20
D.93479.64+192 = { ESCAPED NONLOCAL D.93479.0+64 D.93479.64+192 } same as _22
D.93478 = { }
D.93569.0+64 = { D.93479.0+64 }
D.93569.64+16 = { NONLOCAL }
__os = { NONLOCAL }
__p = { NONLOCAL } same as __os
_10 = { ESCAPED NONLOCAL }
_3 = { ESCAPED NONLOCAL }
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcmRKS3_ = { }
callescape(13) = { ESCAPED NONLOCAL D.93479.0+64 D.93479.64+192 }
CALLUSED(14) = { ESCAPED NONLOCAL D.93479.0+64 D.93479.64+192 D.93478 }
CALLCLOBBERED(15) = { ESCAPED NONLOCAL D.93479.0+64 D.93479.64+192 }
callarg(16) = { ESCAPED NONLOCAL D.93479.0+64 D.93479.64+192 }
callarg(19) = { ESCAPED NONLOCAL }
callarg(20) = { ESCAPED NONLOCAL }
callarg(21) = { D.93478 }
SR.244_16 = { D.93479.0+64 }
SR.245_21 = { NONLOCAL } same as __os
SR.246_14 = { NONLOCAL } same as __os
SR.241_25 = { D.93479.0+64 } same as SR.244_16
SR.242_15 = { NONLOCAL } same as __os
SR.243_9 = { NONLOCAL } same as __os
_ZNSt8__detaillsIcSt11char_traitsIcERKNSt7__cxx1112basic_stringIcS2_SaIcEEEEERSt13basic_ostreamIT_T0_ESD_RKNS_14_Quoted_stringIT1_SA_EE = { }
callescape(32) = { ESCAPED NONLOCAL D.93479.0+64 D.93479.64+192 }
CALLUSED(33) = { ESCAPED NONLOCAL D.93479.0+64 D.93479.64+192 D.93569.0+64 D.93569.64+16 }
CALLCLOBBERED(34) = { ESCAPED NONLOCAL D.93479.0+64 D.93479.64+192 }
callarg(35) = { ESCAPED NONLOCAL }
callarg(36) = { D.93569.0+64 D.93569.64+16 }
indircallarg(37) = { ESCAPED NONLOCAL D.93479.0+64 D.93479.64+192 }
_20 = { ESCAPED NONLOCAL D.93479.0+64 D.93479.64+192 }
_22 = { ESCAPED NONLOCAL D.93479.0+64 D.93479.64+192 }
_23 = { ESCAPED NONLOCAL D.93479.0+64 D.93479.64+192 }
_ZdlPvm = { }
callescape(42) = { ESCAPED NONLOCAL D.93479.0+64 D.93479.64+192 }
CALLUSED(43) = { ESCAPED NONLOCAL D.93479.0+64 D.93479.64+192 } same as callescape(42)
CALLCLOBBERED(44) = { ESCAPED NONLOCAL D.93479.0+64 D.93479.64+192 }
callarg(45) = { ESCAPED NONLOCAL D.93479.0+64 D.93479.64+192 }
callarg(46) = { ESCAPED NONLOCAL D.93479.0+64 D.93479.64+192 }
_ZNSt10filesystem7__cxx11lsIcSt11char_traitsIcEEERSt13basic_ostreamIT_T0_ES8_RKNS0_4pathE = { }
_24 = { ESCAPED NONLOCAL D.93479.0+64 D.93479.64+192 } same as _20
_26 = { ESCAPED NONLOCAL D.93479.0+64 D.93479.64+192 } same as _22
_27 = { ESCAPED NONLOCAL D.93479.0+64 D.93479.64+192 }
callescape(51) = { ESCAPED NONLOCAL D.93479.0+64 D.93479.64+192 }
CALLUSED(52) = { ESCAPED NONLOCAL D.93479.0+64 D.93479.64+192 } same as callescape(51)
CALLCLOBBERED(53) = { ESCAPED NONLOCAL D.93479.0+64 D.93479.64+192 }
callarg(54) = { ESCAPED NONLOCAL D.93479.0+64 D.93479.64+192 }
callarg(55) = { ESCAPED NONLOCAL D.93479.0+64 D.93479.64+192 }


Alias information for std::filesystem::__cxx11::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::filesystem::__cxx11::path const&)std::basic_ostream<char, std::char_traits<char> >&

Aliased symbols

D.93478, UID D.93478, struct allocator, is addressable
D.93479, UID D.93479, struct basic_string, is addressable
D.93569, UID D.93569, struct _Quoted_string, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.93479 } (escaped)

Flow-insensitive points-to information

__p_4(D), points-to non-local, points-to vars: { }
__os_7(D), points-to non-local, points-to vars: { }
_10, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
SR.244_16, points-to NULL, points-to vars: { D.93479 } (escaped)
_20, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.93479 } (escaped)
_24, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.93479 } (escaped)
SR.241_25, points-to NULL, points-to vars: { D.93479 } (escaped)

struct basic_ostream & std::filesystem::__cxx11::operator<< <char, std::char_traits<char> > (struct basic_ostream & __os, const struct path & __p)
{
  char SR.246;
  char SR.245;
  const struct basic_string & SR.244;
  char SR.243;
  char SR.242;
  const struct basic_string & SR.241;
  struct basic_string & retvalptr.240;
  struct _Quoted_string D.99036;
  struct _Quoted_string D.99035;
  struct allocator D.93478;
  struct basic_string D.93479;
  struct _Quoted_string D.93569;
  long unsigned int _3;
  char * _10;
  char * _20;
  long unsigned int _22;
  long unsigned int _23;
  char * _24;
  long unsigned int _26;
  long unsigned int _27;

  <bb 2> :
  gimple_assign <component_ref, _10, MEM[(const struct basic_string *)__p_4(D)]._M_dataplus._M_p, NULL, NULL>
  gimple_assign <component_ref, _3, MEM[(const struct basic_string *)__p_4(D)]._M_string_length, NULL, NULL>
  gimple_call <__ct_comp , NULL, &D.93479, _10, _3, &D.93478>

  <bb 3> :
  gimple_assign <addr_expr, SR.244_16, &D.93479, NULL, NULL>
  gimple_assign <integer_cst, SR.245_21, 34, NULL, NULL>
  gimple_assign <integer_cst, SR.246_14, 92, NULL, NULL>
  gimple_assign <ssa_name, SR.241_25, SR.244_16, NULL, NULL>
  gimple_assign <ssa_name, SR.242_15, SR.245_21, NULL, NULL>
  gimple_assign <ssa_name, SR.243_9, SR.246_14, NULL, NULL>
  gimple_assign <ssa_name, MEM <const struct basic_string &> [(struct _Quoted_string *)&D.93569], SR.241_25, NULL, NULL>
  gimple_assign <ssa_name, MEM <char> [(struct _Quoted_string *)&D.93569 + 8B], SR.242_15, NULL, NULL>
  gimple_assign <ssa_name, MEM <char> [(struct _Quoted_string *)&D.93569 + 9B], SR.243_9, NULL, NULL>
  gimple_call <operator<<, NULL, __os_7(D), &D.93569>

  <bb 4> :
  gimple_assign <component_ref, _20, D.93479._M_dataplus._M_p, NULL, NULL>
  gimple_cond <ne_expr, &D.93479.D.28191._M_local_buf, _20, NULL, NULL>
    goto <bb 5>; [53.47%]
  else
    goto <bb 6>; [46.53%]

  <bb 5> :
  gimple_assign <component_ref, _22, D.93479.D.28191._M_allocated_capacity, NULL, NULL>
  gimple_assign <plus_expr, _23, _22, 1, NULL>
  gimple_call <operator delete, NULL, _20, _23>

  <bb 6> :
  gimple_assign <constructor, D.93479, {CLOBBER}, NULL, NULL>
  gimple_assign <constructor, D.93478, {CLOBBER(eol)}, NULL, NULL>
  gimple_assign <constructor, D.93479, {CLOBBER(eol)}, NULL, NULL>
  gimple_assign <constructor, D.93569, {CLOBBER(eol)}, NULL, NULL>
  gimple_return <__os_7(D)>

  <bb 7> :
gimple_label <<L1>>
  gimple_assign <component_ref, _24, D.93479._M_dataplus._M_p, NULL, NULL>
  gimple_cond <ne_expr, &D.93479.D.28191._M_local_buf, _24, NULL, NULL>
    goto <bb 8>; [53.47%]
  else
    goto <bb 9>; [46.53%]

  <bb 8> :
  gimple_assign <component_ref, _26, D.93479.D.28191._M_allocated_capacity, NULL, NULL>
  gimple_assign <plus_expr, _27, _26, 1, NULL>
  gimple_call <operator delete, NULL, _24, _27>

  <bb 9> :
  gimple_assign <constructor, D.93479, {CLOBBER}, NULL, NULL>
  gimple_resx <5>

  <bb 10> :
gimple_label <<L2>>
  gimple_resx <4>

  <bb 11> :
gimple_label <<L3>>
  gimple_assign <constructor, D.93478, {CLOBBER(eol)}, NULL, NULL>
  gimple_resx <3>

  <bb 12> :
gimple_label <<L4>>
  gimple_assign <constructor, D.93479, {CLOBBER(eol)}, NULL, NULL>
  gimple_resx <2>

  <bb 13> :
gimple_label <<L5>>
  gimple_assign <constructor, D.93569, {CLOBBER(eol)}, NULL, NULL>
  gimple_resx <1>

}



;; Function sighandle (_ZL9sighandlei, funcdef_no=3694, decl_uid=89119, cgraph_uid=1173, symbol_order=1736)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
sig = &NONLOCAL
callescape(10) = NONLOCAL
CALLUSED(11) = callescape(10)
callarg(13) = sig
callarg(13) = callarg(13) + UNKNOWN
callarg(13) = *callarg(13) + UNKNOWN
CALLUSED(11) = callarg(13)
*callarg(13) = callescape(10)
CALLCLOBBERED(12) = callarg(13)
callescape(10) = callarg(13)
ESCAPED = sig
callarg(14) = &NULL
callarg(14) = callarg(14) + UNKNOWN
callarg(14) = *callarg(14) + UNKNOWN
CALLUSED(11) = callarg(14)
*callarg(14) = callescape(10)
CALLCLOBBERED(12) = callarg(14)
callescape(10) = callarg(14)
ESCAPED = &NULL
callescape(16) = NONLOCAL
CALLUSED(17) = callescape(16)
callarg(19) = &STRING
callarg(19) = callarg(19) + UNKNOWN
callarg(19) = *callarg(19) + UNKNOWN
CALLUSED(17) = callarg(19)
*callarg(19) = callescape(16)
CALLCLOBBERED(18) = callarg(19)
callescape(16) = callarg(19)
ESCAPED = &STRING
callarg(20) = &NONLOCAL
callarg(20) = callarg(20) + UNKNOWN
callarg(20) = *callarg(20) + UNKNOWN
CALLUSED(17) = callarg(20)
*callarg(20) = callescape(16)
CALLCLOBBERED(18) = callarg(20)
callescape(16) = callarg(20)
ESCAPED = &NONLOCAL
_30 = NONLOCAL
_30 = callarg(19)
_30 = callarg(20)
callescape(23) = NONLOCAL
CALLUSED(24) = callescape(23)
callarg(26) = _30
callarg(26) = callarg(26) + UNKNOWN
callarg(26) = *callarg(26) + UNKNOWN
CALLUSED(24) = callarg(26)
*callarg(26) = callescape(23)
CALLCLOBBERED(25) = callarg(26)
callescape(23) = callarg(26)
ESCAPED = _30
callarg(27) = &buf
callarg(27) = callarg(27) + UNKNOWN
callarg(27) = *callarg(27) + UNKNOWN
CALLUSED(24) = callarg(27)
*callarg(27) = callescape(23)
CALLCLOBBERED(25) = callarg(27)
callescape(23) = callarg(27)
ESCAPED = &buf
callarg(29) = &NONLOCAL
callarg(29) = callarg(29) + UNKNOWN
callarg(29) = *callarg(29) + UNKNOWN
CALLUSED(24) = callarg(29)
*callarg(29) = callescape(23)
CALLCLOBBERED(25) = callarg(29)
callescape(23) = callarg(29)
ESCAPED = &NONLOCAL
_33 = NONLOCAL
_33 = callarg(26)
_33 = callarg(27)
_33 = callarg(29)
callescape(32) = NONLOCAL
CALLUSED(33) = callescape(32)
callarg(35) = _30
callarg(35) = callarg(35) + UNKNOWN
callarg(35) = *callarg(35) + UNKNOWN
CALLUSED(33) = callarg(35)
*callarg(35) = callescape(32)
CALLCLOBBERED(34) = callarg(35)
callescape(32) = callarg(35)
ESCAPED = _30
callescape(37) = NONLOCAL
CALLUSED(38) = callescape(37)
callarg(40) = sig
callarg(40) = callarg(40) + UNKNOWN
callarg(40) = *callarg(40) + UNKNOWN
CALLUSED(38) = callarg(40)
*callarg(40) = callescape(37)
CALLCLOBBERED(39) = callarg(40)
callescape(37) = callarg(40)
ESCAPED = sig
callescape(37) = &D.89125.0+64
ESCAPED = &D.89125.0+64
allalltmp(43) = NONLOCAL
allalltmp(43) = callarg(40)
allalltmp(43) = &D.89125.0+64
D.89125.0+64 = allalltmp(43)
D.89125.64+192 = allalltmp(43)
callescape(45) = NONLOCAL
CALLUSED(46) = callescape(45)
callarg(48) = &D.89125.0+64
callarg(48) = callarg(48) + UNKNOWN
callarg(48) = *callarg(48) + UNKNOWN
CALLUSED(46) = callarg(48)
*callarg(48) = callescape(45)
CALLCLOBBERED(47) = callarg(48)
callescape(45) = callarg(48)
ESCAPED = &D.89125.0+64
callarg(49) = &NULL
callarg(49) = callarg(49) + UNKNOWN
callarg(49) = *callarg(49) + UNKNOWN
CALLUSED(46) = callarg(49)
*callarg(49) = callescape(45)
CALLCLOBBERED(47) = callarg(49)
callescape(45) = callarg(49)
ESCAPED = &NULL
callarg(50) = &STRING
callarg(50) = callarg(50) + UNKNOWN
callarg(50) = *callarg(50) + UNKNOWN
CALLUSED(46) = callarg(50)
*callarg(50) = callescape(45)
CALLCLOBBERED(47) = callarg(50)
callescape(45) = callarg(50)
ESCAPED = &STRING
_91 = NONLOCAL
_91 = callarg(48)
_91 = callarg(49)
_91 = callarg(50)
callescape(53) = &NONLOCAL
CALLUSED(54) = callescape(53)
callarg(56) = &D.89126.0+64
callarg(56) = callarg(56) + UNKNOWN
callarg(56) = *callarg(56) + UNKNOWN
CALLUSED(54) = callarg(56)
*callarg(56) = callescape(53)
CALLCLOBBERED(55) = callarg(56)
callescape(53) = callarg(56)
callarg(59) = _91
callarg(59) = callarg(59) + UNKNOWN
callarg(59) = *callarg(59) + UNKNOWN
CALLUSED(54) = callarg(59)
*callarg(59) = callescape(53)
CALLCLOBBERED(55) = callarg(59)
callescape(53) = callarg(59)
callescape(61) = NONLOCAL
CALLUSED(62) = callescape(61)
callarg(64) = &D.89126.0+64
callarg(64) = callarg(64) + UNKNOWN
callarg(64) = *callarg(64) + UNKNOWN
CALLUSED(62) = callarg(64)
*callarg(64) = callescape(61)
CALLCLOBBERED(63) = callarg(64)
callescape(61) = callarg(64)
ESCAPED = &D.89126.0+64
callarg(65) = &STRING
callarg(65) = callarg(65) + UNKNOWN
callarg(65) = *callarg(65) + UNKNOWN
CALLUSED(62) = callarg(65)
*callarg(65) = callescape(61)
CALLCLOBBERED(63) = callarg(65)
callescape(61) = callarg(65)
ESCAPED = &STRING
_56 = NONLOCAL
_56 = callarg(64)
_56 = callarg(65)
callescape(67) = &NONLOCAL
CALLUSED(68) = callescape(67)
callarg(70) = &errorMsg.0+64
callarg(70) = callarg(70) + UNKNOWN
callarg(70) = *callarg(70) + UNKNOWN
CALLUSED(68) = callarg(70)
*callarg(70) = callescape(67)
CALLCLOBBERED(69) = callarg(70)
callescape(67) = callarg(70)
callarg(73) = _56
callarg(73) = callarg(73) + UNKNOWN
callarg(73) = *callarg(73) + UNKNOWN
CALLUSED(68) = callarg(73)
*callarg(73) = callescape(67)
CALLCLOBBERED(69) = callarg(73)
callescape(67) = callarg(73)
_111 = D.89126.0+64
_113 = D.89126.64+192
_114 = _113 + UNKNOWN
_114 = &NONLOCAL
callescape(78) = NONLOCAL
CALLUSED(79) = callescape(78)
callarg(81) = _111
callarg(81) = callarg(81) + UNKNOWN
callarg(81) = *callarg(81) + UNKNOWN
CALLUSED(79) = callarg(81)
*callarg(81) = callescape(78)
CALLCLOBBERED(80) = callarg(81)
callescape(78) = callarg(81)
ESCAPED = _111
callarg(82) = _114
callarg(82) = callarg(82) + UNKNOWN
callarg(82) = *callarg(82) + UNKNOWN
CALLUSED(79) = callarg(82)
*callarg(82) = callescape(78)
CALLCLOBBERED(80) = callarg(82)
callescape(78) = callarg(82)
ESCAPED = _114
_107 = D.89125.0+64
_109 = D.89125.64+192
_110 = _109 + UNKNOWN
_110 = &NONLOCAL
callescape(86) = NONLOCAL
CALLUSED(87) = callescape(86)
callarg(89) = _107
callarg(89) = callarg(89) + UNKNOWN
callarg(89) = *callarg(89) + UNKNOWN
CALLUSED(87) = callarg(89)
*callarg(89) = callescape(86)
CALLCLOBBERED(88) = callarg(89)
callescape(86) = callarg(89)
ESCAPED = _107
callarg(90) = _110
callarg(90) = callarg(90) + UNKNOWN
callarg(90) = *callarg(90) + UNKNOWN
CALLUSED(87) = callarg(90)
*callarg(90) = callescape(86)
CALLCLOBBERED(88) = callarg(90)
callescape(86) = callarg(90)
ESCAPED = _110
_52 = errorMsg.0+64
_48 = errorMsg.64+192
_46 = _48
callescape(95) = NONLOCAL
CALLUSED(96) = callescape(95)
_ZSt4cout.0+64 = NONLOCAL
_ZSt4cout.64+64 = NONLOCAL
_ZSt4cout.128+224 = NONLOCAL
_ZSt4cout.384+64 = NONLOCAL
_ZSt4cout.448+64 = NONLOCAL
_ZSt4cout.512+1120 = NONLOCAL
_ZSt4cout.1664+64 = NONLOCAL
_ZSt4cout.1728+64 = NONLOCAL
_ZSt4cout.1792+64 = NONLOCAL
_ZSt4cout.1856+16 = NONLOCAL
_ZSt4cout.1920+64 = NONLOCAL
_ZSt4cout.1984+64 = NONLOCAL
_ZSt4cout.2048+64 = NONLOCAL
_ZSt4cout.2112+64 = NONLOCAL
callarg(98) = &_ZSt4cout.0+64
callarg(98) = callarg(98) + UNKNOWN
callarg(98) = *callarg(98) + UNKNOWN
CALLUSED(96) = callarg(98)
*callarg(98) = callescape(95)
CALLCLOBBERED(97) = callarg(98)
callescape(95) = callarg(98)
ESCAPED = &_ZSt4cout.0+64
callarg(113) = _52
callarg(113) = callarg(113) + UNKNOWN
callarg(113) = *callarg(113) + UNKNOWN
CALLUSED(96) = callarg(113)
*callarg(113) = callescape(95)
CALLCLOBBERED(97) = callarg(113)
callescape(95) = callarg(113)
ESCAPED = _52
callarg(114) = _46
callarg(114) = callarg(114) + UNKNOWN
callarg(114) = *callarg(114) + UNKNOWN
CALLUSED(96) = callarg(114)
*callarg(114) = callescape(95)
CALLCLOBBERED(97) = callarg(114)
callescape(95) = callarg(114)
ESCAPED = _46
_106 = NONLOCAL
_106 = callarg(98)
_106 = callarg(113)
_106 = callarg(114)
callescape(117) = NONLOCAL
CALLUSED(118) = callescape(117)
callarg(120) = _106
callarg(120) = callarg(120) + UNKNOWN
callarg(120) = *callarg(120) + UNKNOWN
CALLUSED(118) = callarg(120)
*callarg(120) = callescape(117)
CALLCLOBBERED(119) = callarg(120)
callescape(117) = callarg(120)
ESCAPED = _106
_115 = NONLOCAL
_115 = callarg(120)
callescape(123) = NONLOCAL
CALLUSED(124) = callescape(123)
callarg(126) = &D.89133.0+64
callarg(126) = callarg(126) + UNKNOWN
callarg(126) = *callarg(126) + UNKNOWN
CALLUSED(124) = callarg(126)
*callarg(126) = callescape(123)
CALLCLOBBERED(125) = callarg(126)
callescape(123) = callarg(126)
ESCAPED = &D.89133.0+64
callarg(129) = &STRING
callarg(129) = callarg(129) + UNKNOWN
callarg(129) = *callarg(129) + UNKNOWN
CALLUSED(124) = callarg(129)
*callarg(129) = callescape(123)
CALLCLOBBERED(125) = callarg(129)
callescape(123) = callarg(129)
ESCAPED = &STRING
callarg(130) = &D.89132
callarg(130) = callarg(130) + UNKNOWN
callarg(130) = *callarg(130) + UNKNOWN
CALLUSED(124) = callarg(130)
callescape(132) = NONLOCAL
CALLUSED(133) = callescape(132)
callarg(135) = &D.89135.0+64
callarg(135) = callarg(135) + UNKNOWN
callarg(135) = *callarg(135) + UNKNOWN
CALLUSED(133) = callarg(135)
*callarg(135) = callescape(132)
CALLCLOBBERED(134) = callarg(135)
callescape(132) = callarg(135)
ESCAPED = &D.89135.0+64
callarg(138) = &STRING
callarg(138) = callarg(138) + UNKNOWN
callarg(138) = *callarg(138) + UNKNOWN
CALLUSED(133) = callarg(138)
*callarg(138) = callescape(132)
CALLCLOBBERED(134) = callarg(138)
callescape(132) = callarg(138)
ESCAPED = &STRING
callarg(139) = &D.89134
callarg(139) = callarg(139) + UNKNOWN
callarg(139) = *callarg(139) + UNKNOWN
CALLUSED(133) = callarg(139)
callescape(142) = NONLOCAL
CALLUSED(143) = callescape(142)
callarg(145) = &D.89133.0+64
callarg(145) = callarg(145) + UNKNOWN
indircallarg(146) = *callarg(145) + UNKNOWN
indircallarg(146) = indircallarg(146) + UNKNOWN
indircallarg(146) = *indircallarg(146) + UNKNOWN
CALLUSED(143) = callarg(145)
CALLUSED(143) = indircallarg(146)
*indircallarg(146) = callescape(142)
CALLCLOBBERED(144) = indircallarg(146)
callescape(142) = indircallarg(146)
ESCAPED = *callarg(145) + UNKNOWN
callarg(147) = &D.89135.0+64
callarg(147) = callarg(147) + UNKNOWN
indircallarg(148) = *callarg(147) + UNKNOWN
indircallarg(148) = indircallarg(148) + UNKNOWN
indircallarg(148) = *indircallarg(148) + UNKNOWN
CALLUSED(143) = callarg(147)
CALLUSED(143) = indircallarg(148)
*indircallarg(148) = callescape(142)
CALLCLOBBERED(144) = indircallarg(148)
callescape(142) = indircallarg(148)
ESCAPED = *callarg(147) + UNKNOWN
callarg(149) = &NONLOCAL
callarg(149) = callarg(149) + UNKNOWN
callarg(149) = *callarg(149) + UNKNOWN
CALLUSED(143) = callarg(149)
*callarg(149) = callescape(142)
CALLCLOBBERED(144) = callarg(149)
callescape(142) = callarg(149)
ESCAPED = &NONLOCAL
_121 = D.89135.0+64
_123 = D.89135.64+192
_124 = _123 + UNKNOWN
_124 = &NONLOCAL
callescape(153) = NONLOCAL
CALLUSED(154) = callescape(153)
callarg(156) = _121
callarg(156) = callarg(156) + UNKNOWN
callarg(156) = *callarg(156) + UNKNOWN
CALLUSED(154) = callarg(156)
*callarg(156) = callescape(153)
CALLCLOBBERED(155) = callarg(156)
callescape(153) = callarg(156)
ESCAPED = _121
callarg(157) = _124
callarg(157) = callarg(157) + UNKNOWN
callarg(157) = *callarg(157) + UNKNOWN
CALLUSED(154) = callarg(157)
*callarg(157) = callescape(153)
CALLCLOBBERED(155) = callarg(157)
callescape(153) = callarg(157)
ESCAPED = _124
_117 = D.89133.0+64
_119 = D.89133.64+192
_120 = _119 + UNKNOWN
_120 = &NONLOCAL
callescape(161) = NONLOCAL
CALLUSED(162) = callescape(161)
callarg(164) = _117
callarg(164) = callarg(164) + UNKNOWN
callarg(164) = *callarg(164) + UNKNOWN
CALLUSED(162) = callarg(164)
*callarg(164) = callescape(161)
CALLCLOBBERED(163) = callarg(164)
callescape(161) = callarg(164)
ESCAPED = _117
callarg(165) = _120
callarg(165) = callarg(165) + UNKNOWN
callarg(165) = *callarg(165) + UNKNOWN
CALLUSED(162) = callarg(165)
*callarg(165) = callescape(161)
CALLCLOBBERED(163) = callarg(165)
callescape(161) = callarg(165)
ESCAPED = _120
_116 = errorMsg.0+64
callescape(168) = NONLOCAL
CALLUSED(169) = callescape(168)
callarg(171) = _116
callarg(171) = callarg(171) + UNKNOWN
callarg(171) = *callarg(171) + UNKNOWN
CALLUSED(169) = callarg(171)
*callarg(171) = callescape(168)
CALLCLOBBERED(170) = callarg(171)
callescape(168) = callarg(171)
ESCAPED = _116
callescape(172) = NONLOCAL
CALLUSED(173) = callescape(172)
callarg(175) = &_ZSt4cout.0+64
callarg(175) = callarg(175) + UNKNOWN
callarg(175) = *callarg(175) + UNKNOWN
CALLUSED(173) = callarg(175)
*callarg(175) = callescape(172)
CALLCLOBBERED(174) = callarg(175)
callescape(172) = callarg(175)
ESCAPED = &_ZSt4cout.0+64
callarg(176) = &STRING
callarg(176) = callarg(176) + UNKNOWN
callarg(176) = *callarg(176) + UNKNOWN
CALLUSED(173) = callarg(176)
*callarg(176) = callescape(172)
CALLCLOBBERED(174) = callarg(176)
callescape(172) = callarg(176)
ESCAPED = &STRING
callarg(177) = &NONLOCAL
callarg(177) = callarg(177) + UNKNOWN
callarg(177) = *callarg(177) + UNKNOWN
CALLUSED(173) = callarg(177)
*callarg(177) = callescape(172)
CALLCLOBBERED(174) = callarg(177)
callescape(172) = callarg(177)
ESCAPED = &NONLOCAL
callescape(179) = NONLOCAL
CALLUSED(180) = callescape(179)
callescape(179) = &D.89136.0+64
ESCAPED = &D.89136.0+64
allalltmp(185) = NONLOCAL
allalltmp(185) = &D.89136.0+64
D.89136.0+64 = allalltmp(185)
D.89136.64+192 = allalltmp(185)
D.89136.256+64 = allalltmp(185)
callescape(187) = NONLOCAL
CALLUSED(188) = callescape(187)
callarg(190) = &_ZSt4cout.0+64
callarg(190) = callarg(190) + UNKNOWN
callarg(190) = *callarg(190) + UNKNOWN
CALLUSED(188) = callarg(190)
*callarg(190) = callescape(187)
CALLCLOBBERED(189) = callarg(190)
callescape(187) = callarg(190)
ESCAPED = &_ZSt4cout.0+64
callarg(191) = &D.89136.0+64
callarg(191) = callarg(191) + UNKNOWN
indircallarg(192) = *callarg(191) + UNKNOWN
indircallarg(192) = indircallarg(192) + UNKNOWN
indircallarg(192) = *indircallarg(192) + UNKNOWN
CALLUSED(188) = callarg(191)
CALLUSED(188) = indircallarg(192)
*indircallarg(192) = callescape(187)
CALLCLOBBERED(189) = indircallarg(192)
callescape(187) = indircallarg(192)
ESCAPED = *callarg(191) + UNKNOWN
_65 = NONLOCAL
_65 = callarg(190)
_65 = indircallarg(192)
callescape(194) = NONLOCAL
CALLUSED(195) = callescape(194)
callarg(197) = _65
callarg(197) = callarg(197) + UNKNOWN
callarg(197) = *callarg(197) + UNKNOWN
CALLUSED(195) = callarg(197)
*callarg(197) = callescape(194)
CALLCLOBBERED(196) = callarg(197)
callescape(194) = callarg(197)
ESCAPED = _65
callarg(198) = &STRING
callarg(198) = callarg(198) + UNKNOWN
callarg(198) = *callarg(198) + UNKNOWN
CALLUSED(195) = callarg(198)
*callarg(198) = callescape(194)
CALLCLOBBERED(196) = callarg(198)
callescape(194) = callarg(198)
ESCAPED = &STRING
callarg(199) = &NONLOCAL
callarg(199) = callarg(199) + UNKNOWN
callarg(199) = *callarg(199) + UNKNOWN
CALLUSED(195) = callarg(199)
*callarg(199) = callescape(194)
CALLCLOBBERED(196) = callarg(199)
callescape(194) = callarg(199)
ESCAPED = &NONLOCAL
callescape(200) = NONLOCAL
CALLUSED(201) = callescape(200)
callarg(203) = _65
callarg(203) = callarg(203) + UNKNOWN
callarg(203) = *callarg(203) + UNKNOWN
CALLUSED(201) = callarg(203)
*callarg(203) = callescape(200)
CALLCLOBBERED(202) = callarg(203)
callescape(200) = callarg(203)
ESCAPED = _65
_129 = NONLOCAL
_129 = callarg(203)
callescape(206) = NONLOCAL
CALLUSED(207) = callescape(206)
callarg(209) = &D.89136.0+64
callarg(209) = callarg(209) + UNKNOWN
callarg(209) = *callarg(209) + UNKNOWN
CALLUSED(207) = callarg(209)
*callarg(209) = callescape(206)
CALLCLOBBERED(208) = callarg(209)
callescape(206) = callarg(209)
ESCAPED = &D.89136.0+64
callescape(211) = NONLOCAL
CALLUSED(212) = callescape(211)
callarg(214) = &array
callarg(214) = callarg(214) + UNKNOWN
callarg(214) = *callarg(214) + UNKNOWN
CALLUSED(212) = callarg(214)
*callarg(214) = callescape(211)
CALLCLOBBERED(213) = callarg(214)
callescape(211) = callarg(214)
ESCAPED = &array
callarg(216) = &NONLOCAL
callarg(216) = callarg(216) + UNKNOWN
callarg(216) = *callarg(216) + UNKNOWN
CALLUSED(212) = callarg(216)
*callarg(216) = callescape(211)
CALLCLOBBERED(213) = callarg(216)
callescape(211) = callarg(216)
ESCAPED = &NONLOCAL
_72 = NONLOCAL
_72 = callarg(214)
_72 = callarg(216)
callescape(219) = NONLOCAL
CALLUSED(220) = callescape(219)
callarg(222) = &array
callarg(222) = callarg(222) + UNKNOWN
callarg(222) = *callarg(222) + UNKNOWN
CALLUSED(220) = callarg(222)
*callarg(222) = callescape(219)
CALLCLOBBERED(221) = callarg(222)
callescape(219) = callarg(222)
ESCAPED = &array
callarg(223) = _72
callarg(223) = callarg(223) + UNKNOWN
callarg(223) = *callarg(223) + UNKNOWN
CALLUSED(220) = callarg(223)
*callarg(223) = callescape(219)
CALLCLOBBERED(221) = callarg(223)
callescape(219) = callarg(223)
ESCAPED = _72
stackTrace_75 = NONLOCAL
stackTrace_75 = callarg(222)
stackTrace_75 = callarg(223)
callescape(225) = NONLOCAL
CALLUSED(226) = callescape(225)
callarg(228) = &_ZSt4cout.0+64
callarg(228) = callarg(228) + UNKNOWN
callarg(228) = *callarg(228) + UNKNOWN
CALLUSED(226) = callarg(228)
*callarg(228) = callescape(225)
CALLCLOBBERED(227) = callarg(228)
callescape(225) = callarg(228)
ESCAPED = &_ZSt4cout.0+64
callarg(229) = &STRING
callarg(229) = callarg(229) + UNKNOWN
callarg(229) = *callarg(229) + UNKNOWN
CALLUSED(226) = callarg(229)
*callarg(229) = callescape(225)
CALLCLOBBERED(227) = callarg(229)
callescape(225) = callarg(229)
ESCAPED = &STRING
callarg(230) = &NONLOCAL
callarg(230) = callarg(230) + UNKNOWN
callarg(230) = *callarg(230) + UNKNOWN
CALLUSED(226) = callarg(230)
*callarg(230) = callescape(225)
CALLCLOBBERED(227) = callarg(230)
callescape(225) = callarg(230)
ESCAPED = &NONLOCAL
callescape(231) = NONLOCAL
CALLUSED(232) = callescape(231)
callarg(234) = &_ZSt4cout.0+64
callarg(234) = callarg(234) + UNKNOWN
callarg(234) = *callarg(234) + UNKNOWN
CALLUSED(232) = callarg(234)
*callarg(234) = callescape(231)
CALLCLOBBERED(233) = callarg(234)
callescape(231) = callarg(234)
ESCAPED = &_ZSt4cout.0+64
_132 = NONLOCAL
_132 = callarg(234)
callescape(236) = NONLOCAL
CALLUSED(237) = callescape(236)
callarg(239) = &STRING
callarg(239) = callarg(239) + UNKNOWN
callarg(239) = *callarg(239) + UNKNOWN
CALLUSED(237) = callarg(239)
*callarg(239) = callescape(236)
CALLCLOBBERED(238) = callarg(239)
callescape(236) = callarg(239)
ESCAPED = &STRING
_7 = i_16
_8 = _7 + UNKNOWN
_8 = &NONLOCAL
_9 = stackTrace_75 + UNKNOWN
_10 = *_9
callescape(246) = NONLOCAL
CALLUSED(247) = callescape(246)
callarg(249) = &_ZSt4cout.0+64
callarg(249) = callarg(249) + UNKNOWN
callarg(249) = *callarg(249) + UNKNOWN
CALLUSED(247) = callarg(249)
*callarg(249) = callescape(246)
CALLCLOBBERED(248) = callarg(249)
callescape(246) = callarg(249)
ESCAPED = &_ZSt4cout.0+64
callarg(250) = _10
callarg(250) = callarg(250) + UNKNOWN
callarg(250) = *callarg(250) + UNKNOWN
CALLUSED(247) = callarg(250)
*callarg(250) = callescape(246)
CALLCLOBBERED(248) = callarg(250)
callescape(246) = callarg(250)
ESCAPED = _10
_83 = NONLOCAL
_83 = callarg(249)
_83 = callarg(250)
callescape(252) = NONLOCAL
CALLUSED(253) = callescape(252)
callarg(255) = _83
callarg(255) = callarg(255) + UNKNOWN
callarg(255) = *callarg(255) + UNKNOWN
CALLUSED(253) = callarg(255)
*callarg(255) = callescape(252)
CALLCLOBBERED(254) = callarg(255)
callescape(252) = callarg(255)
ESCAPED = _83
_133 = NONLOCAL
_133 = callarg(255)
_12 = i_16
_13 = _12 + UNKNOWN
_13 = &NONLOCAL
_14 = stackTrace_75 + UNKNOWN
_15 = *_14
callescape(261) = NONLOCAL
CALLUSED(262) = callescape(261)
callarg(264) = _15
callarg(264) = callarg(264) + UNKNOWN
callarg(264) = *callarg(264) + UNKNOWN
CALLUSED(262) = callarg(264)
*callarg(264) = callescape(261)
CALLCLOBBERED(263) = callarg(264)
callescape(261) = callarg(264)
ESCAPED = _15
i_86 = i_16 + UNKNOWN
i_86 = &NONLOCAL
i_16 = &NULL
i_16 = i_86
callescape(267) = NONLOCAL
CALLUSED(268) = callescape(267)
callarg(270) = &NONLOCAL
callarg(270) = callarg(270) + UNKNOWN
callarg(270) = *callarg(270) + UNKNOWN
CALLUSED(268) = callarg(270)
*callarg(270) = callescape(267)
CALLCLOBBERED(269) = callarg(270)
callescape(267) = callarg(270)
ESCAPED = &NONLOCAL
_134 = D.89126.0+64
_136 = D.89126.64+192
_137 = _136 + UNKNOWN
_137 = &NONLOCAL
callescape(274) = NONLOCAL
CALLUSED(275) = callescape(274)
callarg(277) = _134
callarg(277) = callarg(277) + UNKNOWN
callarg(277) = *callarg(277) + UNKNOWN
CALLUSED(275) = callarg(277)
*callarg(277) = callescape(274)
CALLCLOBBERED(276) = callarg(277)
callescape(274) = callarg(277)
ESCAPED = _134
callarg(278) = _137
callarg(278) = callarg(278) + UNKNOWN
callarg(278) = *callarg(278) + UNKNOWN
CALLUSED(275) = callarg(278)
*callarg(278) = callescape(274)
CALLCLOBBERED(276) = callarg(278)
callescape(274) = callarg(278)
ESCAPED = _137
_138 = D.89125.0+64
_140 = D.89125.64+192
_141 = _140 + UNKNOWN
_141 = &NONLOCAL
callescape(282) = NONLOCAL
CALLUSED(283) = callescape(282)
callarg(285) = _138
callarg(285) = callarg(285) + UNKNOWN
callarg(285) = *callarg(285) + UNKNOWN
CALLUSED(283) = callarg(285)
*callarg(285) = callescape(282)
CALLCLOBBERED(284) = callarg(285)
callescape(282) = callarg(285)
ESCAPED = _138
callarg(286) = _141
callarg(286) = callarg(286) + UNKNOWN
callarg(286) = *callarg(286) + UNKNOWN
CALLUSED(283) = callarg(286)
*callarg(286) = callescape(282)
CALLCLOBBERED(284) = callarg(286)
callescape(282) = callarg(286)
ESCAPED = _141
_142 = D.89135.0+64
_144 = D.89135.64+192
_145 = _144 + UNKNOWN
_145 = &NONLOCAL
callescape(290) = NONLOCAL
CALLUSED(291) = callescape(290)
callarg(293) = _142
callarg(293) = callarg(293) + UNKNOWN
callarg(293) = *callarg(293) + UNKNOWN
CALLUSED(291) = callarg(293)
*callarg(293) = callescape(290)
CALLCLOBBERED(292) = callarg(293)
callescape(290) = callarg(293)
ESCAPED = _142
callarg(294) = _145
callarg(294) = callarg(294) + UNKNOWN
callarg(294) = *callarg(294) + UNKNOWN
CALLUSED(291) = callarg(294)
*callarg(294) = callescape(290)
CALLCLOBBERED(292) = callarg(294)
callescape(290) = callarg(294)
ESCAPED = _145
_146 = D.89133.0+64
_148 = D.89133.64+192
_149 = _148 + UNKNOWN
_149 = &NONLOCAL
callescape(298) = NONLOCAL
CALLUSED(299) = callescape(298)
callarg(301) = _146
callarg(301) = callarg(301) + UNKNOWN
callarg(301) = *callarg(301) + UNKNOWN
CALLUSED(299) = callarg(301)
*callarg(301) = callescape(298)
CALLCLOBBERED(300) = callarg(301)
callescape(298) = callarg(301)
ESCAPED = _146
callarg(302) = _149
callarg(302) = callarg(302) + UNKNOWN
callarg(302) = *callarg(302) + UNKNOWN
CALLUSED(299) = callarg(302)
*callarg(302) = callescape(298)
CALLCLOBBERED(300) = callarg(302)
callescape(298) = callarg(302)
ESCAPED = _149
callescape(303) = NONLOCAL
CALLUSED(304) = callescape(303)
callarg(306) = &D.89136.0+64
callarg(306) = callarg(306) + UNKNOWN
callarg(306) = *callarg(306) + UNKNOWN
CALLUSED(304) = callarg(306)
*callarg(306) = callescape(303)
CALLCLOBBERED(305) = callarg(306)
callescape(303) = callarg(306)
ESCAPED = &D.89136.0+64
_150 = errorMsg.0+64
_152 = errorMsg.64+192
_153 = _152 + UNKNOWN
_153 = &NONLOCAL
callescape(310) = NONLOCAL
CALLUSED(311) = callescape(310)
callarg(313) = _150
callarg(313) = callarg(313) + UNKNOWN
callarg(313) = *callarg(313) + UNKNOWN
CALLUSED(311) = callarg(313)
*callarg(313) = callescape(310)
CALLCLOBBERED(312) = callarg(313)
callescape(310) = callarg(313)
ESCAPED = _150
callarg(314) = _153
callarg(314) = callarg(314) + UNKNOWN
callarg(314) = *callarg(314) + UNKNOWN
CALLUSED(311) = callarg(314)
*callarg(314) = callescape(310)
CALLCLOBBERED(312) = callarg(314)
callescape(310) = callarg(314)
ESCAPED = _153

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL STRING ESCAPED NONLOCAL buf D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 D.89133.0+64 D.89133.64+192 D.89135.0+64 D.89135.64+192 D.89136.0+64 D.89136.64+192 D.89136.256+64 array }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
buf = { STRING ESCAPED NONLOCAL buf }
D.89125.0+64 = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 } same as _107
D.89125.64+192 = { ESCAPED NONLOCAL D.89125.0+64 }
D.89126.0+64 = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 } same as _111
D.89126.64+192 = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 } same as _113
errorMsg.0+64 = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 } same as _52
errorMsg.64+192 = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 } same as _48
_ZSt4cout.0+64 = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 D.89136.0+64 D.89136.64+192 D.89136.256+64 }
_ZSt4cout.64+64 = { ESCAPED NONLOCAL }
_ZSt4cout.128+224 = { ESCAPED NONLOCAL }
_ZSt4cout.384+64 = { ESCAPED NONLOCAL }
_ZSt4cout.448+64 = { ESCAPED NONLOCAL }
_ZSt4cout.512+1120 = { ESCAPED NONLOCAL }
_ZSt4cout.1664+64 = { ESCAPED NONLOCAL }
_ZSt4cout.1728+64 = { ESCAPED NONLOCAL }
_ZSt4cout.1792+64 = { ESCAPED NONLOCAL }
_ZSt4cout.1856+16 = { ESCAPED NONLOCAL }
_ZSt4cout.1920+64 = { ESCAPED NONLOCAL }
_ZSt4cout.1984+64 = { ESCAPED NONLOCAL }
_ZSt4cout.2048+64 = { ESCAPED NONLOCAL }
_ZSt4cout.2112+64 = { ESCAPED NONLOCAL }
D.89133.0+64 = { STRING ESCAPED NONLOCAL D.89133.0+64 D.89133.64+192 } same as _117
D.89133.64+192 = { STRING ESCAPED NONLOCAL D.89133.0+64 D.89133.64+192 } same as _119
D.89132 = { }
D.89135.0+64 = { STRING ESCAPED NONLOCAL D.89135.0+64 D.89135.64+192 } same as _121
D.89135.64+192 = { STRING ESCAPED NONLOCAL D.89135.0+64 D.89135.64+192 } same as _123
D.89134 = { }
D.89136.0+64 = { ESCAPED NONLOCAL D.89136.0+64 D.89136.64+192 D.89136.256+64 }
D.89136.64+192 = { ESCAPED NONLOCAL D.89136.0+64 }
D.89136.256+64 = { ESCAPED NONLOCAL D.89136.0+64 }
array = { ESCAPED NONLOCAL array }
sig = { NONLOCAL }
signal = { }
callescape(10) = { NULL ESCAPED NONLOCAL }
CALLUSED(11) = { NULL ESCAPED NONLOCAL } same as callescape(10)
CALLCLOBBERED(12) = { NULL ESCAPED NONLOCAL }
callarg(13) = { ESCAPED NONLOCAL }
callarg(14) = { NULL }
open = { }
callescape(16) = { STRING ESCAPED NONLOCAL }
CALLUSED(17) = { STRING ESCAPED NONLOCAL } same as callescape(16)
CALLCLOBBERED(18) = { STRING ESCAPED NONLOCAL }
callarg(19) = { STRING }
callarg(20) = { ESCAPED NONLOCAL }
_30 = { STRING ESCAPED NONLOCAL } same as callescape(16)
read = { }
callescape(23) = { STRING ESCAPED NONLOCAL buf }
CALLUSED(24) = { STRING ESCAPED NONLOCAL buf } same as callescape(23)
CALLCLOBBERED(25) = { STRING ESCAPED NONLOCAL buf } same as callescape(23)
callarg(26) = { STRING ESCAPED NONLOCAL }
callarg(27) = { STRING ESCAPED NONLOCAL buf }
callarg(29) = { ESCAPED NONLOCAL }
_33 = { STRING ESCAPED NONLOCAL buf } same as callescape(23)
close = { }
callescape(32) = { STRING ESCAPED NONLOCAL }
CALLUSED(33) = { STRING ESCAPED NONLOCAL } same as callescape(32)
CALLCLOBBERED(34) = { STRING ESCAPED NONLOCAL } same as callescape(32)
callarg(35) = { STRING ESCAPED NONLOCAL } same as callescape(32)
_ZNSt7__cxx119to_stringEi = { }
callescape(37) = { ESCAPED NONLOCAL D.89125.0+64 }
CALLUSED(38) = { ESCAPED NONLOCAL D.89125.0+64 } same as callescape(37)
CALLCLOBBERED(39) = { ESCAPED NONLOCAL } same as callarg(40)
callarg(40) = { ESCAPED NONLOCAL }
allalltmp(43) = { ESCAPED NONLOCAL D.89125.0+64 } same as callescape(37)
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEmPKc = { }
callescape(45) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 }
CALLUSED(46) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 } same as callescape(45)
CALLCLOBBERED(47) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 }
callarg(48) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 }
callarg(49) = { NULL }
callarg(50) = { STRING }
_91 = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 } same as callescape(45)
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_ = { }
callescape(53) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 }
CALLUSED(54) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 } same as callescape(53)
CALLCLOBBERED(55) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 } same as callescape(53)
callarg(56) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 }
callarg(59) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 }
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc = { }
callescape(61) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 }
CALLUSED(62) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 } same as callescape(61)
CALLCLOBBERED(63) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 }
callarg(64) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 }
callarg(65) = { STRING }
_56 = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 } same as callescape(61)
callescape(67) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 }
CALLUSED(68) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 } same as callescape(67)
CALLCLOBBERED(69) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 } same as callescape(67)
callarg(70) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 }
callarg(73) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 }
_111 = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 }
_113 = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 }
_114 = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 }
_ZdlPvm = { }
callescape(78) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 }
CALLUSED(79) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 } same as callescape(78)
CALLCLOBBERED(80) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 }
callarg(81) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 }
callarg(82) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 }
_107 = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 }
_109 = { ESCAPED NONLOCAL D.89125.0+64 } same as D.89125.64+192
_110 = { ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 }
callescape(86) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 }
CALLUSED(87) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 } same as callescape(86)
CALLCLOBBERED(88) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 } same as callescape(86)
callarg(89) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 }
callarg(90) = { ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 }
_52 = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 }
_48 = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 }
_46 = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 } same as _48
_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l = { }
callescape(95) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 D.89136.0+64 D.89136.64+192 D.89136.256+64 }
CALLUSED(96) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 D.89136.0+64 D.89136.64+192 D.89136.256+64 } same as callescape(95)
CALLCLOBBERED(97) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 D.89136.0+64 D.89136.64+192 D.89136.256+64 }
callarg(98) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 D.89136.0+64 D.89136.64+192 D.89136.256+64 }
callarg(113) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 }
callarg(114) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 }
_106 = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 D.89136.0+64 D.89136.64+192 D.89136.256+64 } same as callescape(95)
_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_ = { }
callescape(117) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 D.89136.0+64 D.89136.64+192 D.89136.256+64 }
CALLUSED(118) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 D.89136.0+64 D.89136.64+192 D.89136.256+64 } same as callescape(117)
CALLCLOBBERED(119) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 D.89136.0+64 D.89136.64+192 D.89136.256+64 } same as callescape(117)
callarg(120) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 D.89136.0+64 D.89136.64+192 D.89136.256+64 } same as callescape(117)
_115 = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 D.89136.0+64 D.89136.64+192 D.89136.256+64 } same as callescape(117)
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_ = { }
callescape(123) = { STRING ESCAPED NONLOCAL D.89133.0+64 D.89133.64+192 }
CALLUSED(124) = { STRING ESCAPED NONLOCAL D.89133.0+64 D.89133.64+192 D.89132 }
CALLCLOBBERED(125) = { STRING ESCAPED NONLOCAL D.89133.0+64 D.89133.64+192 }
callarg(126) = { STRING ESCAPED NONLOCAL D.89133.0+64 D.89133.64+192 }
callarg(129) = { STRING }
callarg(130) = { D.89132 }
callescape(132) = { STRING ESCAPED NONLOCAL D.89135.0+64 D.89135.64+192 }
CALLUSED(133) = { STRING ESCAPED NONLOCAL D.89135.0+64 D.89135.64+192 D.89134 }
CALLCLOBBERED(134) = { STRING ESCAPED NONLOCAL D.89135.0+64 D.89135.64+192 }
callarg(135) = { STRING ESCAPED NONLOCAL D.89135.0+64 D.89135.64+192 }
callarg(138) = { STRING }
callarg(139) = { D.89134 }
_Z8logErrorRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_i = { }
callescape(142) = { STRING ESCAPED NONLOCAL D.89133.0+64 D.89133.64+192 D.89135.0+64 D.89135.64+192 }
CALLUSED(143) = { STRING ESCAPED NONLOCAL D.89133.0+64 D.89133.64+192 D.89135.0+64 D.89135.64+192 }
CALLCLOBBERED(144) = { STRING ESCAPED NONLOCAL D.89133.0+64 D.89133.64+192 D.89135.0+64 D.89135.64+192 }
callarg(145) = { D.89133.0+64 D.89133.64+192 }
indircallarg(146) = { STRING ESCAPED NONLOCAL D.89133.0+64 D.89133.64+192 }
callarg(147) = { D.89135.0+64 D.89135.64+192 }
indircallarg(148) = { STRING ESCAPED NONLOCAL D.89135.0+64 D.89135.64+192 }
callarg(149) = { ESCAPED NONLOCAL }
_121 = { STRING ESCAPED NONLOCAL D.89135.0+64 D.89135.64+192 }
_123 = { STRING ESCAPED NONLOCAL D.89135.0+64 D.89135.64+192 }
_124 = { STRING ESCAPED NONLOCAL D.89135.0+64 D.89135.64+192 }
callescape(153) = { STRING ESCAPED NONLOCAL D.89135.0+64 D.89135.64+192 }
CALLUSED(154) = { STRING ESCAPED NONLOCAL D.89135.0+64 D.89135.64+192 } same as callescape(153)
CALLCLOBBERED(155) = { STRING ESCAPED NONLOCAL D.89135.0+64 D.89135.64+192 }
callarg(156) = { STRING ESCAPED NONLOCAL D.89135.0+64 D.89135.64+192 }
callarg(157) = { STRING ESCAPED NONLOCAL D.89135.0+64 D.89135.64+192 }
_117 = { STRING ESCAPED NONLOCAL D.89133.0+64 D.89133.64+192 }
_119 = { STRING ESCAPED NONLOCAL D.89133.0+64 D.89133.64+192 }
_120 = { STRING ESCAPED NONLOCAL D.89133.0+64 D.89133.64+192 }
callescape(161) = { STRING ESCAPED NONLOCAL D.89133.0+64 D.89133.64+192 }
CALLUSED(162) = { STRING ESCAPED NONLOCAL D.89133.0+64 D.89133.64+192 } same as callescape(161)
CALLCLOBBERED(163) = { STRING ESCAPED NONLOCAL D.89133.0+64 D.89133.64+192 }
callarg(164) = { STRING ESCAPED NONLOCAL D.89133.0+64 D.89133.64+192 }
callarg(165) = { STRING ESCAPED NONLOCAL D.89133.0+64 D.89133.64+192 }
_116 = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 } same as _52
_ZL9write_logPKc = { }
callescape(168) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 }
CALLUSED(169) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 } same as callescape(168)
CALLCLOBBERED(170) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 } same as callarg(171)
callarg(171) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 }
callescape(172) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 D.89136.0+64 D.89136.64+192 D.89136.256+64 }
CALLUSED(173) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 D.89136.0+64 D.89136.64+192 D.89136.256+64 } same as callescape(172)
CALLCLOBBERED(174) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 D.89136.0+64 D.89136.64+192 D.89136.256+64 }
callarg(175) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 D.89136.0+64 D.89136.64+192 D.89136.256+64 }
callarg(176) = { STRING }
callarg(177) = { ESCAPED NONLOCAL }
_ZNSt10filesystem12current_pathB5cxx11Ev = { }
callescape(179) = { ESCAPED NONLOCAL D.89136.0+64 }
CALLUSED(180) = { ESCAPED NONLOCAL D.89136.0+64 } same as callescape(179)
CALLCLOBBERED(181) = { }
allalltmp(185) = { ESCAPED NONLOCAL D.89136.0+64 } same as callescape(179)
_ZNSt10filesystem7__cxx11lsIcSt11char_traitsIcEEERSt13basic_ostreamIT_T0_ES8_RKNS0_4pathE = { }
callescape(187) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 D.89136.0+64 D.89136.64+192 D.89136.256+64 }
CALLUSED(188) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 D.89136.0+64 D.89136.64+192 D.89136.256+64 }
CALLCLOBBERED(189) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 D.89136.0+64 D.89136.64+192 D.89136.256+64 }
callarg(190) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 D.89136.0+64 D.89136.64+192 D.89136.256+64 }
callarg(191) = { D.89136.0+64 D.89136.64+192 D.89136.256+64 }
indircallarg(192) = { ESCAPED NONLOCAL D.89136.0+64 D.89136.64+192 D.89136.256+64 }
_65 = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 D.89136.0+64 D.89136.64+192 D.89136.256+64 } same as callescape(187)
callescape(194) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 D.89136.0+64 D.89136.64+192 D.89136.256+64 }
CALLUSED(195) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 D.89136.0+64 D.89136.64+192 D.89136.256+64 } same as callescape(194)
CALLCLOBBERED(196) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 D.89136.0+64 D.89136.64+192 D.89136.256+64 } same as callescape(194)
callarg(197) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 D.89136.0+64 D.89136.64+192 D.89136.256+64 }
callarg(198) = { STRING }
callarg(199) = { ESCAPED NONLOCAL }
callescape(200) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 D.89136.0+64 D.89136.64+192 D.89136.256+64 }
CALLUSED(201) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 D.89136.0+64 D.89136.64+192 D.89136.256+64 } same as callescape(200)
CALLCLOBBERED(202) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 D.89136.0+64 D.89136.64+192 D.89136.256+64 } same as callescape(200)
callarg(203) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 D.89136.0+64 D.89136.64+192 D.89136.256+64 } same as callescape(200)
_129 = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 D.89136.0+64 D.89136.64+192 D.89136.256+64 } same as callescape(200)
_ZNSt10filesystem7__cxx114pathD1Ev = { }
callescape(206) = { ESCAPED NONLOCAL D.89136.0+64 D.89136.64+192 D.89136.256+64 }
CALLUSED(207) = { ESCAPED NONLOCAL D.89136.0+64 D.89136.64+192 D.89136.256+64 } same as callescape(206)
CALLCLOBBERED(208) = { ESCAPED NONLOCAL D.89136.0+64 D.89136.64+192 D.89136.256+64 } same as callarg(209)
callarg(209) = { ESCAPED NONLOCAL D.89136.0+64 D.89136.64+192 D.89136.256+64 }
backtrace = { }
callescape(211) = { ESCAPED NONLOCAL array }
CALLUSED(212) = { ESCAPED NONLOCAL array } same as callescape(211)
CALLCLOBBERED(213) = { ESCAPED NONLOCAL array }
callarg(214) = { ESCAPED NONLOCAL array }
callarg(216) = { ESCAPED NONLOCAL }
_72 = { ESCAPED NONLOCAL array } same as callescape(211)
backtrace_symbols = { }
callescape(219) = { ESCAPED NONLOCAL array }
CALLUSED(220) = { ESCAPED NONLOCAL array } same as callescape(219)
CALLCLOBBERED(221) = { ESCAPED NONLOCAL array } same as callescape(219)
callarg(222) = { ESCAPED NONLOCAL array }
callarg(223) = { ESCAPED NONLOCAL array }
stackTrace_75 = { ESCAPED NONLOCAL array } same as callescape(219)
callescape(225) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 D.89136.0+64 D.89136.64+192 D.89136.256+64 }
CALLUSED(226) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 D.89136.0+64 D.89136.64+192 D.89136.256+64 } same as callescape(225)
CALLCLOBBERED(227) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 D.89136.0+64 D.89136.64+192 D.89136.256+64 }
callarg(228) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 D.89136.0+64 D.89136.64+192 D.89136.256+64 }
callarg(229) = { STRING }
callarg(230) = { ESCAPED NONLOCAL }
callescape(231) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 D.89136.0+64 D.89136.64+192 D.89136.256+64 }
CALLUSED(232) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 D.89136.0+64 D.89136.64+192 D.89136.256+64 } same as callescape(231)
CALLCLOBBERED(233) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 D.89136.0+64 D.89136.64+192 D.89136.256+64 } same as callarg(234)
callarg(234) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 D.89136.0+64 D.89136.64+192 D.89136.256+64 }
_132 = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 D.89136.0+64 D.89136.64+192 D.89136.256+64 } same as callescape(231)
callescape(236) = { STRING ESCAPED NONLOCAL }
CALLUSED(237) = { STRING ESCAPED NONLOCAL } same as callescape(236)
CALLCLOBBERED(238) = { STRING } same as callarg(239)
callarg(239) = { STRING }
_7 = { NULL NONLOCAL }
i_16 = { NULL NONLOCAL } same as _7
_8 = { NULL NONLOCAL }
_9 = { ESCAPED NONLOCAL array }
_10 = { ESCAPED NONLOCAL }
_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc = { }
callescape(246) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 D.89136.0+64 D.89136.64+192 D.89136.256+64 }
CALLUSED(247) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 D.89136.0+64 D.89136.64+192 D.89136.256+64 } same as callescape(246)
CALLCLOBBERED(248) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 D.89136.0+64 D.89136.64+192 D.89136.256+64 }
callarg(249) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 D.89136.0+64 D.89136.64+192 D.89136.256+64 }
callarg(250) = { ESCAPED NONLOCAL }
_83 = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 D.89136.0+64 D.89136.64+192 D.89136.256+64 } same as callescape(246)
callescape(252) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 D.89136.0+64 D.89136.64+192 D.89136.256+64 }
CALLUSED(253) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 D.89136.0+64 D.89136.64+192 D.89136.256+64 } same as callescape(252)
CALLCLOBBERED(254) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 D.89136.0+64 D.89136.64+192 D.89136.256+64 } same as callescape(252)
callarg(255) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 D.89136.0+64 D.89136.64+192 D.89136.256+64 } same as callescape(252)
_133 = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 D.89136.0+64 D.89136.64+192 D.89136.256+64 } same as callescape(252)
_12 = { NULL NONLOCAL } same as _7
_13 = { NULL NONLOCAL }
_14 = { ESCAPED NONLOCAL array }
_15 = { ESCAPED NONLOCAL }
callescape(261) = { ESCAPED NONLOCAL }
CALLUSED(262) = { ESCAPED NONLOCAL } same as callescape(261)
CALLCLOBBERED(263) = { ESCAPED NONLOCAL } same as callarg(264)
callarg(264) = { ESCAPED NONLOCAL }
i_86 = { NULL NONLOCAL }
exit = { }
callescape(267) = { ESCAPED NONLOCAL }
CALLUSED(268) = { ESCAPED NONLOCAL } same as callescape(267)
CALLCLOBBERED(269) = { ESCAPED NONLOCAL } same as callarg(270)
callarg(270) = { ESCAPED NONLOCAL }
_134 = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 } same as _111
_136 = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 } same as _113
_137 = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 }
callescape(274) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 }
CALLUSED(275) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 } same as callescape(274)
CALLCLOBBERED(276) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 }
callarg(277) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 }
callarg(278) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 }
_138 = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 } same as _107
_140 = { ESCAPED NONLOCAL D.89125.0+64 } same as D.89125.64+192
_141 = { ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 }
callescape(282) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 }
CALLUSED(283) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 } same as callescape(282)
CALLCLOBBERED(284) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 } same as callescape(282)
callarg(285) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 }
callarg(286) = { ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 }
_142 = { STRING ESCAPED NONLOCAL D.89135.0+64 D.89135.64+192 } same as _121
_144 = { STRING ESCAPED NONLOCAL D.89135.0+64 D.89135.64+192 } same as _123
_145 = { STRING ESCAPED NONLOCAL D.89135.0+64 D.89135.64+192 }
callescape(290) = { STRING ESCAPED NONLOCAL D.89135.0+64 D.89135.64+192 }
CALLUSED(291) = { STRING ESCAPED NONLOCAL D.89135.0+64 D.89135.64+192 } same as callescape(290)
CALLCLOBBERED(292) = { STRING ESCAPED NONLOCAL D.89135.0+64 D.89135.64+192 }
callarg(293) = { STRING ESCAPED NONLOCAL D.89135.0+64 D.89135.64+192 }
callarg(294) = { STRING ESCAPED NONLOCAL D.89135.0+64 D.89135.64+192 }
_146 = { STRING ESCAPED NONLOCAL D.89133.0+64 D.89133.64+192 } same as _117
_148 = { STRING ESCAPED NONLOCAL D.89133.0+64 D.89133.64+192 } same as _119
_149 = { STRING ESCAPED NONLOCAL D.89133.0+64 D.89133.64+192 }
callescape(298) = { STRING ESCAPED NONLOCAL D.89133.0+64 D.89133.64+192 }
CALLUSED(299) = { STRING ESCAPED NONLOCAL D.89133.0+64 D.89133.64+192 } same as callescape(298)
CALLCLOBBERED(300) = { STRING ESCAPED NONLOCAL D.89133.0+64 D.89133.64+192 }
callarg(301) = { STRING ESCAPED NONLOCAL D.89133.0+64 D.89133.64+192 }
callarg(302) = { STRING ESCAPED NONLOCAL D.89133.0+64 D.89133.64+192 }
callescape(303) = { ESCAPED NONLOCAL D.89136.0+64 D.89136.64+192 D.89136.256+64 }
CALLUSED(304) = { ESCAPED NONLOCAL D.89136.0+64 D.89136.64+192 D.89136.256+64 } same as callescape(303)
CALLCLOBBERED(305) = { ESCAPED NONLOCAL D.89136.0+64 D.89136.64+192 D.89136.256+64 } same as callarg(306)
callarg(306) = { ESCAPED NONLOCAL D.89136.0+64 D.89136.64+192 D.89136.256+64 }
_150 = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 } same as _52
_152 = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 } same as _48
_153 = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 }
callescape(310) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 }
CALLUSED(311) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 } same as callescape(310)
CALLCLOBBERED(312) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 }
callarg(313) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 }
callarg(314) = { NULL STRING ESCAPED NONLOCAL D.89125.0+64 D.89125.64+192 D.89126.0+64 D.89126.64+192 errorMsg.0+64 errorMsg.64+192 }


Alias information for sighandle(int)

Aliased symbols

array, UID D.89140, void *[50], is addressable
errorMsg, UID D.89124, struct string, is addressable
buf, UID D.89122, char[1024], is addressable
D.89136, UID D.89136, struct path, is addressable
D.89134, UID D.89134, struct allocator, is addressable
D.89135, UID D.89135, const struct string, is addressable
D.89132, UID D.89132, struct allocator, is addressable
D.89133, UID D.89133, const struct string, is addressable
D.89125, UID D.89125, struct string, is addressable
D.89126, UID D.89126, struct basic_string, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.47220 D.89122 D.89124 D.89125 D.89126 D.89133 D.89135 D.89136 D.89140 } (nonlocal, escaped, interposable)

Flow-insensitive points-to information

_9, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.89140 } (escaped)
_10, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_14, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.89140 } (escaped)
_15, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_52, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.89124 D.89125 D.89126 } (escaped)
_56, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.89125 D.89126 } (escaped)
_65, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.47220 D.89124 D.89125 D.89126 D.89136 } (nonlocal, escaped, interposable)
stackTrace_75, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.89140 } (escaped)
_83, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.47220 D.89124 D.89125 D.89126 D.89136 } (nonlocal, escaped, interposable)
_91, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.89125 } (escaped)
_106, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.47220 D.89124 D.89125 D.89126 D.89136 } (nonlocal, escaped, interposable)
_107, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.89125 } (escaped)
_111, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.89125 D.89126 } (escaped)
_115, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.47220 D.89124 D.89125 D.89126 D.89136 } (nonlocal, escaped, interposable)
_116, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.89124 D.89125 D.89126 } (escaped)
_117, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.89133 } (escaped)
_121, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.89135 } (escaped)
_129, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.47220 D.89124 D.89125 D.89126 D.89136 } (nonlocal, escaped, interposable)
_132, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.47220 D.89124 D.89125 D.89126 D.89136 } (nonlocal, escaped, interposable)
_133, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.47220 D.89124 D.89125 D.89126 D.89136 } (nonlocal, escaped, interposable)
_134, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.89125 D.89126 } (escaped)
_138, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.89125 } (escaped)
_142, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.89135 } (escaped)
_146, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.89133 } (escaped)
_150, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.89124 D.89125 D.89126 } (escaped)

void sighandle (int sig)
{
  struct basic_string & retvalptr.248;
  struct basic_string & retvalptr.249;
  struct basic_ostream & D.99081;
  struct basic_ostream & D.99075;
  struct basic_ostream & D.99072;
  const char * D.99065;
  struct basic_ostream & D.99056;
  int i;
  char * * stackTrace;
  int size;
  void * array[50];
  struct string errorMsg;
  ssize_t bufsize;
  char buf[1024];
  int clifd;
  struct path D.89136;
  struct allocator D.89134;
  const struct string D.89135;
  struct allocator D.89132;
  const struct string D.89133;
  struct string D.89125;
  struct basic_string D.89126;
  long unsigned int _7;
  long unsigned int _8;
  char * * _9;
  char * _10;
  long unsigned int _12;
  long unsigned int _13;
  char * * _14;
  char * _15;
  int _30;
  ssize_t _33;
  long int _46;
  long unsigned int _48;
  char * _52;
  struct basic_string & _56;
  struct basic_ostream & _65;
  int _72;
  struct basic_ostream & _83;
  struct basic_string & _91;
  struct basic_ostream & _106;
  char * _107;
  long unsigned int _109;
  long unsigned int _110;
  char * _111;
  long unsigned int _113;
  long unsigned int _114;
  struct __ostream_type & _115;
  char * _116;
  char * _117;
  long unsigned int _119;
  long unsigned int _120;
  char * _121;
  long unsigned int _123;
  long unsigned int _124;
  struct __ostream_type & _129;
  struct __ostream_type & _132;
  struct __ostream_type & _133;
  char * _134;
  long unsigned int _136;
  long unsigned int _137;
  char * _138;
  long unsigned int _140;
  long unsigned int _141;
  char * _142;
  long unsigned int _144;
  long unsigned int _145;
  char * _146;
  long unsigned int _148;
  long unsigned int _149;
  char * _150;
  long unsigned int _152;
  long unsigned int _153;

  <bb 2> :
  gimple_call <signal, NULL, sig_27(D), 0B>
  gimple_call <open, _30, "/proc/self/cmdline", 524288>

  <bb 3> :
  gimple_call <read, _33, _30, &buf, 1024>

  <bb 4> :
  gimple_call <close, NULL, _30>

  <bb 5> :
  gimple_call <to_string, D.89125, sig_27(D)> [return slot optimization]
  gimple_call <insert, _91, &D.89125, 0, "[ERROR] Fatal error (">

  <bb 6> :
  gimple_call <__ct_comp , NULL, &D.89126, _91>
  gimple_call <append, _56, &D.89126, "), the program has been stopped.">

  <bb 7> :
  gimple_call <__ct_comp , NULL, &errorMsg, _56>
  gimple_assign <component_ref, _111, D.89126._M_dataplus._M_p, NULL, NULL>
  gimple_cond <ne_expr, &D.89126.D.28191._M_local_buf, _111, NULL, NULL>
    goto <bb 8>; [53.47%]
  else
    goto <bb 9>; [46.53%]

  <bb 8> :
  gimple_assign <component_ref, _113, D.89126.D.28191._M_allocated_capacity, NULL, NULL>
  gimple_assign <plus_expr, _114, _113, 1, NULL>
  gimple_call <operator delete, NULL, _111, _114>

  <bb 9> :
  gimple_assign <constructor, D.89126, {CLOBBER}, NULL, NULL>
  gimple_assign <component_ref, _107, D.89125._M_dataplus._M_p, NULL, NULL>
  gimple_cond <ne_expr, &D.89125.D.28191._M_local_buf, _107, NULL, NULL>
    goto <bb 10>; [53.47%]
  else
    goto <bb 11>; [46.53%]

  <bb 10> :
  gimple_assign <component_ref, _109, D.89125.D.28191._M_allocated_capacity, NULL, NULL>
  gimple_assign <plus_expr, _110, _109, 1, NULL>
  gimple_call <operator delete, NULL, _107, _110>

  <bb 11> :
  gimple_assign <constructor, D.89125, {CLOBBER}, NULL, NULL>
  gimple_assign <constructor, D.89125, {CLOBBER(eol)}, NULL, NULL>
  gimple_assign <constructor, D.89126, {CLOBBER(eol)}, NULL, NULL>
  gimple_assign <component_ref, _52, errorMsg._M_dataplus._M_p, NULL, NULL>
  gimple_assign <component_ref, _48, errorMsg._M_string_length, NULL, NULL>
  gimple_assign <nop_expr, _46, _48, NULL, NULL>
  gimple_call <__ostream_insert, _106, &cout, _52, _46>

  <bb 12> :
  gimple_call <endl, _115, _106>

  <bb 13> :
  gimple_call <__ct_comp , NULL, &D.89133, "sighandle", &D.89132>

  <bb 14> :
  gimple_call <__ct_comp , NULL, &D.89135, "main.cpp", &D.89134>

  <bb 15> :
  gimple_call <logError, NULL, &D.89133, &D.89135, 69>

  <bb 16> :
  gimple_assign <component_ref, _121, D.89135._M_dataplus._M_p, NULL, NULL>
  gimple_cond <ne_expr, &D.89135.D.28191._M_local_buf, _121, NULL, NULL>
    goto <bb 17>; [53.47%]
  else
    goto <bb 18>; [46.53%]

  <bb 17> :
  gimple_assign <component_ref, _123, D.89135.D.28191._M_allocated_capacity, NULL, NULL>
  gimple_assign <plus_expr, _124, _123, 1, NULL>
  gimple_call <operator delete, NULL, _121, _124>

  <bb 18> :
  gimple_assign <constructor, D.89135, {CLOBBER}, NULL, NULL>
  gimple_assign <constructor, D.89134, {CLOBBER(eol)}, NULL, NULL>
  gimple_assign <constructor, D.89135, {CLOBBER(eol)}, NULL, NULL>
  gimple_assign <component_ref, _117, D.89133._M_dataplus._M_p, NULL, NULL>
  gimple_cond <ne_expr, &D.89133.D.28191._M_local_buf, _117, NULL, NULL>
    goto <bb 19>; [53.47%]
  else
    goto <bb 20>; [46.53%]

  <bb 19> :
  gimple_assign <component_ref, _119, D.89133.D.28191._M_allocated_capacity, NULL, NULL>
  gimple_assign <plus_expr, _120, _119, 1, NULL>
  gimple_call <operator delete, NULL, _117, _120>

  <bb 20> :
  gimple_assign <constructor, D.89133, {CLOBBER}, NULL, NULL>
  gimple_assign <constructor, D.89132, {CLOBBER(eol)}, NULL, NULL>
  gimple_assign <constructor, D.89133, {CLOBBER(eol)}, NULL, NULL>
  gimple_assign <component_ref, _116, errorMsg._M_dataplus._M_p, NULL, NULL>
  gimple_call <write_log, NULL, _116>

  <bb 21> :
  gimple_call <__ostream_insert, NULL, &cout, "[INFO] Log file path: ", 22>

  <bb 22> :
  gimple_call <current_path, D.89136> [return slot optimization]

  <bb 23> :
  gimple_call <operator<<, _65, &cout, &D.89136>

  <bb 24> :
  gimple_call <__ostream_insert, NULL, _65, "/program_crash.log", 18>

  <bb 25> :
  gimple_call <endl, _129, _65>

  <bb 26> :
  gimple_call <__dt_comp , NULL, &D.89136>
  gimple_assign <constructor, D.89136, {CLOBBER(eol)}, NULL, NULL>
  gimple_call <backtrace, _72, &array, 50>

  <bb 27> :
  gimple_call <backtrace_symbols, stackTrace_75, &array, _72>
  gimple_cond <ne_expr, stackTrace_75, 0B, NULL, NULL>
    goto <bb 28>; [INV]
  else
    goto <bb 37>; [INV]

  <bb 28> :
  gimple_call <__ostream_insert, NULL, &cout, "[INFO] Stack trace:", 19>

  <bb 29> :
  gimple_call <endl, _132, &cout>

  <bb 30> :
  gimple_call <write_log, NULL, "[INFO] Stack trace:">
  goto <bb 35>; [INV]

  <bb 31> :
  gimple_assign <nop_expr, _7, i_16, NULL, NULL>
  gimple_assign <mult_expr, _8, _7, 8, NULL>
  gimple_assign <pointer_plus_expr, _9, stackTrace_75, _8, NULL>
  gimple_assign <mem_ref, _10, *_9, NULL, NULL>
  gimple_call <operator<<, _83, &cout, _10>

  <bb 32> :
  gimple_call <endl, _133, _83>

  <bb 33> :
  gimple_assign <nop_expr, _12, i_16, NULL, NULL>
  gimple_assign <mult_expr, _13, _12, 8, NULL>
  gimple_assign <pointer_plus_expr, _14, stackTrace_75, _13, NULL>
  gimple_assign <mem_ref, _15, *_14, NULL, NULL>
  gimple_call <write_log, NULL, _15>

  <bb 34> :
  gimple_assign <plus_expr, i_86, i_16, 1, NULL>

  <bb 35> :
  # gimple_phi <i_16, 0(30), i_86(34)>
  gimple_cond <lt_expr, i_16, _72, NULL, NULL>
    goto <bb 31>; [INV]
  else
    goto <bb 36>; [INV]

  <bb 36> :
  gimple_call <free, NULL, stackTrace_75>

  <bb 37> :
  gimple_call <exit, NULL, 127>

  <bb 38> :
gimple_label <<L6>>
  gimple_assign <component_ref, _134, D.89126._M_dataplus._M_p, NULL, NULL>
  gimple_cond <ne_expr, &D.89126.D.28191._M_local_buf, _134, NULL, NULL>
    goto <bb 39>; [53.47%]
  else
    goto <bb 40>; [46.53%]

  <bb 39> :
  gimple_assign <component_ref, _136, D.89126.D.28191._M_allocated_capacity, NULL, NULL>
  gimple_assign <plus_expr, _137, _136, 1, NULL>
  gimple_call <operator delete, NULL, _134, _137>

  <bb 40> :
  gimple_assign <constructor, D.89126, {CLOBBER}, NULL, NULL>
  gimple_resx <5>

  <bb 41> :
gimple_label <<L7>>
  gimple_assign <component_ref, _138, D.89125._M_dataplus._M_p, NULL, NULL>
  gimple_cond <ne_expr, &D.89125.D.28191._M_local_buf, _138, NULL, NULL>
    goto <bb 42>; [53.47%]
  else
    goto <bb 43>; [46.53%]

  <bb 42> :
  gimple_assign <component_ref, _140, D.89125.D.28191._M_allocated_capacity, NULL, NULL>
  gimple_assign <plus_expr, _141, _140, 1, NULL>
  gimple_call <operator delete, NULL, _138, _141>

  <bb 43> :
  gimple_assign <constructor, D.89125, {CLOBBER}, NULL, NULL>
  gimple_resx <4>

  <bb 44> :
gimple_label <<L8>>
  gimple_assign <constructor, D.89125, {CLOBBER(eol)}, NULL, NULL>
  gimple_resx <3>

  <bb 45> :
gimple_label <<L9>>
  gimple_assign <constructor, D.89126, {CLOBBER(eol)}, NULL, NULL>
  gimple_resx <2>

  <bb 46> :
gimple_label <<L10>>
  gimple_assign <component_ref, _142, D.89135._M_dataplus._M_p, NULL, NULL>
  gimple_cond <ne_expr, &D.89135.D.28191._M_local_buf, _142, NULL, NULL>
    goto <bb 47>; [53.47%]
  else
    goto <bb 48>; [46.53%]

  <bb 47> :
  gimple_assign <component_ref, _144, D.89135.D.28191._M_allocated_capacity, NULL, NULL>
  gimple_assign <plus_expr, _145, _144, 1, NULL>
  gimple_call <operator delete, NULL, _142, _145>

  <bb 48> :
  gimple_assign <constructor, D.89135, {CLOBBER}, NULL, NULL>
  gimple_resx <18>

  <bb 49> :
gimple_label <<L11>>
  gimple_resx <17>

  <bb 50> :
gimple_label <<L12>>
  gimple_assign <constructor, D.89134, {CLOBBER(eol)}, NULL, NULL>
  gimple_resx <16>

  <bb 51> :
gimple_label <<L13>>
  gimple_assign <constructor, D.89135, {CLOBBER(eol)}, NULL, NULL>
  gimple_resx <15>

  <bb 52> :
gimple_label <<L14>>
  gimple_assign <component_ref, _146, D.89133._M_dataplus._M_p, NULL, NULL>
  gimple_cond <ne_expr, &D.89133.D.28191._M_local_buf, _146, NULL, NULL>
    goto <bb 53>; [53.47%]
  else
    goto <bb 54>; [46.53%]

  <bb 53> :
  gimple_assign <component_ref, _148, D.89133.D.28191._M_allocated_capacity, NULL, NULL>
  gimple_assign <plus_expr, _149, _148, 1, NULL>
  gimple_call <operator delete, NULL, _146, _149>

  <bb 54> :
  gimple_assign <constructor, D.89133, {CLOBBER}, NULL, NULL>
  gimple_resx <14>

  <bb 55> :
gimple_label <<L15>>
  gimple_resx <13>

  <bb 56> :
gimple_label <<L16>>
  gimple_assign <constructor, D.89132, {CLOBBER(eol)}, NULL, NULL>
  gimple_resx <12>

  <bb 57> :
gimple_label <<L17>>
  gimple_assign <constructor, D.89133, {CLOBBER(eol)}, NULL, NULL>
  gimple_resx <11>

  <bb 58> :
gimple_label <<L18>>
  gimple_call <__dt_comp , NULL, &D.89136>
  gimple_resx <28>

  <bb 59> :
gimple_label <<L19>>
  gimple_assign <constructor, D.89136, {CLOBBER(eol)}, NULL, NULL>
  gimple_resx <27>

  <bb 60> :
gimple_label <<L20>>
  gimple_assign <component_ref, _150, errorMsg._M_dataplus._M_p, NULL, NULL>
  gimple_cond <ne_expr, &errorMsg.D.28191._M_local_buf, _150, NULL, NULL>
    goto <bb 61>; [53.47%]
  else
    goto <bb 62>; [46.53%]

  <bb 61> :
  gimple_assign <component_ref, _152, errorMsg.D.28191._M_allocated_capacity, NULL, NULL>
  gimple_assign <plus_expr, _153, _152, 1, NULL>
  gimple_call <operator delete, NULL, _150, _153>

  <bb 62> :
  gimple_assign <constructor, errorMsg, {CLOBBER}, NULL, NULL>
  gimple_resx <10>

  <bb 63> :
gimple_label <<L21>>
  gimple_assign <constructor, buf, {CLOBBER(eol)}, NULL, NULL>
  gimple_assign <constructor, errorMsg, {CLOBBER(eol)}, NULL, NULL>
  gimple_assign <constructor, array, {CLOBBER(eol)}, NULL, NULL>
  gimple_resx <1>

}



;; Function _GLOBAL__sub_I__Z8logErrorRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_i (_GLOBAL__sub_I__Z8logErrorRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_i, funcdef_no=4665, decl_uid=97425, cgraph_uid=2144, symbol_order=3043)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
callescape(9) = NONLOCAL
CALLUSED(10) = callescape(9)

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL } same as callescape(9)
STOREDANYTHING = { }
INTEGER = { ANYTHING }
_Z41__static_initialization_and_destruction_0ii = { }
callescape(9) = { ESCAPED NONLOCAL }
CALLUSED(10) = { ESCAPED NONLOCAL } same as callescape(9)
CALLCLOBBERED(11) = { }


Alias information for _GLOBAL__sub_I__Z8logErrorRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_i

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information


void _GLOBAL__sub_I__Z8logErrorRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_i ()
{
  <bb 2> :
  gimple_call <__static_initialization_and_destruction_0, NULL, 1, 65535>
  gimple_return <NULL>

}


