void logError (const struct string & func, const struct string & file, int line)
gimple_bind <
  struct allocator D.88717;
  struct allocator D.88720;
  const struct string RED;
  const struct string RESET;

  gimple_try <GIMPLE_TRY_FINALLY,
    EVAL <
      gimple_try <GIMPLE_TRY_FINALLY,
        EVAL <
          gimple_call <__ct_comp , NULL, &D.88717>
          gimple_try <GIMPLE_TRY_FINALLY,
            EVAL <
              gimple_call <__ct_comp , NULL, &RED, "\x1b[31m", &D.88717>
            >
            CLEANUP <
              gimple_call <__dt_comp , NULL, &D.88717>
            >
          >
        >
        CLEANUP <
          gimple_assign <constructor, D.88717, {CLOBBER(eol)}, NULL, NULL>
        >
      >
      gimple_try <GIMPLE_TRY_FINALLY,
        EVAL <
          gimple_try <GIMPLE_TRY_FINALLY,
            EVAL <
              gimple_call <__ct_comp , NULL, &D.88720>
              gimple_try <GIMPLE_TRY_FINALLY,
                EVAL <
                  gimple_call <__ct_comp , NULL, &RESET, "\x1b[0m", &D.88720>
                >
                CLEANUP <
                  gimple_call <__dt_comp , NULL, &D.88720>
                >
              >
            >
            CLEANUP <
              gimple_assign <constructor, D.88720, {CLOBBER(eol)}, NULL, NULL>
            >
          >
          gimple_try <GIMPLE_TRY_FINALLY,
            EVAL <
              gimple_call <operator<<, _1, &cerr, &RED>
              gimple_call <operator<<, _2, _1, "In ">
              gimple_call <operator<<, _3, _2, func>
              gimple_call <operator<<, _4, _3, "() in ">
              gimple_call <operator<<, _5, _4, file>
              gimple_call <operator<<, _6, _5, " line ">
              gimple_call <operator<<, _7, _6, line>
              gimple_call <operator<<, _8, _7, ":">
              gimple_call <operator<<, _9, _8, &RESET>
              gimple_call <operator<<, NULL, _9, endl>
            >
            CLEANUP <
              gimple_call <__dt_comp , NULL, &RESET>
            >
          >
        >
        CLEANUP <
          gimple_call <__dt_comp , NULL, &RED>
        >
      >
    >
    CLEANUP <
      gimple_assign <constructor, RED, {CLOBBER(eol)}, NULL, NULL>
      gimple_assign <constructor, RESET, {CLOBBER(eol)}, NULL, NULL>
    >
  >
>


void std::allocator<char>::allocator (struct allocator * const this)
gimple_bind <
  gimple_try <GIMPLE_TRY_CATCH,
    EVAL <
      gimple_bind <
        gimple_call <__ct_base , NULL, this>
        gimple_try <GIMPLE_TRY_CATCH,
          EVAL <

          >
          CLEANUP <
            gimple_call <__dt_base , NULL, this>
          >
        >
      >
    >
    CLEANUP <
      gimple_eh_must_not_throw <terminate>
    >
  >
>


void std::__new_allocator<char>::__new_allocator (struct __new_allocator * const this)
gimple_bind <
  gimple_try <GIMPLE_TRY_CATCH,
    EVAL <
      gimple_bind <

      >
    >
    CLEANUP <
      gimple_eh_must_not_throw <terminate>
    >
  >
>


void std::__cxx11::basic_string<char>::basic_string<> (struct basic_string * const this, const char * __s, const struct allocator & __a)
gimple_bind <
  struct forward_iterator_tag D.97345;

  gimple_assign <constructor, *this, {CLOBBER}, NULL, NULL>
  gimple_bind <
    gimple_assign <addr_expr, _1, &this->_M_dataplus, NULL, NULL>
    gimple_call <_M_local_data, _2, this>
    gimple_call <__ct_comp , NULL, _1, _2, __a>
    gimple_try <GIMPLE_TRY_CATCH,
      EVAL <
        gimple_bind <
          const char * __end;

          gimple_cond <eq_expr, __s, 0B, <D.97343>, <D.97344>>
          gimple_label <<D.97343>>
          gimple_call <__throw_logic_error, NULL, "basic_string: construction from null is not valid">
          gimple_label <<D.97344>>
          gimple_call <length, _3, __s>
          gimple_assign <pointer_plus_expr, __end, __s, _3, NULL>
          gimple_call <_M_construct, NULL, this, __s, __end, D.97345>
        >
      >
      CLEANUP <
        gimple_assign <addr_expr, _4, &this->_M_dataplus, NULL, NULL>
        gimple_call <__dt_comp , NULL, _4>
      >
    >
  >
>


void std::__cxx11::basic_string<char>::_Alloc_hider::_Alloc_hider (struct _Alloc_hider * const this, char * __dat, const struct allocator & __a)
gimple_bind <
  gimple_assign <constructor, *this, {CLOBBER}, NULL, NULL>
  gimple_bind <
    gimple_call <__ct_base , NULL, this, __a>
    gimple_try <GIMPLE_TRY_CATCH,
      EVAL <
        gimple_assign <parm_decl, this->_M_p, __dat, NULL, NULL>
      >
      CLEANUP <
        gimple_call <__dt_base , NULL, this>
      >
    >
  >
>


size_t std::char_traits<char>::length (const char_type * __s)
gimple_bind <
  bool retval.0;
  size_t D.97351;

  gimple_call <__is_constant_evaluated, retval.0>
  gimple_cond <ne_expr, retval.0, 0, <D.97349>, <D.97350>>
  gimple_label <<D.97349>>
  gimple_call <length, D.97351, __s>
  gimple_return <D.97351>
  gimple_label <<D.97350>>
  gimple_call <__builtin_strlen, D.97351, __s>
  gimple_return <D.97351>
>


bool std::__is_constant_evaluated ()
gimple_bind <
  bool D.97354;

  gimple_try <GIMPLE_TRY_CATCH,
    EVAL <
      gimple_assign <integer_cst, D.97354, 0, NULL, NULL>
      gimple_return <D.97354>
    >
    CLEANUP <
      gimple_eh_must_not_throw <terminate>
    >
  >
>


size_t __gnu_cxx::char_traits<char>::length (const char_type * __p)
gimple_bind <
  bool retval.1;
  const char_type D.89227;
  size_t D.97357;
  size_t __i;

  gimple_assign <integer_cst, __i, 0, NULL, NULL>
  gimple_goto <<D.89233>>
  gimple_label <<D.89234>>
  gimple_assign <plus_expr, __i, __i, 1, NULL>
  gimple_label <<D.89233>>
  gimple_assign <pointer_plus_expr, _1, __p, __i, NULL>
  gimple_try <GIMPLE_TRY_FINALLY,
    EVAL <
      gimple_assign <integer_cst, D.89227, 0, NULL, NULL>
      gimple_call <eq, _2, _1, &D.89227>
      gimple_assign <bit_not_expr, retval.1, _2, NULL, NULL>
    >
    CLEANUP <
      gimple_assign <constructor, D.89227, {CLOBBER(eol)}, NULL, NULL>
    >
  >
  gimple_cond <ne_expr, retval.1, 0, <D.89234>, <D.89232>>
  gimple_label <<D.89232>>
  gimple_assign <var_decl, D.97357, __i, NULL, NULL>
  gimple_return <D.97357>
>


bool __gnu_cxx::char_traits<char>::eq (const char_type & __c1, const char_type & __c2)
gimple_bind <
  bool D.97359;

  gimple_assign <mem_ref, _1, *__c1, NULL, NULL>
  gimple_assign <mem_ref, _2, *__c2, NULL, NULL>
  gimple_assign <eq_expr, D.97359, _1, _2, NULL>
  gimple_return <D.97359>
>


void std::__cxx11::basic_string<char>::_M_construct<const char*> (struct basic_string * const this, const char * __beg, const char * __end, struct forward_iterator_tag D.93550)
gimple_bind <
  size_type __dnew;
  typedef struct _Guard _Guard;
  struct _Guard __guard;

  gimple_try <GIMPLE_TRY_FINALLY,
    EVAL <
      gimple_call <distance, _1, __beg, __end>
      gimple_assign <nop_expr, _2, _1, NULL, NULL>
      gimple_assign <ssa_name, __dnew, _2, NULL, NULL>
      gimple_assign <var_decl, __dnew.2_3, __dnew, NULL, NULL>
      gimple_cond <gt_expr, __dnew.2_3, 15, <D.97361>, <D.97362>>
      gimple_label <<D.97361>>
      gimple_call <_M_create, _4, this, &__dnew, 0>
      gimple_call <_M_data, NULL, this, _4>
      gimple_assign <var_decl, __dnew.3_5, __dnew, NULL, NULL>
      gimple_call <_M_capacity, NULL, this, __dnew.3_5>
      gimple_goto <<D.97363>>
      gimple_label <<D.97362>>
      gimple_call <_M_use_local_data, NULL, this>
      gimple_label <<D.97363>>
      gimple_call <__ct_comp , NULL, &__guard, this>
      gimple_try <GIMPLE_TRY_FINALLY,
        EVAL <
          gimple_call <_M_data, _6, this>
          gimple_call <_S_copy_chars, NULL, _6, __beg, __end>
          gimple_assign <integer_cst, __guard._M_guarded, 0B, NULL, NULL>
          gimple_assign <var_decl, __dnew.4_7, __dnew, NULL, NULL>
          gimple_call <_M_set_length, NULL, this, __dnew.4_7>
        >
        CLEANUP <
          gimple_call <__dt_comp , NULL, &__guard>
        >
      >
    >
    CLEANUP <
      gimple_assign <constructor, __dnew, {CLOBBER(eol)}, NULL, NULL>
      gimple_assign <constructor, __guard, {CLOBBER(eol)}, NULL, NULL>
    >
  >
>


__attribute__((nodiscard))
difference_type std::distance<const char*> (const char * __first, const char * __last)
gimple_bind <
  difference_type D.97367;
  struct random_access_iterator_tag D.97368;

  gimple_assign <parm_decl, __first.5_1, __first, NULL, NULL>
  gimple_call <__iterator_category, NULL, &__first>
  gimple_call <__distance, D.97367, __first.5_1, __last, D.97368>
  gimple_return <D.97367>
>


struct iterator_category std::__iterator_category<const char*> (const char * const & D.96279)
gimple_bind <
  struct iterator_category D.97370;

  gimple_return <D.97370>
>


difference_type std::__distance<const char*> (const char * __first, const char * __last, struct random_access_iterator_tag D.96288)
gimple_bind <
  difference_type D.97372;

  gimple_assign <pointer_diff_expr, D.97372, __last, __first, NULL>
  gimple_return <D.97372>
>


__attribute__((always_inline))
char * std::__cxx11::basic_string<char>::_M_use_local_data (struct basic_string * const this)
gimple_bind <
  char * D.97374;

  gimple_try <GIMPLE_TRY_CATCH,
    EVAL <
      gimple_call <_M_local_data, D.97374, this>
      gimple_return <D.97374>
    >
    CLEANUP <
      gimple_eh_must_not_throw <terminate>
    >
  >
>


void std::__cxx11::basic_string<char>::_M_construct<const char*>(const char*, const char*, std::forward_iterator_tag)::_Guard::_Guard (struct _Guard * const this, struct basic_string * __s)
gimple_bind <
  gimple_assign <constructor, *this, {CLOBBER}, NULL, NULL>
  gimple_bind <
    gimple_assign <parm_decl, this->_M_guarded, __s, NULL, NULL>
  >
>


void std::__cxx11::basic_string<char>::_M_construct<const char*>(const char*, const char*, std::forward_iterator_tag)::_Guard::~_Guard (struct _Guard * const this)
gimple_bind <
  gimple_try <GIMPLE_TRY_CATCH,
    EVAL <
      gimple_bind <
        gimple_try <GIMPLE_TRY_FINALLY,
          EVAL <
            gimple_assign <component_ref, _1, this->_M_guarded, NULL, NULL>
            gimple_cond <ne_expr, _1, 0B, <D.97376>, <D.97377>>
            gimple_label <<D.97376>>
            gimple_assign <component_ref, _2, this->_M_guarded, NULL, NULL>
            gimple_call <_M_dispose, NULL, _2>
            gimple_goto <<D.97378>>
            gimple_label <<D.97377>>
            gimple_label <<D.97378>>
          >
          CLEANUP <
            gimple_assign <constructor, *this, {CLOBBER}, NULL, NULL>
          >
        >
      >
      gimple_label <<D.93587>>
    >
    CLEANUP <
      gimple_eh_must_not_throw <terminate>
    >
  >
>


void std::__cxx11::basic_string<char>::_Alloc_hider::~_Alloc_hider (struct _Alloc_hider * const this)
gimple_bind <
  gimple_bind <
    gimple_try <GIMPLE_TRY_FINALLY,
      EVAL <
        gimple_try <GIMPLE_TRY_FINALLY,
          EVAL <

          >
          CLEANUP <
            gimple_call <__dt_base , NULL, this>
          >
        >
      >
      CLEANUP <
        gimple_assign <constructor, *this, {CLOBBER}, NULL, NULL>
      >
    >
  >
  gimple_label <<D.90148>>
>


void std::allocator<char>::~allocator (struct allocator * const this)
gimple_bind <
  gimple_try <GIMPLE_TRY_CATCH,
    EVAL <
      gimple_bind <
        gimple_try <GIMPLE_TRY_FINALLY,
          EVAL <

          >
          CLEANUP <
            gimple_call <__dt_base , NULL, this>
          >
        >
      >
      gimple_label <<D.90110>>
    >
    CLEANUP <
      gimple_eh_must_not_throw <terminate>
    >
  >
>


void std::__new_allocator<char>::~__new_allocator (struct __new_allocator * const this)
gimple_bind <
  gimple_try <GIMPLE_TRY_CATCH,
    EVAL <
      gimple_bind <

      >
      gimple_label <<D.93463>>
    >
    CLEANUP <
      gimple_eh_must_not_throw <terminate>
    >
  >
>


void std::__cxx11::basic_string<char>::~basic_string (struct basic_string * const this)
gimple_bind <
  gimple_try <GIMPLE_TRY_CATCH,
    EVAL <
      gimple_bind <
        gimple_try <GIMPLE_TRY_FINALLY,
          EVAL <
            gimple_try <GIMPLE_TRY_FINALLY,
              EVAL <
                gimple_call <_M_dispose, NULL, this>
              >
              CLEANUP <
                gimple_assign <addr_expr, _1, &this->_M_dataplus, NULL, NULL>
                gimple_call <__dt_comp , NULL, _1>
              >
            >
          >
          CLEANUP <
            gimple_assign <constructor, *this, {CLOBBER}, NULL, NULL>
          >
        >
      >
      gimple_label <<D.90157>>
    >
    CLEANUP <
      gimple_eh_must_not_throw <terminate>
    >
  >
>


void set_log_path (const struct string & path)
gimple_bind <
  gimple_call <operator=, NULL, &log_path, path>
>


struct string get_log_path ()
gimple_bind <
  gimple_call <__ct_comp , NULL, <retval>, &log_path>
  gimple_return <<retval>>
>


void std::__cxx11::basic_string<char>::basic_string (struct basic_string * const this, const struct basic_string & __str)
gimple_bind <
  struct allocator D.92477;
  struct forward_iterator_tag D.97380;

  gimple_assign <constructor, *this, {CLOBBER}, NULL, NULL>
  gimple_bind <
    gimple_assign <addr_expr, _1, &this->_M_dataplus, NULL, NULL>
    gimple_call <_M_local_data, _2, this>
    gimple_try <GIMPLE_TRY_FINALLY,
      EVAL <
        gimple_call <_M_get_allocator, _3, __str>
        gimple_call <_S_select_on_copy, D.92477, _3> [return slot optimization]
        gimple_try <GIMPLE_TRY_FINALLY,
          EVAL <
            gimple_call <__ct_comp , NULL, _1, _2, &D.92477>
          >
          CLEANUP <
            gimple_call <__dt_comp , NULL, &D.92477>
          >
        >
      >
      CLEANUP <
        gimple_assign <constructor, D.92477, {CLOBBER(eol)}, NULL, NULL>
      >
    >
    gimple_try <GIMPLE_TRY_CATCH,
      EVAL <
        gimple_call <_M_data, _4, __str>
        gimple_call <_M_data, _5, __str>
        gimple_call <length, _6, __str>
        gimple_assign <pointer_plus_expr, _7, _5, _6, NULL>
        gimple_call <_M_construct, NULL, this, _4, _7, D.97380>
      >
      CLEANUP <
        gimple_assign <addr_expr, _8, &this->_M_dataplus, NULL, NULL>
        gimple_call <__dt_comp , NULL, _8>
      >
    >
  >
>


struct allocator __gnu_cxx::__alloc_traits<std::allocator<char>, char>::_S_select_on_copy (const struct allocator & __a)
gimple_bind <
  gimple_call <select_on_container_copy_construction, *<retval>, __a> [return slot optimization]
  gimple_return <<retval>>
>


struct allocator_type std::allocator_traits<std::allocator<char> >::select_on_container_copy_construction (const struct allocator_type & __rhs)
gimple_bind <
  gimple_call <__ct_comp , NULL, <retval>, __rhs>
  gimple_return <<retval>>
>


void std::allocator<char>::allocator (struct allocator * const this, const struct allocator & __a)
gimple_bind <
  gimple_try <GIMPLE_TRY_CATCH,
    EVAL <
      gimple_bind <
        gimple_call <__ct_base , NULL, this, __a>
        gimple_try <GIMPLE_TRY_CATCH,
          EVAL <

          >
          CLEANUP <
            gimple_call <__dt_base , NULL, this>
          >
        >
      >
    >
    CLEANUP <
      gimple_eh_must_not_throw <terminate>
    >
  >
>


void std::__new_allocator<char>::__new_allocator (struct __new_allocator * const this, const struct __new_allocator & D.12237)
gimple_bind <
  gimple_try <GIMPLE_TRY_CATCH,
    EVAL <
      gimple_bind <

      >
    >
    CLEANUP <
      gimple_eh_must_not_throw <terminate>
    >
  >
>


void std::__cxx11::basic_string<char>::_Alloc_hider::_Alloc_hider (struct _Alloc_hider * const this, char * __dat, struct allocator & __a)
gimple_bind <
  gimple_assign <constructor, *this, {CLOBBER}, NULL, NULL>
  gimple_bind <
    gimple_call <move, _1, __a>
    gimple_call <__ct_base , NULL, this, _1>
    gimple_try <GIMPLE_TRY_CATCH,
      EVAL <
        gimple_assign <parm_decl, this->_M_p, __dat, NULL, NULL>
      >
      CLEANUP <
        gimple_call <__dt_base , NULL, this>
      >
    >
  >
>


__attribute__((nodiscard))
struct type & std::move<std::allocator<char>&> (struct allocator & __t)
gimple_bind <
  struct type & D.97385;

  gimple_try <GIMPLE_TRY_CATCH,
    EVAL <
      gimple_assign <parm_decl, D.97385, __t, NULL, NULL>
      gimple_return <D.97385>
    >
    CLEANUP <
      gimple_eh_must_not_throw <terminate>
    >
  >
>


void std::__cxx11::basic_string<char>::_M_construct<char*> (struct basic_string * const this, char * __beg, char * __end, struct forward_iterator_tag D.94746)
gimple_bind <
  size_type __dnew;
  typedef struct _Guard _Guard;
  struct _Guard __guard;

  gimple_try <GIMPLE_TRY_FINALLY,
    EVAL <
      gimple_call <distance, _1, __beg, __end>
      gimple_assign <nop_expr, _2, _1, NULL, NULL>
      gimple_assign <ssa_name, __dnew, _2, NULL, NULL>
      gimple_assign <var_decl, __dnew.6_3, __dnew, NULL, NULL>
      gimple_cond <gt_expr, __dnew.6_3, 15, <D.97387>, <D.97388>>
      gimple_label <<D.97387>>
      gimple_call <_M_create, _4, this, &__dnew, 0>
      gimple_call <_M_data, NULL, this, _4>
      gimple_assign <var_decl, __dnew.7_5, __dnew, NULL, NULL>
      gimple_call <_M_capacity, NULL, this, __dnew.7_5>
      gimple_goto <<D.97389>>
      gimple_label <<D.97388>>
      gimple_call <_M_use_local_data, NULL, this>
      gimple_label <<D.97389>>
      gimple_call <__ct_comp , NULL, &__guard, this>
      gimple_try <GIMPLE_TRY_FINALLY,
        EVAL <
          gimple_call <_M_data, _6, this>
          gimple_call <_S_copy_chars, NULL, _6, __beg, __end>
          gimple_assign <integer_cst, __guard._M_guarded, 0B, NULL, NULL>
          gimple_assign <var_decl, __dnew.8_7, __dnew, NULL, NULL>
          gimple_call <_M_set_length, NULL, this, __dnew.8_7>
        >
        CLEANUP <
          gimple_call <__dt_comp , NULL, &__guard>
        >
      >
    >
    CLEANUP <
      gimple_assign <constructor, __dnew, {CLOBBER(eol)}, NULL, NULL>
      gimple_assign <constructor, __guard, {CLOBBER(eol)}, NULL, NULL>
    >
  >
>


__attribute__((nodiscard))
difference_type std::distance<char*> (char * __first, char * __last)
gimple_bind <
  difference_type D.97393;
  struct random_access_iterator_tag D.97394;

  gimple_assign <parm_decl, __first.9_1, __first, NULL, NULL>
  gimple_call <__iterator_category, NULL, &__first>
  gimple_call <__distance, D.97393, __first.9_1, __last, D.97394>
  gimple_return <D.97393>
>


struct iterator_category std::__iterator_category<char*> (char * const & D.95641)
gimple_bind <
  struct iterator_category D.97396;

  gimple_return <D.97396>
>


difference_type std::__distance<char*> (char * __first, char * __last, struct random_access_iterator_tag D.96481)
gimple_bind <
  difference_type D.97398;

  gimple_assign <pointer_diff_expr, D.97398, __last, __first, NULL>
  gimple_return <D.97398>
>


void std::__cxx11::basic_string<char>::_M_construct<char*>(char*, char*, std::forward_iterator_tag)::_Guard::_Guard (struct _Guard * const this, struct basic_string * __s)
gimple_bind <
  gimple_assign <constructor, *this, {CLOBBER}, NULL, NULL>
  gimple_bind <
    gimple_assign <parm_decl, this->_M_guarded, __s, NULL, NULL>
  >
>


void std::__cxx11::basic_string<char>::_M_construct<char*>(char*, char*, std::forward_iterator_tag)::_Guard::~_Guard (struct _Guard * const this)
gimple_bind <
  gimple_try <GIMPLE_TRY_CATCH,
    EVAL <
      gimple_bind <
        gimple_try <GIMPLE_TRY_FINALLY,
          EVAL <
            gimple_assign <component_ref, _1, this->_M_guarded, NULL, NULL>
            gimple_cond <ne_expr, _1, 0B, <D.97400>, <D.97401>>
            gimple_label <<D.97400>>
            gimple_assign <component_ref, _2, this->_M_guarded, NULL, NULL>
            gimple_call <_M_dispose, NULL, _2>
            gimple_goto <<D.97402>>
            gimple_label <<D.97401>>
            gimple_label <<D.97402>>
          >
          CLEANUP <
            gimple_assign <constructor, *this, {CLOBBER}, NULL, NULL>
          >
        >
      >
      gimple_label <<D.94783>>
    >
    CLEANUP <
      gimple_eh_must_not_throw <terminate>
    >
  >
>


void write_log (const char * msg)
gimple_bind <
  struct string D.88970;
  bool retval.10;
  struct ofstream logfile;

  gimple_try <GIMPLE_TRY_FINALLY,
    EVAL <
      gimple_try <GIMPLE_TRY_FINALLY,
        EVAL <
          gimple_call <get_log_path, D.88970> [return slot optimization]
          gimple_try <GIMPLE_TRY_FINALLY,
            EVAL <
              gimple_call <__ct_comp , NULL, &logfile, &D.88970, 1>
            >
            CLEANUP <
              gimple_call <__dt_comp , NULL, &D.88970>
            >
          >
        >
        CLEANUP <
          gimple_assign <constructor, D.88970, {CLOBBER(eol)}, NULL, NULL>
        >
      >
      gimple_try <GIMPLE_TRY_FINALLY,
        EVAL <
          gimple_bind <
            gimple_call <is_open, retval.10, &logfile>
            gimple_cond <ne_expr, retval.10, 0, <D.97404>, <D.97405>>
            gimple_label <<D.97404>>
            gimple_bind <
              time_t t;
              char timestamp[100];

              gimple_try <GIMPLE_TRY_FINALLY,
                EVAL <
                  gimple_call <time, _1, 0B>
                  gimple_assign <ssa_name, t, _1, NULL, NULL>
                  gimple_call <localtime, _2, &t>
                  gimple_call <strftime, NULL, &timestamp, 100, "%Y-%m-%d %H:%M:%S", _2>
                  gimple_call <operator<<, _3, &logfile.D.51635, "[">
                  gimple_call <operator<<, _4, _3, &timestamp>
                  gimple_call <operator<<, _5, _4, "] ">
                  gimple_call <operator<<, _6, _5, msg>
                  gimple_call <operator<<, NULL, _6, endl>
                  gimple_call <close, NULL, &logfile>
                >
                CLEANUP <
                  gimple_assign <constructor, t, {CLOBBER(eol)}, NULL, NULL>
                  gimple_assign <constructor, timestamp, {CLOBBER(eol)}, NULL, NULL>
                >
              >
            >
            gimple_goto <<D.97406>>
            gimple_label <<D.97405>>
            gimple_call <operator<<, NULL, &cerr, "[ERROR] Failed to open log file.\n">
            gimple_call <exit, NULL, 123>
            gimple_label <<D.97406>>
          >
        >
        CLEANUP <
          gimple_call <__dt_comp , NULL, &logfile>
        >
      >
    >
    CLEANUP <
      gimple_assign <constructor, logfile, {CLOBBER(eol)}, NULL, NULL>
    >
  >
>


void sighandle (int sig)
gimple_bind <
  struct basic_string D.89036;
  struct string D.89035;
  const struct string D.89043;
  struct allocator D.89042;
  const struct string D.89045;
  struct allocator D.89044;
  struct path D.89046;
  int clifd;
  char buf[1024];
  ssize_t bufsize;
  struct string errorMsg;
  static const char __func__[10] [value-expr: "sighandle"];
  void * array[50];
  int size;
  char * * stackTrace;

  gimple_try <GIMPLE_TRY_FINALLY,
    EVAL <
      gimple_call <signal, NULL, sig, 0B>
      gimple_call <open, clifd, "/proc/self/cmdline", 524288>
      gimple_call <read, bufsize, clifd, &buf, 1024>
      gimple_call <close, NULL, clifd>
      gimple_try <GIMPLE_TRY_FINALLY,
        EVAL <
          gimple_try <GIMPLE_TRY_FINALLY,
            EVAL <
              gimple_call <to_string, D.89035, sig> [return slot optimization]
              gimple_try <GIMPLE_TRY_FINALLY,
                EVAL <
                  gimple_call <operator+, D.89036, "[ERROR] Fatal error (", &D.89035> [return slot optimization]
                  gimple_try <GIMPLE_TRY_FINALLY,
                    EVAL <
                      gimple_call <operator+, errorMsg, &D.89036, "), the program has been stopped."> [return slot optimization]
                    >
                    CLEANUP <
                      gimple_call <__dt_comp , NULL, &D.89036>
                    >
                  >
                >
                CLEANUP <
                  gimple_call <__dt_comp , NULL, &D.89035>
                >
              >
            >
            CLEANUP <
              gimple_assign <constructor, D.89035, {CLOBBER(eol)}, NULL, NULL>
            >
          >
        >
        CLEANUP <
          gimple_assign <constructor, D.89036, {CLOBBER(eol)}, NULL, NULL>
        >
      >
      gimple_try <GIMPLE_TRY_FINALLY,
        EVAL <
          gimple_call <operator<<, _1, &cout, &errorMsg>
          gimple_call <operator<<, NULL, _1, endl>
          gimple_try <GIMPLE_TRY_FINALLY,
            EVAL <
              gimple_try <GIMPLE_TRY_FINALLY,
                EVAL <
                  gimple_call <__ct_comp , NULL, &D.89042>
                  gimple_try <GIMPLE_TRY_FINALLY,
                    EVAL <
                      gimple_call <__ct_comp , NULL, &D.89043, "sighandle", &D.89042>
                      gimple_try <GIMPLE_TRY_FINALLY,
                        EVAL <
                          gimple_try <GIMPLE_TRY_FINALLY,
                            EVAL <
                              gimple_try <GIMPLE_TRY_FINALLY,
                                EVAL <
                                  gimple_call <__ct_comp , NULL, &D.89044>
                                  gimple_try <GIMPLE_TRY_FINALLY,
                                    EVAL <
                                      gimple_call <__ct_comp , NULL, &D.89045, "main.cpp", &D.89044>
                                      gimple_try <GIMPLE_TRY_FINALLY,
                                        EVAL <
                                          gimple_call <logError, NULL, &D.89043, &D.89045, 69>
                                        >
                                        CLEANUP <
                                          gimple_call <__dt_comp , NULL, &D.89045>
                                        >
                                      >
                                    >
                                    CLEANUP <
                                      gimple_call <__dt_comp , NULL, &D.89044>
                                    >
                                  >
                                >
                                CLEANUP <
                                  gimple_assign <constructor, D.89044, {CLOBBER(eol)}, NULL, NULL>
                                >
                              >
                            >
                            CLEANUP <
                              gimple_assign <constructor, D.89045, {CLOBBER(eol)}, NULL, NULL>
                            >
                          >
                        >
                        CLEANUP <
                          gimple_call <__dt_comp , NULL, &D.89043>
                        >
                      >
                    >
                    CLEANUP <
                      gimple_call <__dt_comp , NULL, &D.89042>
                    >
                  >
                >
                CLEANUP <
                  gimple_assign <constructor, D.89042, {CLOBBER(eol)}, NULL, NULL>
                >
              >
            >
            CLEANUP <
              gimple_assign <constructor, D.89043, {CLOBBER(eol)}, NULL, NULL>
            >
          >
          gimple_call <c_str, _2, &errorMsg>
          gimple_call <write_log, NULL, _2>
          gimple_call <operator<<, _3, &cout, "[INFO] Log file path: ">
          gimple_try <GIMPLE_TRY_FINALLY,
            EVAL <
              gimple_call <current_path, D.89046> [return slot optimization]
              gimple_try <GIMPLE_TRY_FINALLY,
                EVAL <
                  gimple_call <operator<<, _4, _3, &D.89046>
                  gimple_call <operator<<, _5, _4, "/program_crash.log">
                  gimple_call <operator<<, NULL, _5, endl>
                >
                CLEANUP <
                  gimple_call <__dt_comp , NULL, &D.89046>
                >
              >
            >
            CLEANUP <
              gimple_assign <constructor, D.89046, {CLOBBER(eol)}, NULL, NULL>
            >
          >
          gimple_call <backtrace, size, &array, 50>
          gimple_call <backtrace_symbols, stackTrace, &array, size>
          gimple_bind <
            gimple_cond <ne_expr, stackTrace, 0B, <D.97416>, <D.97417>>
            gimple_label <<D.97416>>
            gimple_bind <
              gimple_call <operator<<, _6, &cout, "[INFO] Stack trace:">
              gimple_call <operator<<, NULL, _6, endl>
              gimple_call <write_log, NULL, "[INFO] Stack trace:">
              gimple_bind <
                int i;

                gimple_assign <integer_cst, i, 0, NULL, NULL>
                gimple_goto <<D.89057>>
                gimple_label <<D.89056>>
                gimple_assign <nop_expr, _7, i, NULL, NULL>
                gimple_assign <mult_expr, _8, _7, 8, NULL>
                gimple_assign <pointer_plus_expr, _9, stackTrace, _8, NULL>
                gimple_assign <mem_ref, _10, *_9, NULL, NULL>
                gimple_call <operator<<, _11, &cout, _10>
                gimple_call <operator<<, NULL, _11, endl>
                gimple_assign <nop_expr, _12, i, NULL, NULL>
                gimple_assign <mult_expr, _13, _12, 8, NULL>
                gimple_assign <pointer_plus_expr, _14, stackTrace, _13, NULL>
                gimple_assign <mem_ref, _15, *_14, NULL, NULL>
                gimple_call <write_log, NULL, _15>
                gimple_assign <plus_expr, i, i, 1, NULL>
                gimple_label <<D.89057>>
                gimple_cond <lt_expr, i, size, <D.89056>, <D.89054>>
                gimple_label <<D.89054>>
              >
              gimple_call <free, NULL, stackTrace>
            >
            gimple_goto <<D.97418>>
            gimple_label <<D.97417>>
            gimple_label <<D.97418>>
          >
          gimple_call <exit, NULL, 127>
        >
        CLEANUP <
          gimple_call <__dt_comp , NULL, &errorMsg>
        >
      >
    >
    CLEANUP <
      gimple_assign <constructor, buf, {CLOBBER(eol)}, NULL, NULL>
      gimple_assign <constructor, errorMsg, {CLOBBER(eol)}, NULL, NULL>
      gimple_assign <constructor, array, {CLOBBER(eol)}, NULL, NULL>
    >
  >
>


struct string std::__cxx11::to_string (int __val)
gimple_bind <
  unsigned int iftmp.11;
  struct allocator D.29471;

  gimple_try <GIMPLE_TRY_CATCH,
    EVAL <
      gimple_bind <
        const bool __neg;
        const unsigned int __uval;
        const unsigned int __len;
        struct string __str [value-expr: *<retval>];

        gimple_assign <lt_expr, __neg, __val, 0, NULL>
        gimple_cond <ne_expr, __neg, 0, <D.97445>, <D.97446>>
        gimple_label <<D.97445>>
        gimple_assign <nop_expr, __val.12_1, __val, NULL, NULL>
        gimple_assign <negate_expr, iftmp.11, __val.12_1, NULL, NULL>
        gimple_goto <<D.97447>>
        gimple_label <<D.97446>>
        gimple_assign <nop_expr, iftmp.11, __val, NULL, NULL>
        gimple_label <<D.97447>>
        gimple_assign <var_decl, __uval, iftmp.11, NULL, NULL>
        gimple_call <__to_chars_len, __len, __uval, 10>
        gimple_assign <nop_expr, _2, __neg, NULL, NULL>
        gimple_assign <plus_expr, _3, __len, _2, NULL>
        gimple_assign <nop_expr, _4, _3, NULL, NULL>
        gimple_try <GIMPLE_TRY_FINALLY,
          EVAL <
            gimple_call <__ct_comp , NULL, &D.29471>
            gimple_try <GIMPLE_TRY_FINALLY,
              EVAL <
                gimple_call <__ct_comp , NULL, <retval>, _4, 45, &D.29471>
              >
              CLEANUP <
                gimple_call <__dt_comp , NULL, &D.29471>
              >
            >
          >
          CLEANUP <
            gimple_assign <constructor, D.29471, {CLOBBER(eol)}, NULL, NULL>
          >
        >
        gimple_try <GIMPLE_TRY_CATCH,
          EVAL <
            gimple_assign <nop_expr, _5, __neg, NULL, NULL>
            gimple_call <operator[], _6, <retval>, _5>
            gimple_call <__to_chars_10_impl, NULL, _6, __len, __uval>
            gimple_return <<retval>>
          >
          CLEANUP <
            gimple_call <__dt_comp , NULL, <retval>>
          >
        >
      >
    >
    CLEANUP <
      gimple_eh_must_not_throw <terminate>
    >
  >
>


unsigned int std::__detail::__to_chars_len<unsigned int> (unsigned int __value, int __base)
gimple_bind <
  unsigned int D.97452;

  gimple_try <GIMPLE_TRY_CATCH,
    EVAL <
      gimple_bind <
        unsigned int __n;
        const unsigned int __b2;
        const unsigned int __b3;
        const long unsigned int __b4;

        gimple_assign <integer_cst, __n, 1, NULL, NULL>
        gimple_assign <mult_expr, _1, __base, __base, NULL>
        gimple_assign <nop_expr, __b2, _1, NULL, NULL>
        gimple_assign <nop_expr, __base.13_2, __base, NULL, NULL>
        gimple_assign <mult_expr, __b3, __b2, __base.13_2, NULL>
        gimple_assign <nop_expr, __base.14_3, __base, NULL, NULL>
        gimple_assign <mult_expr, _4, __b3, __base.14_3, NULL>
        gimple_assign <nop_expr, __b4, _4, NULL, NULL>
        gimple_label <<D.90102>>
        gimple_assign <nop_expr, __base.15_5, __base, NULL, NULL>
        gimple_cond <lt_expr, __value, __base.15_5, <D.97450>, <D.97451>>
        gimple_label <<D.97450>>
        gimple_assign <var_decl, D.97452, __n, NULL, NULL>
        // predicted unlikely by early return (on trees) predictor.
        gimple_return <D.97452>
        gimple_label <<D.97451>>
        gimple_cond <lt_expr, __value, __b2, <D.97453>, <D.97454>>
        gimple_label <<D.97453>>
        gimple_assign <plus_expr, D.97452, __n, 1, NULL>
        // predicted unlikely by early return (on trees) predictor.
        gimple_return <D.97452>
        gimple_label <<D.97454>>
        gimple_cond <lt_expr, __value, __b3, <D.97455>, <D.97456>>
        gimple_label <<D.97455>>
        gimple_assign <plus_expr, D.97452, __n, 2, NULL>
        // predicted unlikely by early return (on trees) predictor.
        gimple_return <D.97452>
        gimple_label <<D.97456>>
        gimple_assign <nop_expr, _6, __value, NULL, NULL>
        gimple_cond <gt_expr, __b4, _6, <D.97457>, <D.97458>>
        gimple_label <<D.97457>>
        gimple_assign <plus_expr, D.97452, __n, 3, NULL>
        // predicted unlikely by early return (on trees) predictor.
        gimple_return <D.97452>
        gimple_label <<D.97458>>
        gimple_assign <nop_expr, _7, __value, NULL, NULL>
        gimple_assign <trunc_div_expr, _8, _7, __b4, NULL>
        gimple_assign <nop_expr, __value, _8, NULL, NULL>
        gimple_assign <plus_expr, __n, __n, 4, NULL>
        gimple_goto <<D.90102>>
      >
    >
    CLEANUP <
      gimple_eh_must_not_throw <terminate>
    >
  >
>


void std::__cxx11::basic_string<char>::basic_string<> (struct basic_string * const this, size_type __n, char __c, const struct allocator & __a)
gimple_bind <
  gimple_assign <constructor, *this, {CLOBBER}, NULL, NULL>
  gimple_bind <
    gimple_assign <addr_expr, _1, &this->_M_dataplus, NULL, NULL>
    gimple_call <_M_local_data, _2, this>
    gimple_call <__ct_comp , NULL, _1, _2, __a>
    gimple_try <GIMPLE_TRY_CATCH,
      EVAL <
        gimple_call <_M_construct, NULL, this, __n, __c>
      >
      CLEANUP <
        gimple_assign <addr_expr, _3, &this->_M_dataplus, NULL, NULL>
        gimple_call <__dt_comp , NULL, _3>
      >
    >
  >
>


void std::__detail::__to_chars_10_impl<unsigned int> (char * __first, unsigned int __len, unsigned int __val)
gimple_bind <
  gimple_try <GIMPLE_TRY_CATCH,
    EVAL <
      gimple_bind <
        static const char __digits[201] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899";
        unsigned int __pos;

        gimple_assign <plus_expr, __pos, __len, 4294967295, NULL>
        gimple_goto <<D.90175>>
        gimple_label <<D.90176>>
        gimple_bind <
          const unsigned int __num;

          gimple_assign <trunc_mod_expr, _1, __val, 100, NULL>
          gimple_assign <mult_expr, __num, _1, 2, NULL>
          gimple_assign <trunc_div_expr, __val, __val, 100, NULL>
          gimple_assign <plus_expr, _2, __num, 1, NULL>
          gimple_assign <nop_expr, _3, __pos, NULL, NULL>
          gimple_assign <pointer_plus_expr, _4, __first, _3, NULL>
          gimple_assign <array_ref, _5, __digits[_2], NULL, NULL>
          gimple_assign <ssa_name, *_4, _5, NULL, NULL>
          gimple_assign <plus_expr, _6, __pos, 4294967295, NULL>
          gimple_assign <nop_expr, _7, _6, NULL, NULL>
          gimple_assign <pointer_plus_expr, _8, __first, _7, NULL>
          gimple_assign <array_ref, _9, __digits[__num], NULL, NULL>
          gimple_assign <ssa_name, *_8, _9, NULL, NULL>
          gimple_assign <plus_expr, __pos, __pos, 4294967294, NULL>
        >
        gimple_label <<D.90175>>
        gimple_cond <gt_expr, __val, 99, <D.90176>, <D.90174>>
        gimple_label <<D.90174>>
        gimple_bind <
          gimple_cond <gt_expr, __val, 9, <D.97461>, <D.97462>>
          gimple_label <<D.97461>>
          gimple_bind <
            const unsigned int __num;

            gimple_assign <mult_expr, __num, __val, 2, NULL>
            gimple_assign <plus_expr, _10, __num, 1, NULL>
            gimple_assign <pointer_plus_expr, _11, __first, 1, NULL>
            gimple_assign <array_ref, _12, __digits[_10], NULL, NULL>
            gimple_assign <ssa_name, *_11, _12, NULL, NULL>
            gimple_assign <array_ref, _13, __digits[__num], NULL, NULL>
            gimple_assign <ssa_name, *__first, _13, NULL, NULL>
          >
          gimple_goto <<D.97463>>
          gimple_label <<D.97462>>
          gimple_assign <nop_expr, _14, __val, NULL, NULL>
          gimple_assign <plus_expr, _15, _14, 48, NULL>
          gimple_assign <ssa_name, *__first, _15, NULL, NULL>
          gimple_label <<D.97463>>
        >
      >
    >
    CLEANUP <
      gimple_eh_must_not_throw <terminate>
    >
  >
>


struct basic_string std::operator+<char, std::char_traits<char>, std::allocator<char> > (const char * __lhs, struct basic_string & __rhs)
gimple_bind <
  gimple_call <insert, _1, __rhs, 0, __lhs>
  gimple_call <move, _2, _1>
  gimple_call <__ct_comp , NULL, <retval>, _2>
  gimple_return <<retval>>
>


__attribute__((nodiscard))
struct type & std::move<std::__cxx11::basic_string<char>&> (struct basic_string & __t)
gimple_bind <
  struct type & D.97466;

  gimple_try <GIMPLE_TRY_CATCH,
    EVAL <
      gimple_assign <parm_decl, D.97466, __t, NULL, NULL>
      gimple_return <D.97466>
    >
    CLEANUP <
      gimple_eh_must_not_throw <terminate>
    >
  >
>


void std::__cxx11::basic_string<char>::basic_string (struct basic_string * const this, struct basic_string & __str)
gimple_bind <
  bool retval.16;

  gimple_try <GIMPLE_TRY_CATCH,
    EVAL <
      gimple_assign <constructor, *this, {CLOBBER}, NULL, NULL>
      gimple_bind <
        gimple_assign <addr_expr, _1, &this->_M_dataplus, NULL, NULL>
        gimple_call <_M_local_data, _2, this>
        gimple_call <_M_get_allocator, _3, __str>
        gimple_call <move, _4, _3>
        gimple_call <__ct_comp , NULL, _1, _2, _4>
        gimple_try <GIMPLE_TRY_CATCH,
          EVAL <
            gimple_call <_M_is_local, retval.16, __str>
            gimple_cond <ne_expr, retval.16, 0, <D.97469>, <D.97470>>
            gimple_label <<D.97469>>
            gimple_assign <addr_expr, _5, &this->D.28106._M_local_buf, NULL, NULL>
            gimple_assign <addr_expr, _6, &__str->D.28106._M_local_buf, NULL, NULL>
            gimple_call <length, _7, __str>
            gimple_assign <plus_expr, _8, _7, 1, NULL>
            gimple_call <copy, NULL, _5, _6, _8>
            gimple_goto <<D.97471>>
            gimple_label <<D.97470>>
            gimple_call <_M_data, _9, __str>
            gimple_call <_M_data, NULL, this, _9>
            gimple_assign <component_ref, _10, __str->D.28106._M_allocated_capacity, NULL, NULL>
            gimple_call <_M_capacity, NULL, this, _10>
            gimple_label <<D.97471>>
            gimple_call <length, _11, __str>
            gimple_call <_M_length, NULL, this, _11>
            gimple_call <_M_local_data, _12, __str>
            gimple_call <_M_data, NULL, __str, _12>
            gimple_call <_M_set_length, NULL, __str, 0>
          >
          CLEANUP <
            gimple_assign <addr_expr, _13, &this->_M_dataplus, NULL, NULL>
            gimple_call <__dt_comp , NULL, _13>
          >
        >
      >
    >
    CLEANUP <
      gimple_eh_must_not_throw <terminate>
    >
  >
>


char_type * std::char_traits<char>::copy (char_type * __s1, const char_type * __s2, size_t __n)
gimple_bind <
  char_type * D.97475;

  gimple_cond <eq_expr, __n, 0, <D.97473>, <D.97474>>
  gimple_label <<D.97473>>
  gimple_assign <parm_decl, D.97475, __s1, NULL, NULL>
  // predicted unlikely by early return (on trees) predictor.
  gimple_return <D.97475>
  gimple_label <<D.97474>>
  gimple_call <__builtin_memcpy, D.97475, __s1, __s2, __n>
  gimple_return <D.97475>
>


struct basic_string std::operator+<char, std::char_traits<char>, std::allocator<char> > (struct basic_string & __lhs, const char * __rhs)
gimple_bind <
  gimple_call <append, _1, __lhs, __rhs>
  gimple_call <move, _2, _1>
  gimple_call <__ct_comp , NULL, <retval>, _2>
  gimple_return <<retval>>
>


struct basic_ostream & std::filesystem::__cxx11::operator<< <char, std::char_traits<char> > (struct basic_ostream & __os, const struct path & __p)
gimple_bind <
  struct _Quoted_string D.93423;
  struct basic_string D.93333;
  struct allocator D.93332;
  struct basic_ostream & D.97479;

  gimple_try <GIMPLE_TRY_FINALLY,
    EVAL <
      gimple_try <GIMPLE_TRY_FINALLY,
        EVAL <
          gimple_try <GIMPLE_TRY_FINALLY,
            EVAL <
              gimple_call <__ct_comp , NULL, &D.93332>
              gimple_try <GIMPLE_TRY_FINALLY,
                EVAL <
                  gimple_call <string, D.93333, __p, &D.93332> [return slot optimization]
                  gimple_try <GIMPLE_TRY_FINALLY,
                    EVAL <
                      gimple_call <quoted, D.93423, &D.93333, 34, 92>
                      gimple_call <operator<<, NULL, __os, &D.93423>
                    >
                    CLEANUP <
                      gimple_call <__dt_comp , NULL, &D.93333>
                    >
                  >
                >
                CLEANUP <
                  gimple_call <__dt_comp , NULL, &D.93332>
                >
              >
            >
            CLEANUP <
              gimple_assign <constructor, D.93332, {CLOBBER(eol)}, NULL, NULL>
            >
          >
        >
        CLEANUP <
          gimple_assign <constructor, D.93333, {CLOBBER(eol)}, NULL, NULL>
        >
      >
    >
    CLEANUP <
      gimple_assign <constructor, D.93423, {CLOBBER(eol)}, NULL, NULL>
    >
  >
  gimple_assign <parm_decl, D.97479, __os, NULL, NULL>
  gimple_return <D.97479>
>


struct basic_string std::filesystem::__cxx11::path::string<char> (const struct path * const this, const struct allocator & __a)
gimple_bind <
  gimple_assign <addr_expr, _1, &this->_M_pathname, NULL, NULL>
  gimple_call <c_str, _2, _1>
  gimple_assign <addr_expr, _3, &this->_M_pathname, NULL, NULL>
  gimple_call <length, _4, _3>
  gimple_call <__ct_comp , NULL, <retval>, _2, _4, __a>
  gimple_return <<retval>>
>


void std::__cxx11::basic_string<char>::basic_string (struct basic_string * const this, const char * __s, size_type __n, const struct allocator & __a)
gimple_bind <
  struct forward_iterator_tag D.97491;

  gimple_assign <constructor, *this, {CLOBBER}, NULL, NULL>
  gimple_bind <
    gimple_assign <addr_expr, _1, &this->_M_dataplus, NULL, NULL>
    gimple_call <_M_local_data, _2, this>
    gimple_call <__ct_comp , NULL, _1, _2, __a>
    gimple_try <GIMPLE_TRY_CATCH,
      EVAL <
        gimple_cond <eq_expr, __s, 0B, <D.97487>, <D.97488>>
        gimple_label <<D.97487>>
        gimple_cond <ne_expr, __n, 0, <D.97489>, <D.97490>>
        gimple_label <<D.97489>>
        gimple_call <__throw_logic_error, NULL, "basic_string: construction from null is not valid">
        gimple_label <<D.97490>>
        gimple_label <<D.97488>>
        gimple_assign <pointer_plus_expr, _3, __s, __n, NULL>
        gimple_call <_M_construct, NULL, this, __s, _3, D.97491>
      >
      CLEANUP <
        gimple_assign <addr_expr, _4, &this->_M_dataplus, NULL, NULL>
        gimple_call <__dt_comp , NULL, _4>
      >
    >
  >
>


struct _Quoted_string std::quoted<char, std::char_traits<char>, std::allocator<char> > (const struct basic_string & __string, char __delim, char __escape)
gimple_bind <
  struct _Quoted_string D.97493;
  struct _Quoted_string D.93412;

  gimple_try <GIMPLE_TRY_FINALLY,
    EVAL <
      gimple_call <__ct_comp , NULL, &D.93412, __string, __delim, __escape>
      gimple_assign <var_decl, D.97493, D.93412, NULL, NULL>
      gimple_return <D.97493>
    >
    CLEANUP <
      gimple_assign <constructor, D.93412, {CLOBBER(eol)}, NULL, NULL>
    >
  >
>


void std::__detail::_Quoted_string<const std::__cxx11::basic_string<char>&, char>::_Quoted_string (struct _Quoted_string * const this, const struct basic_string & __str, char __del, char __esc)
gimple_bind <
  gimple_assign <constructor, MEM[(struct __as_base  &)this], {CLOBBER}, NULL, NULL>
  gimple_bind <
    gimple_assign <parm_decl, this->_M_string, __str, NULL, NULL>
    gimple_assign <parm_decl, this->_M_delim, __del, NULL, NULL>
    gimple_assign <parm_decl, this->_M_escape, __esc, NULL, NULL>
  >
>


struct basic_ostream & std::__detail::operator<< <char, std::char_traits<char>, const std::__cxx11::basic_string<char>&> (struct basic_ostream & __os, const struct _Quoted_string & __str)
gimple_bind <
  bool retval.17;
  struct basic_ostream & D.97500;
  struct __string_type D.95582;
  struct basic_ostringstream __ostr;

  gimple_try <GIMPLE_TRY_FINALLY,
    EVAL <
      gimple_call <__ct_comp , NULL, &__ostr>
      gimple_try <GIMPLE_TRY_FINALLY,
        EVAL <
          gimple_assign <component_ref, _1, __str->_M_delim, NULL, NULL>
          gimple_call <operator<<, NULL, &__ostr.D.76786, _1>
          gimple_bind <
            char __c;
            const struct basic_string & __for_range;
            struct const_iterator __for_begin;
            struct const_iterator __for_end;

            gimple_try <GIMPLE_TRY_FINALLY,
              EVAL <
                gimple_assign <component_ref, __for_range, __str->_M_string, NULL, NULL>
                gimple_call <begin, __for_begin, __for_range>
                gimple_call <end, __for_end, __for_range>
                gimple_goto <<D.95586>>
                gimple_label <<D.95585>>
                gimple_call <operator*, _2, &__for_begin>
                gimple_assign <mem_ref, __c, *_2, NULL, NULL>
                gimple_assign <component_ref, _3, __str->_M_delim, NULL, NULL>
                gimple_cond <eq_expr, __c, _3, <D.97496>, <D.97498>>
                gimple_label <<D.97498>>
                gimple_assign <component_ref, _4, __str->_M_escape, NULL, NULL>
                gimple_cond <eq_expr, __c, _4, <D.97496>, <D.97497>>
                gimple_label <<D.97496>>
                gimple_assign <component_ref, _5, __str->_M_escape, NULL, NULL>
                gimple_call <operator<<, NULL, &__ostr.D.76786, _5>
                gimple_label <<D.97497>>
                gimple_call <operator<<, NULL, &__ostr.D.76786, __c>
                gimple_call <operator++, NULL, &__for_begin>
                gimple_label <<D.95586>>
                gimple_call <operator!=, retval.17, &__for_begin, &__for_end>
                gimple_cond <ne_expr, retval.17, 0, <D.95585>, <D.95583>>
                gimple_label <<D.95583>>
              >
              CLEANUP <
                gimple_assign <constructor, __for_begin, {CLOBBER(eol)}, NULL, NULL>
                gimple_assign <constructor, __for_end, {CLOBBER(eol)}, NULL, NULL>
              >
            >
          >
          gimple_assign <component_ref, _6, __str->_M_delim, NULL, NULL>
          gimple_call <operator<<, NULL, &__ostr.D.76786, _6>
          gimple_try <GIMPLE_TRY_FINALLY,
            EVAL <
              gimple_call <str, D.95582, &__ostr> [return slot optimization]
              gimple_try <GIMPLE_TRY_FINALLY,
                EVAL <
                  gimple_call <operator<<, D.97500, __os, &D.95582>
                  gimple_return <D.97500>
                >
                CLEANUP <
                  gimple_call <__dt_comp , NULL, &D.95582>
                >
              >
            >
            CLEANUP <
              gimple_assign <constructor, D.95582, {CLOBBER(eol)}, NULL, NULL>
            >
          >
        >
        CLEANUP <
          gimple_call <__dt_comp , NULL, &__ostr>
        >
      >
    >
    CLEANUP <
      gimple_assign <constructor, __ostr, {CLOBBER(eol)}, NULL, NULL>
    >
  >
>


const char & __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >::operator* (const struct __normal_iterator * const this)
gimple_bind <
  const char & D.97512;

  gimple_try <GIMPLE_TRY_CATCH,
    EVAL <
      gimple_assign <component_ref, D.97512, this->_M_current, NULL, NULL>
      gimple_return <D.97512>
    >
    CLEANUP <
      gimple_eh_must_not_throw <terminate>
    >
  >
>


struct __normal_iterator & __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >::operator++ (struct __normal_iterator * const this)
gimple_bind <
  struct __normal_iterator & D.97514;

  gimple_try <GIMPLE_TRY_CATCH,
    EVAL <
      gimple_assign <component_ref, _1, this->_M_current, NULL, NULL>
      gimple_assign <pointer_plus_expr, _2, _1, 1, NULL>
      gimple_assign <ssa_name, this->_M_current, _2, NULL, NULL>
      gimple_assign <parm_decl, D.97514, this, NULL, NULL>
      gimple_return <D.97514>
    >
    CLEANUP <
      gimple_eh_must_not_throw <terminate>
    >
  >
>


__attribute__((nodiscard))
bool __gnu_cxx::operator!=<const char*, std::__cxx11::basic_string<char> > (const struct __normal_iterator & __lhs, const struct __normal_iterator & __rhs)
gimple_bind <
  bool D.97516;

  gimple_try <GIMPLE_TRY_CATCH,
    EVAL <
      gimple_call <base, _1, __lhs>
      gimple_assign <mem_ref, _2, *_1, NULL, NULL>
      gimple_call <base, _3, __rhs>
      gimple_assign <mem_ref, _4, *_3, NULL, NULL>
      gimple_assign <ne_expr, D.97516, _2, _4, NULL>
      gimple_return <D.97516>
    >
    CLEANUP <
      gimple_eh_must_not_throw <terminate>
    >
  >
>


const char * const & __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >::base (const struct __normal_iterator * const this)
gimple_bind <
  const char * const & D.97518;

  gimple_try <GIMPLE_TRY_CATCH,
    EVAL <
      gimple_assign <addr_expr, D.97518, &this->_M_current, NULL, NULL>
      gimple_return <D.97518>
    >
    CLEANUP <
      gimple_eh_must_not_throw <terminate>
    >
  >
>


void std::filesystem::__cxx11::path::~path (struct path * const this)
gimple_bind <
  gimple_bind <
    gimple_try <GIMPLE_TRY_FINALLY,
      EVAL <
        gimple_try <GIMPLE_TRY_FINALLY,
          EVAL <
            gimple_try <GIMPLE_TRY_FINALLY,
              EVAL <

              >
              CLEANUP <
                gimple_assign <addr_expr, _1, &this->_M_cmpts, NULL, NULL>
                gimple_call <__dt_comp , NULL, _1>
              >
            >
          >
          CLEANUP <
            gimple_assign <addr_expr, _2, &this->_M_pathname, NULL, NULL>
            gimple_call <__dt_comp , NULL, _2>
          >
        >
      >
      CLEANUP <
        gimple_assign <constructor, *this, {CLOBBER}, NULL, NULL>
      >
    >
  >
  gimple_label <<D.83279>>
>


void std::filesystem::__cxx11::path::_List::~_List (struct _List * const this)
gimple_bind <
  gimple_bind <
    gimple_try <GIMPLE_TRY_FINALLY,
      EVAL <
        gimple_try <GIMPLE_TRY_FINALLY,
          EVAL <

          >
          CLEANUP <
            gimple_assign <addr_expr, _1, &this->_M_impl, NULL, NULL>
            gimple_call <__dt_comp , NULL, _1>
          >
        >
      >
      CLEANUP <
        gimple_assign <constructor, *this, {CLOBBER}, NULL, NULL>
      >
    >
  >
  gimple_label <<D.83274>>
>


void std::unique_ptr<std::filesystem::__cxx11::path::_List::_Impl, std::filesystem::__cxx11::path::_List::_Impl_deleter>::~unique_ptr (struct unique_ptr * const this)
gimple_bind <
  gimple_try <GIMPLE_TRY_CATCH,
    EVAL <
      gimple_bind <
        gimple_try <GIMPLE_TRY_FINALLY,
          EVAL <
            gimple_bind <
              struct _Impl * & __ptr;

              gimple_assign <addr_expr, _1, &this->_M_t.D.82803, NULL, NULL>
              gimple_call <_M_ptr, __ptr, _1>
              gimple_assign <mem_ref, _2, *__ptr, NULL, NULL>
              gimple_cond <ne_expr, _2, 0B, <D.97520>, <D.97521>>
              gimple_label <<D.97520>>
              gimple_call <get_deleter, _3, this>
              gimple_call <move, _4, __ptr>
              gimple_assign <mem_ref, _5, *_4, NULL, NULL>
              gimple_call <operator(), NULL, _3, _5>
              gimple_goto <<D.97522>>
              gimple_label <<D.97521>>
              gimple_label <<D.97522>>
              gimple_assign <integer_cst, *__ptr, 0B, NULL, NULL>
            >
          >
          CLEANUP <
            gimple_assign <constructor, *this, {CLOBBER}, NULL, NULL>
          >
        >
      >
      gimple_label <<D.92408>>
    >
    CLEANUP <
      gimple_eh_must_not_throw <terminate>
    >
  >
>


struct _Impl * & std::__uniq_ptr_impl<std::filesystem::__cxx11::path::_List::_Impl, std::filesystem::__cxx11::path::_List::_Impl_deleter>::_M_ptr (struct __uniq_ptr_impl * const this)
gimple_bind <
  struct _Impl * & D.97523;

  gimple_try <GIMPLE_TRY_CATCH,
    EVAL <
      gimple_assign <addr_expr, _1, &this->_M_t, NULL, NULL>
      gimple_call <get, D.97523, _1>
      gimple_return <D.97523>
    >
    CLEANUP <
      gimple_eh_must_not_throw <terminate>
    >
  >
>


struct _Impl * & std::get<0, std::filesystem::__cxx11::path::_List::_Impl*, std::filesystem::__cxx11::path::_List::_Impl_deleter> (struct tuple & __t)
gimple_bind <
  struct _Impl * & D.97525;

  gimple_try <GIMPLE_TRY_CATCH,
    EVAL <
      gimple_assign <addr_expr, _1, &__t->D.82434, NULL, NULL>
      gimple_call <__get_helper, D.97525, _1>
      gimple_return <D.97525>
    >
    CLEANUP <
      gimple_eh_must_not_throw <terminate>
    >
  >
>


struct _Impl * & std::__get_helper<0, std::filesystem::__cxx11::path::_List::_Impl*, std::filesystem::__cxx11::path::_List::_Impl_deleter> (struct _Tuple_impl & __t)
gimple_bind <
  struct _Impl * & D.97527;

  gimple_try <GIMPLE_TRY_CATCH,
    EVAL <
      gimple_call <_M_head, D.97527, __t>
      gimple_return <D.97527>
    >
    CLEANUP <
      gimple_eh_must_not_throw <terminate>
    >
  >
>


struct _Impl * & std::_Tuple_impl<0, std::filesystem::__cxx11::path::_List::_Impl*, std::filesystem::__cxx11::path::_List::_Impl_deleter>::_M_head (struct _Tuple_impl & __t)
gimple_bind <
  struct _Impl * & D.97529;

  gimple_try <GIMPLE_TRY_CATCH,
    EVAL <
      gimple_assign <addr_expr, _1, &__t->D.81269, NULL, NULL>
      gimple_call <_M_head, D.97529, _1>
      gimple_return <D.97529>
    >
    CLEANUP <
      gimple_eh_must_not_throw <terminate>
    >
  >
>


struct _Impl * & std::_Head_base<0, std::filesystem::__cxx11::path::_List::_Impl*, false>::_M_head (struct _Head_base & __b)
gimple_bind <
  struct _Impl * & D.97531;

  gimple_try <GIMPLE_TRY_CATCH,
    EVAL <
      gimple_assign <addr_expr, D.97531, &__b->_M_head_impl, NULL, NULL>
      gimple_return <D.97531>
    >
    CLEANUP <
      gimple_eh_must_not_throw <terminate>
    >
  >
>


struct deleter_type & std::unique_ptr<std::filesystem::__cxx11::path::_List::_Impl, std::filesystem::__cxx11::path::_List::_Impl_deleter>::get_deleter (struct unique_ptr * const this)
gimple_bind <
  struct deleter_type & D.97533;

  gimple_try <GIMPLE_TRY_CATCH,
    EVAL <
      gimple_assign <addr_expr, _1, &this->_M_t.D.82803, NULL, NULL>
      gimple_call <_M_deleter, D.97533, _1>
      gimple_return <D.97533>
    >
    CLEANUP <
      gimple_eh_must_not_throw <terminate>
    >
  >
>


struct _Impl_deleter & std::__uniq_ptr_impl<std::filesystem::__cxx11::path::_List::_Impl, std::filesystem::__cxx11::path::_List::_Impl_deleter>::_M_deleter (struct __uniq_ptr_impl * const this)
gimple_bind <
  struct _Impl_deleter & D.97535;

  gimple_try <GIMPLE_TRY_CATCH,
    EVAL <
      gimple_assign <addr_expr, _1, &this->_M_t, NULL, NULL>
      gimple_call <get, D.97535, _1>
      gimple_return <D.97535>
    >
    CLEANUP <
      gimple_eh_must_not_throw <terminate>
    >
  >
>


struct __tuple_element_t & std::get<1, std::filesystem::__cxx11::path::_List::_Impl*, std::filesystem::__cxx11::path::_List::_Impl_deleter> (struct tuple & __t)
gimple_bind <
  struct __tuple_element_t & D.97537;

  gimple_try <GIMPLE_TRY_CATCH,
    EVAL <
      gimple_call <__get_helper, D.97537, __t>
      gimple_return <D.97537>
    >
    CLEANUP <
      gimple_eh_must_not_throw <terminate>
    >
  >
>


struct _Impl_deleter & std::__get_helper<1, std::filesystem::__cxx11::path::_List::_Impl_deleter> (struct _Tuple_impl & __t)
gimple_bind <
  struct _Impl_deleter & D.97539;

  gimple_try <GIMPLE_TRY_CATCH,
    EVAL <
      gimple_call <_M_head, D.97539, __t>
      gimple_return <D.97539>
    >
    CLEANUP <
      gimple_eh_must_not_throw <terminate>
    >
  >
>


struct _Impl_deleter & std::_Tuple_impl<1, std::filesystem::__cxx11::path::_List::_Impl_deleter>::_M_head (struct _Tuple_impl & __t)
gimple_bind <
  struct _Impl_deleter & D.97541;

  gimple_try <GIMPLE_TRY_CATCH,
    EVAL <
      gimple_call <_M_head, D.97541, __t>
      gimple_return <D.97541>
    >
    CLEANUP <
      gimple_eh_must_not_throw <terminate>
    >
  >
>


struct _Impl_deleter & std::_Head_base<1, std::filesystem::__cxx11::path::_List::_Impl_deleter, true>::_M_head (struct _Head_base & __b)
gimple_bind <
  struct _Impl_deleter & D.97543;

  gimple_try <GIMPLE_TRY_CATCH,
    EVAL <
      gimple_assign <addr_expr, D.97543, &__b->_M_head_impl, NULL, NULL>
      gimple_return <D.97543>
    >
    CLEANUP <
      gimple_eh_must_not_throw <terminate>
    >
  >
>


__attribute__((nodiscard))
struct _Impl * & std::move<std::filesystem::__cxx11::path::_List::_Impl*&> (struct _Impl * & __t)
gimple_bind <
  struct _Impl * & D.97545;

  gimple_try <GIMPLE_TRY_CATCH,
    EVAL <
      gimple_assign <parm_decl, D.97545, __t, NULL, NULL>
      gimple_return <D.97545>
    >
    CLEANUP <
      gimple_eh_must_not_throw <terminate>
    >
  >
>


void register_signal ()
gimple_bind <
  gimple_call <signal, NULL, 6, sighandle>
  gimple_call <signal, NULL, 7, sighandle>
  gimple_call <signal, NULL, 8, sighandle>
  gimple_call <signal, NULL, 4, sighandle>
  gimple_call <signal, NULL, 3, sighandle>
  gimple_call <signal, NULL, 11, sighandle>
  gimple_call <signal, NULL, 31, sighandle>
  gimple_call <signal, NULL, 5, sighandle>
  gimple_call <signal, NULL, 24, sighandle>
  gimple_call <signal, NULL, 25, sighandle>
>


void execute_script (const struct string & scriptPath)
gimple_bind <
  bool retval.19;
  bool retval.21;
  int stdout_pipe[2];
  int stderr_pipe[2];
  pid_t pid;

  gimple_try <GIMPLE_TRY_FINALLY,
    EVAL <
      gimple_call <pipe, NULL, &stdout_pipe>
      gimple_call <pipe, NULL, &stderr_pipe>
      gimple_call <fork, pid>
      gimple_bind <
        gimple_cond <eq_expr, pid, 0, <D.97547>, <D.97548>>
        gimple_label <<D.97547>>
        gimple_assign <array_ref, _1, stdout_pipe[0], NULL, NULL>
        gimple_call <close, NULL, _1>
        gimple_assign <array_ref, _2, stderr_pipe[0], NULL, NULL>
        gimple_call <close, NULL, _2>
        gimple_assign <array_ref, _3, stdout_pipe[1], NULL, NULL>
        gimple_call <dup2, NULL, _3, 1>
        gimple_assign <array_ref, _4, stderr_pipe[1], NULL, NULL>
        gimple_call <dup2, NULL, _4, 2>
        gimple_call <c_str, _5, scriptPath>
        gimple_call <execl, NULL, "/bin/bash", "bash", _5, 0>
        gimple_call <_exit, NULL, 1>
        gimple_label <<D.97548>>
        gimple_bind <
          gimple_bind <
            gimple_cond <gt_expr, pid, 0, <D.97549>, <D.97550>>
            gimple_label <<D.97549>>
            gimple_bind <
              struct array buffer;
              ssize_t n;
              int status;

              gimple_try <GIMPLE_TRY_FINALLY,
                EVAL <
                  gimple_assign <array_ref, _6, stdout_pipe[1], NULL, NULL>
                  gimple_call <close, NULL, _6>
                  gimple_assign <array_ref, _7, stderr_pipe[1], NULL, NULL>
                  gimple_call <close, NULL, _7>
                  gimple_goto <<D.89203>>
                  gimple_label <<D.89204>>
                  gimple_assign <nop_expr, n.18_8, n, NULL, NULL>
                  gimple_call <operator[], _9, &buffer, n.18_8>
                  gimple_assign <integer_cst, *_9, 0, NULL, NULL>
                  gimple_call <operator<<, _10, &cout, "[SHINFO] ">
                  gimple_call <data, _11, &buffer>
                  gimple_call <operator<<, NULL, _10, _11>
                  gimple_label <<D.89203>>
                  gimple_assign <array_ref, _12, stdout_pipe[0], NULL, NULL>
                  gimple_call <data, _13, &buffer>
                  gimple_call <size, _14, &buffer>
                  gimple_assign <plus_expr, _15, _14, 18446744073709551615, NULL>
                  gimple_call <read, n, _12, _13, _15>
                  gimple_assign <gt_expr, retval.19, n, 0, NULL>
                  gimple_cond <ne_expr, retval.19, 0, <D.89204>, <D.89202>>
                  gimple_label <<D.89202>>
                  gimple_goto <<D.89206>>
                  gimple_label <<D.89207>>
                  gimple_assign <nop_expr, n.20_16, n, NULL, NULL>
                  gimple_call <operator[], _17, &buffer, n.20_16>
                  gimple_assign <integer_cst, *_17, 0, NULL, NULL>
                  gimple_call <operator<<, _18, &cerr, "[SHERR] ">
                  gimple_call <data, _19, &buffer>
                  gimple_call <operator<<, NULL, _18, _19>
                  gimple_label <<D.89206>>
                  gimple_assign <array_ref, _20, stderr_pipe[0], NULL, NULL>
                  gimple_call <data, _21, &buffer>
                  gimple_call <size, _22, &buffer>
                  gimple_assign <plus_expr, _23, _22, 18446744073709551615, NULL>
                  gimple_call <read, n, _20, _21, _23>
                  gimple_assign <gt_expr, retval.21, n, 0, NULL>
                  gimple_cond <ne_expr, retval.21, 0, <D.89207>, <D.89205>>
                  gimple_label <<D.89205>>
                  gimple_assign <array_ref, _24, stdout_pipe[0], NULL, NULL>
                  gimple_call <close, NULL, _24>
                  gimple_assign <array_ref, _25, stderr_pipe[0], NULL, NULL>
                  gimple_call <close, NULL, _25>
                  gimple_call <waitpid, NULL, pid, &status, 0>
                  gimple_assign <var_decl, status.22_26, status, NULL, NULL>
                  gimple_assign <bit_and_expr, _27, status.22_26, 127, NULL>
                  gimple_cond <eq_expr, _27, 0, <D.97553>, <D.97554>>
                  gimple_label <<D.97553>>
                  gimple_call <operator<<, _28, &cout, "[INFO] Script ">
                  gimple_call <operator<<, _29, _28, scriptPath>
                  gimple_call <operator<<, _30, _29, " exited with status ">
                  gimple_assign <var_decl, status.23_31, status, NULL, NULL>
                  gimple_assign <rshift_expr, _32, status.23_31, 8, NULL>
                  gimple_assign <bit_and_expr, _33, _32, 255, NULL>
                  gimple_call <operator<<, _34, _30, _33>
                  gimple_call <operator<<, NULL, _34, endl>
                  gimple_goto <<D.97555>>
                  gimple_label <<D.97554>>
                  gimple_assign <var_decl, status.24_35, status, NULL, NULL>
                  gimple_assign <nop_expr, _36, status.24_35, NULL, NULL>
                  gimple_assign <bit_and_expr, _37, _36, 127, NULL>
                  gimple_assign <plus_expr, _38, _37, 1, NULL>
                  gimple_assign <nop_expr, _39, _38, NULL, NULL>
                  gimple_assign <rshift_expr, _40, _39, 1, NULL>
                  gimple_cond <gt_expr, _40, 0, <D.97556>, <D.97557>>
                  gimple_label <<D.97556>>
                  gimple_call <operator<<, _41, &cout, "[ERROR] Script ">
                  gimple_call <operator<<, _42, _41, scriptPath>
                  gimple_call <operator<<, _43, _42, " terminated by signal ">
                  gimple_assign <var_decl, status.25_44, status, NULL, NULL>
                  gimple_assign <bit_and_expr, _45, status.25_44, 127, NULL>
                  gimple_call <operator<<, _46, _43, _45>
                  gimple_call <operator<<, NULL, _46, endl>
                  gimple_goto <<D.97558>>
                  gimple_label <<D.97557>>
                  gimple_label <<D.97558>>
                  gimple_label <<D.97555>>
                >
                CLEANUP <
                  gimple_assign <constructor, buffer, {CLOBBER(eol)}, NULL, NULL>
                  gimple_assign <constructor, status, {CLOBBER(eol)}, NULL, NULL>
                >
              >
            >
            gimple_goto <<D.97559>>
            gimple_label <<D.97550>>
            gimple_call <operator<<, NULL, &cerr, "[ERROR] Failed to fork process.\n">
            gimple_call <exit, NULL, 1>
            gimple_label <<D.97559>>
          >
        >
      >
    >
    CLEANUP <
      gimple_assign <constructor, stdout_pipe, {CLOBBER(eol)}, NULL, NULL>
      gimple_assign <constructor, stderr_pipe, {CLOBBER(eol)}, NULL, NULL>
    >
  >
>


__attribute__((nodiscard))
value_type & std::array<char, 128>::operator[] (struct array * const this, size_type __n)
gimple_bind <
  value_type & D.97574;

  gimple_try <GIMPLE_TRY_CATCH,
    EVAL <
      gimple_assign <addr_expr, _1, &this->_M_elems, NULL, NULL>
      gimple_call <_S_ref, D.97574, _1, __n>
      gimple_return <D.97574>
    >
    CLEANUP <
      gimple_eh_must_not_throw <terminate>
    >
  >
>


char & std::__array_traits<char, 128>::_S_ref (const char[128] & __t, size_t __n)
gimple_bind <
  char & D.97576;

  gimple_try <GIMPLE_TRY_CATCH,
    EVAL <
      gimple_assign <addr_expr, D.97576, &(*__t)[__n], NULL, NULL>
      gimple_return <D.97576>
    >
    CLEANUP <
      gimple_eh_must_not_throw <terminate>
    >
  >
>


__attribute__((nodiscard, const))
value_type * std::array<char, 128>::data (struct array * const this)
gimple_bind <
  value_type * D.97578;

  gimple_try <GIMPLE_TRY_CATCH,
    EVAL <
      gimple_assign <addr_expr, _1, &this->_M_elems, NULL, NULL>
      gimple_call <_S_ptr, D.97578, _1>
      gimple_return <D.97578>
    >
    CLEANUP <
      gimple_eh_must_not_throw <terminate>
    >
  >
>


char * std::__array_traits<char, 128>::_S_ptr (const char[128] & __t)
gimple_bind <
  char * D.97580;

  gimple_try <GIMPLE_TRY_CATCH,
    EVAL <
      gimple_assign <parm_decl, D.97580, __t, NULL, NULL>
      gimple_return <D.97580>
    >
    CLEANUP <
      gimple_eh_must_not_throw <terminate>
    >
  >
>


__attribute__((nodiscard, const))
size_type std::array<char, 128>::size (const struct array * const this)
gimple_bind <
  size_type D.97582;

  gimple_try <GIMPLE_TRY_CATCH,
    EVAL <
      gimple_assign <integer_cst, D.97582, 128, NULL, NULL>
      gimple_return <D.97582>
    >
    CLEANUP <
      gimple_eh_must_not_throw <terminate>
    >
  >
>


void monitor_child (pid_t pid)
gimple_bind <
  bool retval.26;
  bool retval.31;
  int status;
  const int timeout;

  gimple_try <GIMPLE_TRY_FINALLY,
    EVAL <
      gimple_assign <integer_cst, timeout, 400, NULL, NULL>
      gimple_bind <
        int i;

        gimple_assign <integer_cst, i, 0, NULL, NULL>
        gimple_goto <<D.89217>>
        gimple_label <<D.89216>>
        gimple_call <waitpid, _1, pid, &status, 1>
        gimple_assign <eq_expr, retval.26, pid, _1, NULL>
        gimple_cond <ne_expr, retval.26, 0, <D.97585>, <D.97586>>
        gimple_label <<D.97585>>
        gimple_assign <var_decl, status.27_2, status, NULL, NULL>
        gimple_assign <bit_and_expr, _3, status.27_2, 127, NULL>
        gimple_cond <eq_expr, _3, 0, <D.97587>, <D.97588>>
        gimple_label <<D.97587>>
        gimple_call <operator<<, _4, &cout, "[INFO] Script exited with status ">
        gimple_assign <var_decl, status.28_5, status, NULL, NULL>
        gimple_assign <rshift_expr, _6, status.28_5, 8, NULL>
        gimple_assign <bit_and_expr, _7, _6, 255, NULL>
        gimple_call <operator<<, _8, _4, _7>
        gimple_call <operator<<, NULL, _8, endl>
        gimple_goto <<D.97589>>
        gimple_label <<D.97588>>
        gimple_assign <var_decl, status.29_9, status, NULL, NULL>
        gimple_assign <nop_expr, _10, status.29_9, NULL, NULL>
        gimple_assign <bit_and_expr, _11, _10, 127, NULL>
        gimple_assign <plus_expr, _12, _11, 1, NULL>
        gimple_assign <nop_expr, _13, _12, NULL, NULL>
        gimple_assign <rshift_expr, _14, _13, 1, NULL>
        gimple_cond <gt_expr, _14, 0, <D.97590>, <D.97591>>
        gimple_label <<D.97590>>
        gimple_call <operator<<, _15, &cout, "[ERROR] Script terminated by signal ">
        gimple_assign <var_decl, status.30_16, status, NULL, NULL>
        gimple_assign <bit_and_expr, _17, status.30_16, 127, NULL>
        gimple_call <operator<<, _18, _15, _17>
        gimple_call <operator<<, NULL, _18, endl>
        gimple_goto <<D.97592>>
        gimple_label <<D.97591>>
        gimple_label <<D.97592>>
        gimple_label <<D.97589>>
        // predicted unlikely by early return (on trees) predictor.
        gimple_return <NULL>
        gimple_label <<D.97586>>
        gimple_call <sleep, NULL, 1>
        gimple_assign <plus_expr, i, i, 1, NULL>
        gimple_label <<D.89217>>
        gimple_cond <le_expr, i, 399, <D.89216>, <D.89214>>
        gimple_label <<D.89214>>
      >
      gimple_call <kill, _19, pid, 9>
      gimple_assign <eq_expr, retval.31, _19, 0, NULL>
      gimple_cond <ne_expr, retval.31, 0, <D.97594>, <D.97595>>
      gimple_label <<D.97594>>
      gimple_call <waitpid, NULL, pid, &status, 0>
      gimple_call <operator<<, NULL, &cerr, "[INFO] Child process killed due to timeout.\n">
      gimple_goto <<D.97596>>
      gimple_label <<D.97595>>
      gimple_call <operator<<, NULL, &cerr, "[ERROR] Failed to kill child process.\n">
      gimple_call <exit, NULL, 4>
      gimple_label <<D.97596>>
    >
    CLEANUP <
      gimple_assign <constructor, status, {CLOBBER(eol)}, NULL, NULL>
    >
  >
>


int main ()
gimple_bind <
  const struct string D.89223;
  struct allocator D.89222;
  int D.97606;

  gimple_bind <
    struct array buffer;
    struct string result;

    gimple_try <GIMPLE_TRY_FINALLY,
      EVAL <
        gimple_call <register_signal, NULL>
        gimple_call <__ct_comp , NULL, &result>
        gimple_try <GIMPLE_TRY_FINALLY,
          EVAL <
            gimple_try <GIMPLE_TRY_FINALLY,
              EVAL <
                gimple_try <GIMPLE_TRY_FINALLY,
                  EVAL <
                    gimple_call <__ct_comp , NULL, &D.89222>
                    gimple_try <GIMPLE_TRY_FINALLY,
                      EVAL <
                        gimple_call <__ct_comp , NULL, &D.89223, "./log.sh", &D.89222>
                        gimple_try <GIMPLE_TRY_FINALLY,
                          EVAL <
                            gimple_call <execute_script, NULL, &D.89223>
                          >
                          CLEANUP <
                            gimple_call <__dt_comp , NULL, &D.89223>
                          >
                        >
                      >
                      CLEANUP <
                        gimple_call <__dt_comp , NULL, &D.89222>
                      >
                    >
                  >
                  CLEANUP <
                    gimple_assign <constructor, D.89222, {CLOBBER(eol)}, NULL, NULL>
                  >
                >
              >
              CLEANUP <
                gimple_assign <constructor, D.89223, {CLOBBER(eol)}, NULL, NULL>
              >
            >
            gimple_call <c_str, _1, &result>
            gimple_call <write_log, NULL, _1>
            gimple_assign <integer_cst, D.97606, 0, NULL, NULL>
            gimple_return <D.97606>
          >
          CLEANUP <
            gimple_call <__dt_comp , NULL, &result>
          >
        >
      >
      CLEANUP <
        gimple_assign <constructor, buffer, {CLOBBER(eol)}, NULL, NULL>
        gimple_assign <constructor, result, {CLOBBER(eol)}, NULL, NULL>
      >
    >
  >
  gimple_assign <integer_cst, D.97606, 0, NULL, NULL>
  gimple_return <D.97606>
>


void std::__cxx11::basic_string<char>::basic_string (struct basic_string * const this)
gimple_bind <
  struct allocator D.92415;

  gimple_try <GIMPLE_TRY_CATCH,
    EVAL <
      gimple_assign <constructor, *this, {CLOBBER}, NULL, NULL>
      gimple_bind <
        gimple_assign <addr_expr, _1, &this->_M_dataplus, NULL, NULL>
        gimple_call <_M_local_data, _2, this>
        gimple_try <GIMPLE_TRY_FINALLY,
          EVAL <
            gimple_call <__ct_comp , NULL, &D.92415>
            gimple_try <GIMPLE_TRY_FINALLY,
              EVAL <
                gimple_call <__ct_comp , NULL, _1, _2, &D.92415>
              >
              CLEANUP <
                gimple_call <__dt_comp , NULL, &D.92415>
              >
            >
          >
          CLEANUP <
            gimple_assign <constructor, D.92415, {CLOBBER(eol)}, NULL, NULL>
          >
        >
        gimple_try <GIMPLE_TRY_CATCH,
          EVAL <
            gimple_call <_M_use_local_data, NULL, this>
            gimple_call <_M_set_length, NULL, this, 0>
          >
          CLEANUP <
            gimple_assign <addr_expr, _3, &this->_M_dataplus, NULL, NULL>
            gimple_call <__dt_comp , NULL, _3>
          >
        >
      >
    >
    CLEANUP <
      gimple_eh_must_not_throw <terminate>
    >
  >
>


void __static_initialization_and_destruction_0 (int __initialize_p, int __priority)
gimple_bind <
  struct allocator D.88958;

  gimple_cond <eq_expr, __initialize_p, 1, <D.97616>, <D.97617>>
  gimple_label <<D.97616>>
  gimple_cond <eq_expr, __priority, 65535, <D.97618>, <D.97619>>
  gimple_label <<D.97618>>
  gimple_call <__ct_comp , NULL, &__ioinit>
  gimple_call <__cxa_atexit, NULL, __dt_comp , &__ioinit, &__dso_handle>
  gimple_try <GIMPLE_TRY_FINALLY,
    EVAL <
      gimple_call <__ct_comp , NULL, &D.88958>
      gimple_try <GIMPLE_TRY_FINALLY,
        EVAL <
          gimple_call <__ct_comp , NULL, &log_path, "./program_crash.log", &D.88958>
        >
        CLEANUP <
          gimple_call <__dt_comp , NULL, &D.88958>
        >
      >
    >
    CLEANUP <
      gimple_assign <constructor, D.88958, {CLOBBER(eol)}, NULL, NULL>
    >
  >
  gimple_call <__cxa_atexit, NULL, __dt_comp , &log_path, &__dso_handle>
  gimple_goto <<D.97620>>
  gimple_label <<D.97619>>
  gimple_label <<D.97620>>
  gimple_goto <<D.97621>>
  gimple_label <<D.97617>>
  gimple_label <<D.97621>>
>


void _GLOBAL__sub_I__Z8logErrorRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_i ()
gimple_bind <
  gimple_call <__static_initialization_and_destruction_0, NULL, 1, 65535>
>


