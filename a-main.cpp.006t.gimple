void logError (const struct string & func, const struct string & file, int line)
{
  struct allocator D.88807;
  struct allocator D.88810;
  const struct string RED;
  const struct string RESET;

  try
    {
      # DEBUG BEGIN_STMT
      try
        {
          std::allocator<char>::allocator (&D.88807);
          try
            {
              std::__cxx11::basic_string<char>::basic_string<> (&RED, "\x1b[31m", &D.88807);
            }
          finally
            {
              std::allocator<char>::~allocator (&D.88807);
            }
        }
      finally
        {
          D.88807 = {CLOBBER(eol)};
        }
      try
        {
          # DEBUG BEGIN_STMT
          try
            {
              std::allocator<char>::allocator (&D.88810);
              try
                {
                  std::__cxx11::basic_string<char>::basic_string<> (&RESET, "\x1b[0m", &D.88810);
                }
              finally
                {
                  std::allocator<char>::~allocator (&D.88810);
                }
            }
          finally
            {
              D.88810 = {CLOBBER(eol)};
            }
          try
            {
              # DEBUG BEGIN_STMT
              _1 = std::operator<< <char, std::char_traits<char>, std::allocator<char> > (&cerr, &RED);
              _2 = std::operator<< <std::char_traits<char> > (_1, "In ");
              _3 = std::operator<< <char, std::char_traits<char>, std::allocator<char> > (_2, func);
              _4 = std::operator<< <std::char_traits<char> > (_3, "() in ");
              _5 = std::operator<< <char, std::char_traits<char>, std::allocator<char> > (_4, file);
              _6 = std::operator<< <std::char_traits<char> > (_5, " line ");
              _7 = std::basic_ostream<char>::operator<< (_6, line);
              _8 = std::operator<< <std::char_traits<char> > (_7, ":");
              _9 = std::operator<< <char, std::char_traits<char>, std::allocator<char> > (_8, &RESET);
              std::basic_ostream<char>::operator<< (_9, endl);
            }
          finally
            {
              std::__cxx11::basic_string<char>::~basic_string (&RESET);
            }
        }
      finally
        {
          std::__cxx11::basic_string<char>::~basic_string (&RED);
        }
    }
  finally
    {
      RED = {CLOBBER(eol)};
      RESET = {CLOBBER(eol)};
    }
}


struct basic_ostream & std::endl<char, std::char_traits<char> > (struct basic_ostream & __os)
{
  struct basic_ostream & D.97444;

  _1 = __os->_vptr.basic_ostream;
  _2 = _1 + 18446744073709551592;
  _3 = MEM[(long int *)_2];
  _4 = (sizetype) _3;
  _5 = __os + _4;
  _6 = std::basic_ios<char>::widen (_5, 10);
  _7 = std::basic_ostream<char>::put (__os, _6);
  D.97444 = std::flush<char, std::char_traits<char> > (_7);
  return D.97444;
}


char_type std::basic_ios<char>::widen (const struct basic_ios * const this, char __c)
{
  char_type D.97449;

  _1 = this->_M_ctype;
  _2 = std::__check_facet<std::ctype<char> > (_1);
  D.97449 = std::ctype<char>::widen (_2, __c);
  return D.97449;
}


const struct ctype & std::__check_facet<std::ctype<char> > (const struct ctype * __f)
{
  const struct ctype & D.97455;

  if (__f == 0B) goto <D.97453>; else goto <D.97454>;
  <D.97453>:
  std::__throw_bad_cast ();
  <D.97454>:
  D.97455 = __f;
  return D.97455;
}


char_type std::ctype<char>::widen (const struct ctype * const this, char __c)
{
  char_type D.97459;

  # DEBUG BEGIN_STMT
  _1 = this->_M_widen_ok;
  if (_1 != 0) goto <D.97457>; else goto <D.97458>;
  <D.97457>:
  # DEBUG BEGIN_STMT
  _2 = (int) __c;
  D.97459 = this->_M_widen[_2];
  // predicted unlikely by early return (on trees) predictor.
  return D.97459;
  <D.97458>:
  # DEBUG BEGIN_STMT
  std::ctype<char>::_M_widen_init (this);
  # DEBUG BEGIN_STMT
  _3 = this->D.40314._vptr.facet;
  _4 = _3 + 48;
  _5 = *_4;
  D.97459 = OBJ_TYPE_REF(_5;(const struct ctype)this->6B) (this, __c);
  return D.97459;
}


struct basic_ostream & std::flush<char, std::char_traits<char> > (struct basic_ostream & __os)
{
  struct basic_ostream & D.97462;

  D.97462 = std::basic_ostream<char>::flush (__os);
  return D.97462;
}


void std::allocator<char>::allocator (struct allocator * const this)
{
  try
    {
      {
        std::__new_allocator<char>::__new_allocator (this);
        try
          {

          }
        catch
          {
            std::__new_allocator<char>::~__new_allocator (this);
          }
      }
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
}


void std::__new_allocator<char>::__new_allocator (struct __new_allocator * const this)
{
  try
    {
      {

      }
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
}


void std::__cxx11::basic_string<char>::basic_string<> (struct basic_string * const this, const char * __s, const struct allocator & __a)
{
  struct forward_iterator_tag D.97467;

  *this = {CLOBBER};
  {
    _1 = &this->_M_dataplus;
    _2 = std::__cxx11::basic_string<char>::_M_local_data (this);
    std::__cxx11::basic_string<char>::_Alloc_hider::_Alloc_hider (_1, _2, __a);
    try
      {
        {
          const char * __end;

          if (__s == 0B) goto <D.97465>; else goto <D.97466>;
          <D.97465>:
          std::__throw_logic_error ("basic_string: construction from null is not valid");
          <D.97466>:
          _3 = std::char_traits<char>::length (__s);
          __end = __s + _3;
          std::__cxx11::basic_string<char>::_M_construct<const char*> (this, __s, __end, D.97467);
        }
      }
    catch
      {
        _4 = &this->_M_dataplus;
        std::__cxx11::basic_string<char>::_Alloc_hider::~_Alloc_hider (_4);
      }
  }
}


char * std::__cxx11::basic_string<char>::_M_local_data (struct basic_string * const this)
{
  char * D.97470;

  _1 = &this->D.28191._M_local_buf;
  D.97470 = std::__ptr_traits_ptr_to<char*, char, false>::pointer_to (_1);
  return D.97470;
}


char * std::__ptr_traits_ptr_to<char*, char, false>::pointer_to (element_type & __r)
{
  char * D.97472;

  try
    {
      D.97472 = __r;
      return D.97472;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


void std::__cxx11::basic_string<char>::_Alloc_hider::_Alloc_hider (struct _Alloc_hider * const this, char * __dat, const struct allocator & __a)
{
  *this = {CLOBBER};
  {
    std::allocator<char>::allocator (this, __a);
    try
      {
        this->_M_p = __dat;
      }
    catch
      {
        std::allocator<char>::~allocator (this);
      }
  }
}


void std::allocator<char>::allocator (struct allocator * const this, const struct allocator & __a)
{
  try
    {
      {
        std::__new_allocator<char>::__new_allocator (this, __a);
        try
          {

          }
        catch
          {
            std::__new_allocator<char>::~__new_allocator (this);
          }
      }
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
}


void std::__new_allocator<char>::__new_allocator (struct __new_allocator * const this, const struct __new_allocator & D.12256)
{
  try
    {
      {

      }
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
}


size_t std::char_traits<char>::length (const char_type * __s)
{
  bool retval.0;
  size_t D.97477;

  # DEBUG BEGIN_STMT
  retval.0 = std::__is_constant_evaluated ();
  if (retval.0 != 0) goto <D.97475>; else goto <D.97476>;
  <D.97475>:
  # DEBUG BEGIN_STMT
  D.97477 = __gnu_cxx::char_traits<char>::length (__s);
  return D.97477;
  <D.97476>:
  # DEBUG BEGIN_STMT
  D.97477 = __builtin_strlen (__s);
  return D.97477;
}


bool std::__is_constant_evaluated ()
{
  bool D.97480;

  try
    {
      # DEBUG BEGIN_STMT
      D.97480 = 0;
      return D.97480;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


size_t __gnu_cxx::char_traits<char>::length (const char_type * __p)
{
  bool retval.1;
  const char_type D.89317;
  size_t D.97483;
  size_t __i;

  __i = 0;
  goto <D.89323>;
  <D.89324>:
  __i = __i + 1;
  <D.89323>:
  # DEBUG BEGIN_STMT
  _1 = __p + __i;
  try
    {
      D.89317 = 0;
      _2 = __gnu_cxx::char_traits<char>::eq (_1, &D.89317);
      retval.1 = ~_2;
    }
  finally
    {
      D.89317 = {CLOBBER(eol)};
    }
  if (retval.1 != 0) goto <D.89324>; else goto <D.89322>;
  <D.89322>:
  D.97483 = __i;
  return D.97483;
}


bool __gnu_cxx::char_traits<char>::eq (const char_type & __c1, const char_type & __c2)
{
  bool D.97485;

  _1 = *__c1;
  _2 = *__c2;
  D.97485 = _1 == _2;
  return D.97485;
}


void std::__cxx11::basic_string<char>::_M_construct<const char*> (struct basic_string * const this, const char * __beg, const char * __end, struct forward_iterator_tag D.93714)
{
  size_type __dnew;
  typedef struct _Guard _Guard;
  struct _Guard __guard;

  try
    {
      _1 = std::distance<const char*> (__beg, __end);
      _2 = (long unsigned int) _1;
      __dnew = _2;
      __dnew.2_3 = __dnew;
      if (__dnew.2_3 > 15) goto <D.97487>; else goto <D.97488>;
      <D.97487>:
      _4 = std::__cxx11::basic_string<char>::_M_create (this, &__dnew, 0);
      std::__cxx11::basic_string<char>::_M_data (this, _4);
      __dnew.3_5 = __dnew;
      std::__cxx11::basic_string<char>::_M_capacity (this, __dnew.3_5);
      goto <D.97489>;
      <D.97488>:
      std::__cxx11::basic_string<char>::_M_use_local_data (this);
      <D.97489>:
      std::__cxx11::basic_string<char>::_M_construct<const char*>(const char*, const char*, std::forward_iterator_tag)::_Guard::_Guard (&__guard, this);
      try
        {
          _6 = std::__cxx11::basic_string<char>::_M_data (this);
          std::__cxx11::basic_string<char>::_S_copy_chars (_6, __beg, __end);
          __guard._M_guarded = 0B;
          __dnew.4_7 = __dnew;
          std::__cxx11::basic_string<char>::_M_set_length (this, __dnew.4_7);
        }
      finally
        {
          std::__cxx11::basic_string<char>::_M_construct<const char*>(const char*, const char*, std::forward_iterator_tag)::_Guard::~_Guard (&__guard);
        }
    }
  finally
    {
      __dnew = {CLOBBER(eol)};
      __guard = {CLOBBER(eol)};
    }
}


__attribute__((nodiscard))
difference_type std::distance<const char*> (const char * __first, const char * __last)
{
  difference_type D.97493;
  struct iterator_category D.95829;
  struct random_access_iterator_tag D.97494;

  __first.5_1 = __first;
  D.97493 = std::__distance<const char*> (__first.5_1, __last, D.97494);
  return D.97493;
}


difference_type std::__distance<const char*> (const char * __first, const char * __last, struct random_access_iterator_tag D.96410)
{
  difference_type D.97496;

  D.97496 = __last - __first;
  return D.97496;
}


void std::__cxx11::basic_string<char>::_M_data (struct basic_string * const this, char * __p)
{
  this->_M_dataplus._M_p = __p;
}


void std::__cxx11::basic_string<char>::_M_capacity (struct basic_string * const this, size_type __capacity)
{
  this->D.28191._M_allocated_capacity = __capacity;
}


__attribute__((always_inline))
char * std::__cxx11::basic_string<char>::_M_use_local_data (struct basic_string * const this)
{
  char * D.97498;

  try
    {
      D.97498 = std::__cxx11::basic_string<char>::_M_local_data (this);
      return D.97498;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


void std::__cxx11::basic_string<char>::_M_construct<const char*>(const char*, const char*, std::forward_iterator_tag)::_Guard::_Guard (struct _Guard * const this, struct basic_string * __s)
{
  *this = {CLOBBER};
  {
    this->_M_guarded = __s;
  }
}


char * std::__cxx11::basic_string<char>::_M_data (const struct basic_string * const this)
{
  char * D.97500;

  D.97500 = this->_M_dataplus._M_p;
  return D.97500;
}


void std::__cxx11::basic_string<char>::_S_copy_chars (char * __p, const char * __k1, const char * __k2)
{
  try
    {
      _1 = __k2 - __k1;
      _2 = (long unsigned int) _1;
      std::__cxx11::basic_string<char>::_S_copy (__p, __k1, _2);
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
}


void std::__cxx11::basic_string<char>::_S_copy (char * __d, const char * __s, size_type __n)
{
  if (__n == 1) goto <D.97502>; else goto <D.97503>;
  <D.97502>:
  std::char_traits<char>::assign (__d, __s);
  goto <D.97504>;
  <D.97503>:
  std::char_traits<char>::copy (__d, __s, __n);
  <D.97504>:
}


void std::char_traits<char>::assign (char_type & __c1, const char_type & __c2)
{
  try
    {
      # DEBUG BEGIN_STMT
      _1 = *__c2;
      *__c1 = _1;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
}


char_type * std::char_traits<char>::copy (char_type * __s1, const char_type * __s2, size_t __n)
{
  char_type * D.97507;

  # DEBUG BEGIN_STMT
  if (__n == 0) goto <D.97505>; else goto <D.97506>;
  <D.97505>:
  # DEBUG BEGIN_STMT
  D.97507 = __s1;
  // predicted unlikely by early return (on trees) predictor.
  return D.97507;
  <D.97506>:
  # DEBUG BEGIN_STMT
  D.97507 = __builtin_memcpy (__s1, __s2, __n);
  return D.97507;
}


void std::__cxx11::basic_string<char>::_M_set_length (struct basic_string * const this, size_type __n)
{
  const char_type D.93657;

  std::__cxx11::basic_string<char>::_M_length (this, __n);
  _1 = std::__cxx11::basic_string<char>::_M_data (this);
  _2 = _1 + __n;
  try
    {
      D.93657 = 0;
      std::char_traits<char>::assign (_2, &D.93657);
    }
  finally
    {
      D.93657 = {CLOBBER(eol)};
    }
}


void std::__cxx11::basic_string<char>::_M_length (struct basic_string * const this, size_type __length)
{
  this->_M_string_length = __length;
}


void std::__cxx11::basic_string<char>::_M_construct<const char*>(const char*, const char*, std::forward_iterator_tag)::_Guard::~_Guard (struct _Guard * const this)
{
  try
    {
      {
        try
          {
            _1 = this->_M_guarded;
            if (_1 != 0B) goto <D.97509>; else goto <D.97510>;
            <D.97509>:
            _2 = this->_M_guarded;
            std::__cxx11::basic_string<char>::_M_dispose (_2);
            goto <D.97511>;
            <D.97510>:
            <D.97511>:
          }
        finally
          {
            *this = {CLOBBER};
          }
      }
      <D.93751>:
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
}


void std::__cxx11::basic_string<char>::_M_dispose (struct basic_string * const this)
{
  bool retval.6;

  _1 = std::__cxx11::basic_string<char>::_M_is_local (this);
  retval.6 = ~_1;
  if (retval.6 != 0) goto <D.97513>; else goto <D.97514>;
  <D.97513>:
  _2 = this->D.28191._M_allocated_capacity;
  std::__cxx11::basic_string<char>::_M_destroy (this, _2);
  goto <D.97515>;
  <D.97514>:
  <D.97515>:
}


bool std::__cxx11::basic_string<char>::_M_is_local (const struct basic_string * const this)
{
  bool D.97517;

  _1 = std::__cxx11::basic_string<char>::_M_data (this);
  _2 = std::__cxx11::basic_string<char>::_M_local_data (this);
  D.97517 = _1 == _2;
  return D.97517;
}


const char * std::__cxx11::basic_string<char>::_M_local_data (const struct basic_string * const this)
{
  const char * D.97519;

  _1 = &this->D.28191._M_local_buf;
  D.97519 = std::__ptr_traits_ptr_to<const char*, const char, false>::pointer_to (_1);
  return D.97519;
}


const char * std::__ptr_traits_ptr_to<const char*, const char, false>::pointer_to (const element_type & __r)
{
  const char * D.97521;

  try
    {
      D.97521 = __r;
      return D.97521;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


void std::__cxx11::basic_string<char>::_M_destroy (struct basic_string * const this, size_type __size)
{
  try
    {
      _1 = std::__cxx11::basic_string<char>::_M_get_allocator (this);
      _2 = std::__cxx11::basic_string<char>::_M_data (this);
      _3 = __size + 1;
      std::allocator_traits<std::allocator<char> >::deallocate (_1, _2, _3);
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
}


struct allocator_type & std::__cxx11::basic_string<char>::_M_get_allocator (struct basic_string * const this)
{
  struct allocator_type & D.97523;

  D.97523 = &this->_M_dataplus;
  return D.97523;
}


void std::allocator_traits<std::allocator<char> >::deallocate (struct allocator_type & __a, char * __p, size_type __n)
{
  std::__new_allocator<char>::deallocate (__a, __p, __n);
}


void std::__new_allocator<char>::deallocate (struct __new_allocator * const this, char * __p, size_type __n)
{
  if (0 != 0) goto <D.97525>; else goto <D.97526>;
  <D.97525>:
  operator delete (__p, __n, 1);
  // predicted unlikely by early return (on trees) predictor.
  return;
  <D.97526>:
  operator delete (__p, __n);
}


void std::__cxx11::basic_string<char>::_Alloc_hider::~_Alloc_hider (struct _Alloc_hider * const this)
{
  {
    try
      {
        try
          {

          }
        finally
          {
            std::allocator<char>::~allocator (this);
          }
      }
    finally
      {
        *this = {CLOBBER};
      }
  }
  <D.90238>:
}


void std::allocator<char>::~allocator (struct allocator * const this)
{
  try
    {
      {
        try
          {

          }
        finally
          {
            std::__new_allocator<char>::~__new_allocator (this);
          }
      }
      <D.90200>:
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
}


void std::__new_allocator<char>::~__new_allocator (struct __new_allocator * const this)
{
  try
    {
      {

      }
      <D.93609>:
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
}


struct basic_ostream & std::operator<< <std::char_traits<char> > (struct basic_ostream & __out, const char * __s)
{
  struct basic_ostream & D.97531;

  if (__s == 0B) goto <D.97528>; else goto <D.97529>;
  <D.97528>:
  _1 = __out->_vptr.basic_ostream;
  _2 = _1 + 18446744073709551592;
  _3 = MEM[(long int *)_2];
  _4 = (sizetype) _3;
  _5 = __out + _4;
  std::basic_ios<char>::setstate (_5, 1);
  goto <D.97530>;
  <D.97529>:
  _6 = std::char_traits<char>::length (__s);
  _7 = (long int) _6;
  std::__ostream_insert<char, std::char_traits<char> > (__out, __s, _7);
  <D.97530>:
  D.97531 = __out;
  return D.97531;
}


void std::basic_ios<char>::setstate (struct basic_ios * const this, iostate __state)
{
  _1 = std::basic_ios<char>::rdstate (this);
  _2 = std::operator| (_1, __state);
  std::basic_ios<char>::clear (this, _2);
}


iostate std::basic_ios<char>::rdstate (const struct basic_ios * const this)
{
  iostate D.97534;

  D.97534 = this->D.43795._M_streambuf_state;
  return D.97534;
}


_Ios_Iostate std::operator| (_Ios_Iostate __a, _Ios_Iostate __b)
{
  _Ios_Iostate D.97536;

  # DEBUG BEGIN_STMT
  D.97536 = __a | __b;
  return D.97536;
}


struct basic_ostream & std::operator<< <char, std::char_traits<char>, std::allocator<char> > (struct basic_ostream & __os, const struct basic_string & __str)
{
  struct basic_ostream & D.97538;

  _1 = std::__cxx11::basic_string<char>::data (__str);
  _2 = std::__cxx11::basic_string<char>::size (__str);
  _3 = (long int) _2;
  D.97538 = std::__ostream_insert<char, std::char_traits<char> > (__os, _1, _3);
  return D.97538;
}


const char * std::__cxx11::basic_string<char>::data (const struct basic_string * const this)
{
  const char * D.97541;

  try
    {
      D.97541 = std::__cxx11::basic_string<char>::_M_data (this);
      return D.97541;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


size_type std::__cxx11::basic_string<char>::size (const struct basic_string * const this)
{
  size_type D.97543;

  try
    {
      D.97543 = this->_M_string_length;
      return D.97543;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


struct __ostream_type & std::basic_ostream<char>::operator<< (struct basic_ostream * const this, struct __ostream_type & (*<T720f>) (struct __ostream_type &) __pf)
{
  struct __ostream_type & D.97545;

  __pf.7_1 = __pf;
  D.97545 = __pf.7_1 (this);
  return D.97545;
}


void std::__cxx11::basic_string<char>::~basic_string (struct basic_string * const this)
{
  try
    {
      {
        try
          {
            try
              {
                std::__cxx11::basic_string<char>::_M_dispose (this);
              }
            finally
              {
                _1 = &this->_M_dataplus;
                std::__cxx11::basic_string<char>::_Alloc_hider::~_Alloc_hider (_1);
              }
          }
        finally
          {
            *this = {CLOBBER};
          }
      }
      <D.90247>:
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
}


void register_signal ()
{
  # DEBUG BEGIN_STMT
  signal (6, sighandle);
  # DEBUG BEGIN_STMT
  signal (7, sighandle);
  # DEBUG BEGIN_STMT
  signal (8, sighandle);
  # DEBUG BEGIN_STMT
  signal (4, sighandle);
  # DEBUG BEGIN_STMT
  signal (3, sighandle);
  # DEBUG BEGIN_STMT
  signal (11, sighandle);
  # DEBUG BEGIN_STMT
  signal (31, sighandle);
  # DEBUG BEGIN_STMT
  signal (5, sighandle);
  # DEBUG BEGIN_STMT
  signal (24, sighandle);
  # DEBUG BEGIN_STMT
  signal (25, sighandle);
}


void sighandle (int sig)
{
  struct basic_string D.89126;
  struct string D.89125;
  const struct string D.89133;
  struct allocator D.89132;
  const struct string D.89135;
  struct allocator D.89134;
  struct path D.89136;
  int clifd;
  char buf[1024];
  ssize_t bufsize;
  struct string errorMsg;
  static const char __func__[10] [value-expr: "sighandle"];
  void * array[50];
  int size;
  char * * stackTrace;

  try
    {
      # DEBUG BEGIN_STMT
      signal (sig, 0B);
      # DEBUG BEGIN_STMT
      clifd = open ("/proc/self/cmdline", 524288);
      # DEBUG BEGIN_STMT
      # DEBUG BEGIN_STMT
      bufsize = read (clifd, &buf, 1024);
      # DEBUG BEGIN_STMT
      close (clifd);
      # DEBUG BEGIN_STMT
      try
        {
          try
            {
              D.89125 = std::__cxx11::to_string (sig); [return slot optimization]
              try
                {
                  D.89126 = std::operator+<char, std::char_traits<char>, std::allocator<char> > ("[ERROR] Fatal error (", &D.89125); [return slot optimization]
                  try
                    {
                      errorMsg = std::operator+<char, std::char_traits<char>, std::allocator<char> > (&D.89126, "), the program has been stopped."); [return slot optimization]
                    }
                  finally
                    {
                      std::__cxx11::basic_string<char>::~basic_string (&D.89126);
                    }
                }
              finally
                {
                  std::__cxx11::basic_string<char>::~basic_string (&D.89125);
                }
            }
          finally
            {
              D.89125 = {CLOBBER(eol)};
            }
        }
      finally
        {
          D.89126 = {CLOBBER(eol)};
        }
      try
        {
          # DEBUG BEGIN_STMT
          _1 = std::operator<< <char, std::char_traits<char>, std::allocator<char> > (&cout, &errorMsg);
          std::basic_ostream<char>::operator<< (_1, endl);
          # DEBUG BEGIN_STMT
          try
            {
              try
                {
                  std::allocator<char>::allocator (&D.89132);
                  try
                    {
                      std::__cxx11::basic_string<char>::basic_string<> (&D.89133, "sighandle", &D.89132);
                      try
                        {
                          try
                            {
                              try
                                {
                                  std::allocator<char>::allocator (&D.89134);
                                  try
                                    {
                                      std::__cxx11::basic_string<char>::basic_string<> (&D.89135, "main.cpp", &D.89134);
                                      try
                                        {
                                          logError (&D.89133, &D.89135, 69);
                                        }
                                      finally
                                        {
                                          std::__cxx11::basic_string<char>::~basic_string (&D.89135);
                                        }
                                    }
                                  finally
                                    {
                                      std::allocator<char>::~allocator (&D.89134);
                                    }
                                }
                              finally
                                {
                                  D.89134 = {CLOBBER(eol)};
                                }
                            }
                          finally
                            {
                              D.89135 = {CLOBBER(eol)};
                            }
                        }
                      finally
                        {
                          std::__cxx11::basic_string<char>::~basic_string (&D.89133);
                        }
                    }
                  finally
                    {
                      std::allocator<char>::~allocator (&D.89132);
                    }
                }
              finally
                {
                  D.89132 = {CLOBBER(eol)};
                }
            }
          finally
            {
              D.89133 = {CLOBBER(eol)};
            }
          # DEBUG BEGIN_STMT
          _2 = std::__cxx11::basic_string<char>::c_str (&errorMsg);
          write_log (_2);
          # DEBUG BEGIN_STMT
          _3 = std::operator<< <std::char_traits<char> > (&cout, "[INFO] Log file path: ");
          try
            {
              D.89136 = std::filesystem::current_path (); [return slot optimization]
              try
                {
                  _4 = std::filesystem::__cxx11::operator<< <char, std::char_traits<char> > (_3, &D.89136);
                  _5 = std::operator<< <std::char_traits<char> > (_4, "/program_crash.log");
                  std::basic_ostream<char>::operator<< (_5, endl);
                }
              finally
                {
                  std::filesystem::__cxx11::path::~path (&D.89136);
                }
            }
          finally
            {
              D.89136 = {CLOBBER(eol)};
            }
          # DEBUG BEGIN_STMT
          # DEBUG BEGIN_STMT
          size = backtrace (&array, 50);
          # DEBUG BEGIN_STMT
          stackTrace = backtrace_symbols (&array, size);
          # DEBUG BEGIN_STMT
          {
            if (stackTrace != 0B) goto <D.97548>; else goto <D.97549>;
            <D.97548>:
            {
              # DEBUG BEGIN_STMT
              _6 = std::operator<< <std::char_traits<char> > (&cout, "[INFO] Stack trace:");
              std::basic_ostream<char>::operator<< (_6, endl);
              # DEBUG BEGIN_STMT
              write_log ("[INFO] Stack trace:");
              # DEBUG BEGIN_STMT
              {
                int i;

                i = 0;
                goto <D.89147>;
                <D.89146>:
                # DEBUG BEGIN_STMT
                _7 = (long unsigned int) i;
                _8 = _7 * 8;
                _9 = stackTrace + _8;
                _10 = *_9;
                _11 = std::operator<< <std::char_traits<char> > (&cout, _10);
                std::basic_ostream<char>::operator<< (_11, endl);
                # DEBUG BEGIN_STMT
                _12 = (long unsigned int) i;
                _13 = _12 * 8;
                _14 = stackTrace + _13;
                _15 = *_14;
                write_log (_15);
                # DEBUG BEGIN_STMT
                i = i + 1;
                <D.89147>:
                # DEBUG BEGIN_STMT
                if (i < size) goto <D.89146>; else goto <D.89144>;
                <D.89144>:
              }
              # DEBUG BEGIN_STMT
              free (stackTrace);
            }
            goto <D.97550>;
            <D.97549>:
            <D.97550>:
          }
          # DEBUG BEGIN_STMT
          exit (127);
        }
      finally
        {
          std::__cxx11::basic_string<char>::~basic_string (&errorMsg);
        }
    }
  finally
    {
      buf = {CLOBBER(eol)};
      errorMsg = {CLOBBER(eol)};
      array = {CLOBBER(eol)};
    }
}


struct string std::__cxx11::to_string (int __val)
{
  unsigned int iftmp.8;
  struct allocator D.29556;

  try
    {
      {
        const bool __neg;
        const unsigned int __uval;
        const unsigned int __len;
        struct string __str [value-expr: *<retval>];

        # DEBUG BEGIN_STMT
        __neg = __val < 0;
        # DEBUG BEGIN_STMT
        if (__neg != 0) goto <D.97577>; else goto <D.97578>;
        <D.97577>:
        __val.9_1 = (unsigned int) __val;
        iftmp.8 = -__val.9_1;
        goto <D.97579>;
        <D.97578>:
        iftmp.8 = (unsigned int) __val;
        <D.97579>:
        __uval = iftmp.8;
        # DEBUG BEGIN_STMT
        __len = std::__detail::__to_chars_len<unsigned int> (__uval, 10);
        # DEBUG BEGIN_STMT
        _2 = (unsigned int) __neg;
        _3 = __len + _2;
        _4 = (long unsigned int) _3;
        try
          {
            std::allocator<char>::allocator (&D.29556);
            try
              {
                std::__cxx11::basic_string<char>::basic_string<> (<retval>, _4, 45, &D.29556);
              }
            finally
              {
                std::allocator<char>::~allocator (&D.29556);
              }
          }
        finally
          {
            D.29556 = {CLOBBER(eol)};
          }
        try
          {
            # DEBUG BEGIN_STMT
            _5 = (long unsigned int) __neg;
            _6 = std::__cxx11::basic_string<char>::operator[] (<retval>, _5);
            std::__detail::__to_chars_10_impl<unsigned int> (_6, __len, __uval);
            # DEBUG BEGIN_STMT
            return <retval>;
          }
        catch
          {
            std::__cxx11::basic_string<char>::~basic_string (<retval>);
          }
      }
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


unsigned int std::__detail::__to_chars_len<unsigned int> (unsigned int __value, int __base)
{
  unsigned int D.97584;

  try
    {
      {
        unsigned int __n;
        const unsigned int __b2;
        const unsigned int __b3;
        const long unsigned int __b4;

        __n = 1;
        _1 = __base * __base;
        __b2 = (const unsigned int) _1;
        __base.10_2 = (unsigned int) __base;
        __b3 = __b2 * __base.10_2;
        __base.11_3 = (unsigned int) __base;
        _4 = __b3 * __base.11_3;
        __b4 = (const long unsigned int) _4;
        <D.90192>:
        __base.12_5 = (unsigned int) __base;
        if (__value < __base.12_5) goto <D.97582>; else goto <D.97583>;
        <D.97582>:
        D.97584 = __n;
        // predicted unlikely by early return (on trees) predictor.
        return D.97584;
        <D.97583>:
        if (__value < __b2) goto <D.97585>; else goto <D.97586>;
        <D.97585>:
        D.97584 = __n + 1;
        // predicted unlikely by early return (on trees) predictor.
        return D.97584;
        <D.97586>:
        if (__value < __b3) goto <D.97587>; else goto <D.97588>;
        <D.97587>:
        D.97584 = __n + 2;
        // predicted unlikely by early return (on trees) predictor.
        return D.97584;
        <D.97588>:
        _6 = (long unsigned int) __value;
        if (__b4 > _6) goto <D.97589>; else goto <D.97590>;
        <D.97589>:
        D.97584 = __n + 3;
        // predicted unlikely by early return (on trees) predictor.
        return D.97584;
        <D.97590>:
        _7 = (long unsigned int) __value;
        _8 = _7 / __b4;
        __value = (unsigned int) _8;
        __n = __n + 4;
        # DEBUG BEGIN_STMT
        goto <D.90192>;
      }
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


void std::__cxx11::basic_string<char>::basic_string<> (struct basic_string * const this, size_type __n, char __c, const struct allocator & __a)
{
  *this = {CLOBBER};
  {
    _1 = &this->_M_dataplus;
    _2 = std::__cxx11::basic_string<char>::_M_local_data (this);
    std::__cxx11::basic_string<char>::_Alloc_hider::_Alloc_hider (_1, _2, __a);
    try
      {
        std::__cxx11::basic_string<char>::_M_construct (this, __n, __c);
      }
    catch
      {
        _3 = &this->_M_dataplus;
        std::__cxx11::basic_string<char>::_Alloc_hider::~_Alloc_hider (_3);
      }
  }
}


value_type & std::__cxx11::basic_string<char>::operator[] (struct basic_string * const this, size_type __pos)
{
  bool retval.13;
  bool iftmp.14;
  value_type & D.97601;

  _1 = std::__is_constant_evaluated ();
  if (_1 != 0) goto <D.97597>; else goto <D.97595>;
  <D.97597>:
  _2 = std::__cxx11::basic_string<char>::size (this);
  if (__pos > _2) goto <D.97598>; else goto <D.97595>;
  <D.97598>:
  iftmp.14 = 1;
  goto <D.97596>;
  <D.97595>:
  iftmp.14 = 0;
  <D.97596>:
  retval.13 = iftmp.14;
  if (retval.13 != 0) goto <D.97599>; else goto <D.97600>;
  <D.97599>:
  __builtin_unreachable ();
  <D.97600>:
  # DEBUG BEGIN_STMT
  _3 = std::__cxx11::basic_string<char>::_M_data (this);
  D.97601 = _3 + __pos;
  return D.97601;
}


void std::__detail::__to_chars_10_impl<unsigned int> (char * __first, unsigned int __len, unsigned int __val)
{
  try
    {
      {
        static const char __digits[201] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899";
        unsigned int __pos;

        __pos = __len + 4294967295;
        goto <D.90265>;
        <D.90266>:
        {
          const unsigned int __num;

          _1 = __val % 100;
          __num = _1 * 2;
          __val = __val / 100;
          _2 = __num + 1;
          _3 = (sizetype) __pos;
          _4 = __first + _3;
          _5 = __digits[_2];
          *_4 = _5;
          _6 = __pos + 4294967295;
          _7 = (sizetype) _6;
          _8 = __first + _7;
          _9 = __digits[__num];
          *_8 = _9;
          __pos = __pos + 4294967294;
        }
        <D.90265>:
        # DEBUG BEGIN_STMT
        if (__val > 99) goto <D.90266>; else goto <D.90264>;
        <D.90264>:
        {
          if (__val > 9) goto <D.97603>; else goto <D.97604>;
          <D.97603>:
          {
            const unsigned int __num;

            __num = __val * 2;
            _10 = __num + 1;
            _11 = __first + 1;
            _12 = __digits[_10];
            *_11 = _12;
            _13 = __digits[__num];
            *__first = _13;
          }
          goto <D.97605>;
          <D.97604>:
          _14 = (char) __val;
          _15 = _14 + 48;
          *__first = _15;
          <D.97605>:
        }
      }
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
}


struct basic_string std::operator+<char, std::char_traits<char>, std::allocator<char> > (const char * __lhs, struct basic_string & __rhs)
{
  _1 = std::__cxx11::basic_string<char>::insert (__rhs, 0, __lhs);
  std::__cxx11::basic_string<char>::basic_string (<retval>, _1);
  return <retval>;
}


struct basic_string & std::__cxx11::basic_string<char>::insert (struct basic_string * const this, size_type __pos, const char * __s)
{
  struct basic_string & D.97608;

  _1 = std::char_traits<char>::length (__s);
  D.97608 = std::__cxx11::basic_string<char>::replace (this, __pos, 0, __s, _1);
  return D.97608;
}


struct basic_string & std::__cxx11::basic_string<char>::replace (struct basic_string * const this, size_type __pos, size_type __n1, const char * __s, size_type __n2)
{
  struct basic_string & D.97612;

  _1 = std::__cxx11::basic_string<char>::_M_check (this, __pos, "basic_string::replace");
  _2 = std::__cxx11::basic_string<char>::_M_limit (this, __pos, __n1);
  D.97612 = std::__cxx11::basic_string<char>::_M_replace (this, _1, _2, __s, __n2);
  return D.97612;
}


size_type std::__cxx11::basic_string<char>::_M_check (const struct basic_string * const this, size_type __pos, const char * __s)
{
  bool retval.15;
  size_type D.97619;

  _1 = std::__cxx11::basic_string<char>::size (this);
  retval.15 = __pos > _1;
  if (retval.15 != 0) goto <D.97617>; else goto <D.97618>;
  <D.97617>:
  _2 = std::__cxx11::basic_string<char>::size (this);
  std::__throw_out_of_range_fmt ("%s: __pos (which is %zu) > this->size() (which is %zu)", __s, __pos, _2);
  <D.97618>:
  D.97619 = __pos;
  return D.97619;
}


size_type std::__cxx11::basic_string<char>::_M_limit (const struct basic_string * const this, size_type __pos, size_type __off)
{
  size_type D.97621;
  size_type iftmp.16;

  try
    {
      {
        const bool __testoff;

        _1 = std::__cxx11::basic_string<char>::size (this);
        _2 = _1 - __pos;
        __testoff = __off < _2;
        if (__testoff != 0) goto <D.97623>; else goto <D.97624>;
        <D.97623>:
        iftmp.16 = __off;
        goto <D.97625>;
        <D.97624>:
        _3 = std::__cxx11::basic_string<char>::size (this);
        iftmp.16 = _3 - __pos;
        <D.97625>:
        D.97621 = iftmp.16;
        return D.97621;
      }
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


void std::__cxx11::basic_string<char>::basic_string (struct basic_string * const this, struct basic_string & __str)
{
  bool retval.17;

  try
    {
      *this = {CLOBBER};
      {
        _1 = &this->_M_dataplus;
        _2 = std::__cxx11::basic_string<char>::_M_local_data (this);
        _3 = std::__cxx11::basic_string<char>::_M_get_allocator (__str);
        std::__cxx11::basic_string<char>::_Alloc_hider::_Alloc_hider (_1, _2, _3);
        try
          {
            retval.17 = std::__cxx11::basic_string<char>::_M_is_local (__str);
            if (retval.17 != 0) goto <D.97628>; else goto <D.97629>;
            <D.97628>:
            _4 = &this->D.28191._M_local_buf;
            _5 = &__str->D.28191._M_local_buf;
            _6 = std::__cxx11::basic_string<char>::length (__str);
            _7 = _6 + 1;
            std::char_traits<char>::copy (_4, _5, _7);
            goto <D.97630>;
            <D.97629>:
            _8 = std::__cxx11::basic_string<char>::_M_data (__str);
            std::__cxx11::basic_string<char>::_M_data (this, _8);
            _9 = __str->D.28191._M_allocated_capacity;
            std::__cxx11::basic_string<char>::_M_capacity (this, _9);
            <D.97630>:
            _10 = std::__cxx11::basic_string<char>::length (__str);
            std::__cxx11::basic_string<char>::_M_length (this, _10);
            _11 = std::__cxx11::basic_string<char>::_M_local_data (__str);
            std::__cxx11::basic_string<char>::_M_data (__str, _11);
            std::__cxx11::basic_string<char>::_M_set_length (__str, 0);
          }
        catch
          {
            _12 = &this->_M_dataplus;
            std::__cxx11::basic_string<char>::_Alloc_hider::~_Alloc_hider (_12);
          }
      }
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
}


void std::__cxx11::basic_string<char>::_Alloc_hider::_Alloc_hider (struct _Alloc_hider * const this, char * __dat, struct allocator & __a)
{
  *this = {CLOBBER};
  {
    std::allocator<char>::allocator (this, __a);
    try
      {
        this->_M_p = __dat;
      }
    catch
      {
        std::allocator<char>::~allocator (this);
      }
  }
}


size_type std::__cxx11::basic_string<char>::length (const struct basic_string * const this)
{
  size_type D.97632;

  try
    {
      D.97632 = this->_M_string_length;
      return D.97632;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


struct basic_string std::operator+<char, std::char_traits<char>, std::allocator<char> > (struct basic_string & __lhs, const char * __rhs)
{
  _1 = std::__cxx11::basic_string<char>::append (__lhs, __rhs);
  std::__cxx11::basic_string<char>::basic_string (<retval>, _1);
  return <retval>;
}


struct basic_string & std::__cxx11::basic_string<char>::append (struct basic_string * const this, const char * __s)
{
  struct basic_string & D.97636;
  const size_type __n;

  __n = std::char_traits<char>::length (__s);
  std::__cxx11::basic_string<char>::_M_check_length (this, 0, __n, "basic_string::append");
  D.97636 = std::__cxx11::basic_string<char>::_M_append (this, __s, __n);
  return D.97636;
}


void std::__cxx11::basic_string<char>::_M_check_length (const struct basic_string * const this, size_type __n1, size_type __n2, const char * __s)
{
  bool retval.18;

  _1 = std::__cxx11::basic_string<char>::max_size (this);
  _2 = std::__cxx11::basic_string<char>::size (this);
  _3 = __n1 - _2;
  _4 = _1 + _3;
  retval.18 = __n2 > _4;
  if (retval.18 != 0) goto <D.97641>; else goto <D.97642>;
  <D.97641>:
  std::__throw_length_error (__s);
  <D.97642>:
}


size_type std::__cxx11::basic_string<char>::max_size (const struct basic_string * const this)
{
  size_type D.97643;

  try
    {
      _1 = std::__cxx11::basic_string<char>::_M_get_allocator (this);
      _2 = std::allocator_traits<std::allocator<char> >::max_size (_1);
      _3 = _2 + 18446744073709551615;
      D.97643 = _3 / 2;
      return D.97643;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


const struct allocator_type & std::__cxx11::basic_string<char>::_M_get_allocator (const struct basic_string * const this)
{
  const struct allocator_type & D.97645;

  D.97645 = &this->_M_dataplus;
  return D.97645;
}


size_type std::allocator_traits<std::allocator<char> >::max_size (const struct allocator_type & __a)
{
  size_type D.97647;

  try
    {
      D.97647 = std::__new_allocator<char>::max_size (__a);
      return D.97647;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


size_type std::__new_allocator<char>::max_size (const struct __new_allocator * const this)
{
  size_type D.97649;

  try
    {
      D.97649 = std::__new_allocator<char>::_M_max_size (this);
      return D.97649;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


size_type std::__new_allocator<char>::_M_max_size (const struct __new_allocator * const this)
{
  size_type D.97651;

  try
    {
      D.97651 = 9223372036854775807;
      return D.97651;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


const char * std::__cxx11::basic_string<char>::c_str (const struct basic_string * const this)
{
  const char * D.97653;

  try
    {
      D.97653 = std::__cxx11::basic_string<char>::_M_data (this);
      return D.97653;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


struct basic_ostream & std::filesystem::__cxx11::operator<< <char, std::char_traits<char> > (struct basic_ostream & __os, const struct path & __p)
{
  struct _Quoted_string D.93569;
  struct basic_string D.93479;
  struct allocator D.93478;
  struct basic_ostream & D.97655;

  try
    {
      try
        {
          try
            {
              std::allocator<char>::allocator (&D.93478);
              try
                {
                  D.93479 = std::filesystem::__cxx11::path::string<char> (__p, &D.93478); [return slot optimization]
                  try
                    {
                      D.93569 = std::quoted<char, std::char_traits<char>, std::allocator<char> > (&D.93479, 34, 92);
                      std::__detail::operator<< <char, std::char_traits<char>, const std::__cxx11::basic_string<char>&> (__os, &D.93569);
                    }
                  finally
                    {
                      std::__cxx11::basic_string<char>::~basic_string (&D.93479);
                    }
                }
              finally
                {
                  std::allocator<char>::~allocator (&D.93478);
                }
            }
          finally
            {
              D.93478 = {CLOBBER(eol)};
            }
        }
      finally
        {
          D.93479 = {CLOBBER(eol)};
        }
    }
  finally
    {
      D.93569 = {CLOBBER(eol)};
    }
  D.97655 = __os;
  return D.97655;
}


struct basic_string std::filesystem::__cxx11::path::string<char> (const struct path * const this, const struct allocator & __a)
{
  _1 = &this->_M_pathname;
  _2 = std::__cxx11::basic_string<char>::c_str (_1);
  _3 = &this->_M_pathname;
  _4 = std::__cxx11::basic_string<char>::length (_3);
  std::__cxx11::basic_string<char>::basic_string (<retval>, _2, _4, __a);
  return <retval>;
}


void std::__cxx11::basic_string<char>::basic_string (struct basic_string * const this, const char * __s, size_type __n, const struct allocator & __a)
{
  struct forward_iterator_tag D.97665;

  *this = {CLOBBER};
  {
    _1 = &this->_M_dataplus;
    _2 = std::__cxx11::basic_string<char>::_M_local_data (this);
    std::__cxx11::basic_string<char>::_Alloc_hider::_Alloc_hider (_1, _2, __a);
    try
      {
        _3 = __s == 0B;
        _4 = __n != 0;
        _5 = _3 & _4;
        if (_5 != 0) goto <D.97663>; else goto <D.97664>;
        <D.97663>:
        std::__throw_logic_error ("basic_string: construction from null is not valid");
        <D.97664>:
        _6 = __s + __n;
        std::__cxx11::basic_string<char>::_M_construct<const char*> (this, __s, _6, D.97665);
      }
    catch
      {
        _7 = &this->_M_dataplus;
        std::__cxx11::basic_string<char>::_Alloc_hider::~_Alloc_hider (_7);
      }
  }
}


struct _Quoted_string std::quoted<char, std::char_traits<char>, std::allocator<char> > (const struct basic_string & __string, char __delim, char __escape)
{
  struct _Quoted_string D.97667;
  struct _Quoted_string D.93558;

  try
    {
      std::__detail::_Quoted_string<const std::__cxx11::basic_string<char>&, char>::_Quoted_string (&D.93558, __string, __delim, __escape);
      D.97667 = D.93558;
      return D.97667;
    }
  finally
    {
      D.93558 = {CLOBBER(eol)};
    }
}


void std::__detail::_Quoted_string<const std::__cxx11::basic_string<char>&, char>::_Quoted_string (struct _Quoted_string * const this, const struct basic_string & __str, char __del, char __esc)
{
  MEM[(struct __as_base  &)this] = {CLOBBER};
  {
    this->_M_string = __str;
    this->_M_delim = __del;
    this->_M_escape = __esc;
  }
}


struct basic_ostream & std::__detail::operator<< <char, std::char_traits<char>, const std::__cxx11::basic_string<char>&> (struct basic_ostream & __os, const struct _Quoted_string & __str)
{
  bool retval.19;
  struct basic_ostream & D.97674;
  struct __string_type D.95691;
  struct basic_ostringstream __ostr;

  try
    {
      std::__cxx11::basic_ostringstream<char>::basic_ostringstream (&__ostr);
      try
        {
          _1 = __str->_M_delim;
          std::operator<< <std::char_traits<char> > (&__ostr.D.76876, _1);
          {
            char __c;
            const struct basic_string & __for_range;
            struct const_iterator __for_begin;
            struct const_iterator __for_end;

            try
              {
                __for_range = __str->_M_string;
                __for_begin = std::__cxx11::basic_string<char>::begin (__for_range);
                __for_end = std::__cxx11::basic_string<char>::end (__for_range);
                goto <D.95695>;
                <D.95694>:
                _2 = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >::operator* (&__for_begin);
                __c = *_2;
                _3 = __str->_M_delim;
                if (__c == _3) goto <D.97670>; else goto <D.97672>;
                <D.97672>:
                _4 = __str->_M_escape;
                if (__c == _4) goto <D.97670>; else goto <D.97671>;
                <D.97670>:
                _5 = __str->_M_escape;
                std::operator<< <std::char_traits<char> > (&__ostr.D.76876, _5);
                <D.97671>:
                std::operator<< <std::char_traits<char> > (&__ostr.D.76876, __c);
                # DEBUG BEGIN_STMT
                __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >::operator++ (&__for_begin);
                <D.95695>:
                # DEBUG BEGIN_STMT
                retval.19 = __gnu_cxx::operator!=<const char*, std::__cxx11::basic_string<char> > (&__for_begin, &__for_end);
                if (retval.19 != 0) goto <D.95694>; else goto <D.95692>;
                <D.95692>:
              }
            finally
              {
                __for_begin = {CLOBBER(eol)};
                __for_end = {CLOBBER(eol)};
              }
          }
          _6 = __str->_M_delim;
          std::operator<< <std::char_traits<char> > (&__ostr.D.76876, _6);
          try
            {
              D.95691 = std::__cxx11::basic_ostringstream<char>::str (&__ostr); [return slot optimization]
              try
                {
                  D.97674 = std::operator<< <char, std::char_traits<char>, std::allocator<char> > (__os, &D.95691);
                  return D.97674;
                }
              finally
                {
                  std::__cxx11::basic_string<char>::~basic_string (&D.95691);
                }
            }
          finally
            {
              D.95691 = {CLOBBER(eol)};
            }
        }
      finally
        {
          std::__cxx11::basic_ostringstream<char>::~basic_ostringstream (&__ostr);
        }
    }
  finally
    {
      __ostr = {CLOBBER(eol)};
    }
}


void std::__cxx11::basic_ostringstream<char>::basic_ostringstream (struct basic_ostringstream * const this)
{
  *this = {CLOBBER};
  {
    _1 = &this->D.76880;
    std::basic_ios<char>::basic_ios (_1);
    try
      {
        _2 = &this->D.76876;
        _3 = &_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE + 8;
        std::basic_ostream<char>::basic_ostream (_2, _3);
        try
          {
            _4 = &_ZTVNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE + 24;
            this->D.76876._vptr.basic_ostream = _4;
            _5 = this + 112;
            _6 = &_ZTVNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE + 64;
            MEM[(struct basic_ios *)_5].D.43795._vptr.ios_base = _6;
            _7 = &this->_M_stringbuf;
            std::__cxx11::basic_stringbuf<char>::basic_stringbuf (_7, 16);
            try
              {
                _8 = this + 112;
                _9 = &this->_M_stringbuf.D.76593;
                std::basic_ios<char>::init (_8, _9);
              }
            catch
              {
                _10 = &this->_M_stringbuf;
                std::__cxx11::basic_stringbuf<char>::~basic_stringbuf (_10);
              }
          }
        catch
          {
            _11 = &this->D.76876;
            _12 = &_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE + 8;
            std::basic_ostream<char>::~basic_ostream (_11, _12);
          }
      }
    catch
      {
        _13 = &this->D.76880;
        std::basic_ios<char>::~basic_ios (_13);
      }
  }
}


void std::__cxx11::basic_ostringstream<char>::~basic_ostringstream (struct basic_ostringstream * const this)
{
  try
    {
      std::__cxx11::basic_ostringstream<char>::~basic_ostringstream (this);
    }
  finally
    {
      operator delete (this, 376);
    }
}


void std::basic_ios<char>::basic_ios (struct basic_ios * const this)
{
  *this = {CLOBBER};
  {
    _1 = &this->D.43795;
    std::ios_base::ios_base (_1);
    try
      {
        _2 = &_ZTVSt9basic_iosIcSt11char_traitsIcEE + 16;
        this->D.43795._vptr.ios_base = _2;
        this->_M_tie = 0B;
        this->_M_fill = 0;
        this->_M_fill_init = 0;
        this->_M_streambuf = 0B;
        this->_M_ctype = 0B;
        this->_M_num_put = 0B;
        this->_M_num_get = 0B;
      }
    catch
      {
        _3 = &this->D.43795;
        std::ios_base::~ios_base (_3);
      }
  }
}


void std::basic_ios<char>::~basic_ios (struct basic_ios * const this)
{
  try
    {
      std::basic_ios<char>::~basic_ios (this);
    }
  finally
    {
      operator delete (this, 264);
    }
}


void std::basic_ostream<char>::basic_ostream (struct basic_ostream * const this, const void * * __vtt_parm)
{
  _1 = *__vtt_parm;
  this->_vptr.basic_ostream = _1;
  _2 = this->_vptr.basic_ostream;
  _3 = _2 + 18446744073709551592;
  _4 = MEM[(long int *)_3];
  _5 = (sizetype) _4;
  _6 = this + _5;
  _7 = MEM[(const void * *)__vtt_parm + 8B];
  MEM[(struct basic_ios *)_6].D.43795._vptr.ios_base = _7;
  _8 = this->_vptr.basic_ostream;
  _9 = _8 + 18446744073709551592;
  _10 = MEM[(long int *)_9];
  _11 = (sizetype) _10;
  _12 = this + _11;
  std::basic_ios<char>::init (_12, 0B);
}


void std::__cxx11::basic_stringbuf<char>::basic_stringbuf (struct basic_stringbuf * const this, openmode __mode)
{
  *this = {CLOBBER};
  {
    _1 = &this->D.76593;
    std::basic_streambuf<char>::basic_streambuf (_1);
    try
      {
        _2 = &_ZTVNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEE + 16;
        this->D.76593._vptr.basic_streambuf = _2;
        this->_M_mode = __mode;
        _3 = &this->_M_string;
        std::__cxx11::basic_string<char>::basic_string (_3);
        try
          {

          }
        catch
          {
            _4 = &this->_M_string;
            std::__cxx11::basic_string<char>::~basic_string (_4);
          }
      }
    catch
      {
        _5 = &this->D.76593;
        std::basic_streambuf<char>::~basic_streambuf (_5);
      }
  }
}


void std::__cxx11::basic_stringbuf<char>::~basic_stringbuf (struct basic_stringbuf * const this)
{
  try
    {
      std::__cxx11::basic_stringbuf<char>::~basic_stringbuf (this);
    }
  finally
    {
      operator delete (this, 104);
    }
}


void std::__cxx11::basic_stringbuf<char>::~basic_stringbuf (struct basic_stringbuf * const this)
{
  {
    _1 = &_ZTVNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEE + 16;
    this->D.76593._vptr.basic_streambuf = _1;
    try
      {
        try
          {
            try
              {

              }
            finally
              {
                _2 = &this->_M_string;
                std::__cxx11::basic_string<char>::~basic_string (_2);
              }
          }
        finally
          {
            _3 = &this->D.76593;
            std::basic_streambuf<char>::~basic_streambuf (_3);
          }
      }
    finally
      {
        *this = {CLOBBER};
      }
  }
  <D.96307>:
}


void std::basic_streambuf<char>::~basic_streambuf (struct basic_streambuf * const this)
{
  try
    {
      {
        _1 = &_ZTVSt15basic_streambufIcSt11char_traitsIcEE + 16;
        this->_vptr.basic_streambuf = _1;
        try
          {
            try
              {

              }
            finally
              {
                _2 = &this->_M_buf_locale;
                std::locale::~locale (_2);
              }
          }
        finally
          {
            *this = {CLOBBER};
          }
      }
      <D.96294>:
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
}


void std::basic_streambuf<char>::~basic_streambuf (struct basic_streambuf * const this)
{
  try
    {
      std::basic_streambuf<char>::~basic_streambuf (this);
    }
  finally
    {
      operator delete (this, 64);
    }
}


void std::basic_streambuf<char>::basic_streambuf (struct basic_streambuf * const this)
{
  *this = {CLOBBER};
  {
    _1 = &_ZTVSt15basic_streambufIcSt11char_traitsIcEE + 16;
    this->_vptr.basic_streambuf = _1;
    this->_M_in_beg = 0B;
    this->_M_in_cur = 0B;
    this->_M_in_end = 0B;
    this->_M_out_beg = 0B;
    this->_M_out_cur = 0B;
    this->_M_out_end = 0B;
    _2 = &this->_M_buf_locale;
    std::locale::locale (_2);
    try
      {

      }
    catch
      {
        _3 = &this->_M_buf_locale;
        std::locale::~locale (_3);
      }
  }
}


void std::__cxx11::basic_string<char>::basic_string (struct basic_string * const this)
{
  struct allocator D.92505;

  try
    {
      *this = {CLOBBER};
      {
        _1 = &this->_M_dataplus;
        _2 = std::__cxx11::basic_string<char>::_M_local_data (this);
        try
          {
            std::allocator<char>::allocator (&D.92505);
            try
              {
                std::__cxx11::basic_string<char>::_Alloc_hider::_Alloc_hider (_1, _2, &D.92505);
              }
            finally
              {
                std::allocator<char>::~allocator (&D.92505);
              }
          }
        finally
          {
            D.92505 = {CLOBBER(eol)};
          }
        try
          {
            std::__cxx11::basic_string<char>::_M_use_local_data (this);
            std::__cxx11::basic_string<char>::_M_set_length (this, 0);
          }
        catch
          {
            _3 = &this->_M_dataplus;
            std::__cxx11::basic_string<char>::_Alloc_hider::~_Alloc_hider (_3);
          }
      }
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
}


void std::basic_ostream<char>::~basic_ostream (struct basic_ostream * const this, const void * * __vtt_parm)
{
  try
    {
      {
        _1 = *__vtt_parm;
        this->_vptr.basic_ostream = _1;
        _2 = this->_vptr.basic_ostream;
        _3 = _2 + 18446744073709551592;
        _4 = MEM[(long int *)_3];
        _5 = (sizetype) _4;
        _6 = this + _5;
        _7 = MEM[(const void * *)__vtt_parm + 8B];
        MEM[(struct basic_ios *)_6].D.43795._vptr.ios_base = _7;
      }
      <D.95579>:
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
}


void std::basic_ios<char>::~basic_ios (struct basic_ios * const this)
{
  try
    {
      {
        _1 = &_ZTVSt9basic_iosIcSt11char_traitsIcEE + 16;
        this->D.43795._vptr.ios_base = _1;
        try
          {
            try
              {

              }
            finally
              {
                _2 = &this->D.43795;
                std::ios_base::~ios_base (_2);
              }
          }
        finally
          {
            *this = {CLOBBER};
          }
      }
      <D.95567>:
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
}


struct const_iterator std::__cxx11::basic_string<char>::begin (const struct basic_string * const this)
{
  struct const_iterator D.97689;
  struct const_iterator D.96329;
  const char * const D.96328;

  try
    {
      try
        {
          try
            {
              _1 = std::__cxx11::basic_string<char>::_M_data (this);
              D.96328 = _1;
              __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >::__normal_iterator (&D.96329, &D.96328);
              D.97689 = D.96329;
              return D.97689;
            }
          finally
            {
              D.96328 = {CLOBBER(eol)};
            }
        }
      finally
        {
          D.96329 = {CLOBBER(eol)};
        }
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


void __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >::__normal_iterator (struct __normal_iterator * const this, const char * const & __i)
{
  try
    {
      *this = {CLOBBER};
      {
        _1 = *__i;
        this->_M_current = _1;
      }
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
}


struct const_iterator std::__cxx11::basic_string<char>::end (const struct basic_string * const this)
{
  struct const_iterator D.97693;
  struct const_iterator D.96332;
  const char * const D.96331;

  try
    {
      try
        {
          try
            {
              _1 = std::__cxx11::basic_string<char>::_M_data (this);
              _2 = std::__cxx11::basic_string<char>::size (this);
              _3 = _1 + _2;
              D.96331 = _3;
              __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >::__normal_iterator (&D.96332, &D.96331);
              D.97693 = D.96332;
              return D.97693;
            }
          finally
            {
              D.96331 = {CLOBBER(eol)};
            }
        }
      finally
        {
          D.96332 = {CLOBBER(eol)};
        }
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


const char & __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >::operator* (const struct __normal_iterator * const this)
{
  const char & D.97697;

  try
    {
      D.97697 = this->_M_current;
      return D.97697;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


struct __normal_iterator & __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >::operator++ (struct __normal_iterator * const this)
{
  struct __normal_iterator & D.97699;

  try
    {
      _1 = this->_M_current;
      _2 = _1 + 1;
      this->_M_current = _2;
      D.97699 = this;
      return D.97699;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


__attribute__((nodiscard))
bool __gnu_cxx::operator!=<const char*, std::__cxx11::basic_string<char> > (const struct __normal_iterator & __lhs, const struct __normal_iterator & __rhs)
{
  bool D.97701;

  try
    {
      _1 = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >::base (__lhs);
      _2 = *_1;
      _3 = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >::base (__rhs);
      _4 = *_3;
      D.97701 = _2 != _4;
      return D.97701;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


const char * const & __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >::base (const struct __normal_iterator * const this)
{
  const char * const & D.97703;

  try
    {
      D.97703 = &this->_M_current;
      return D.97703;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


struct basic_ostream & std::operator<< <std::char_traits<char> > (struct basic_ostream & __out, char __c)
{
  bool retval.20;
  struct basic_ostream & D.97708;

  _1 = __out->_vptr.basic_ostream;
  _2 = _1 + 18446744073709551592;
  _3 = MEM[(long int *)_2];
  _4 = (sizetype) _3;
  _5 = __out + _4;
  _6 = std::ios_base::width (_5);
  retval.20 = _6 != 0;
  if (retval.20 != 0) goto <D.97706>; else goto <D.97707>;
  <D.97706>:
  D.97708 = std::__ostream_insert<char, std::char_traits<char> > (__out, &__c, 1);
  return D.97708;
  <D.97707>:
  __c.21_7 = __c;
  std::basic_ostream<char>::put (__out, __c.21_7);
  D.97708 = __out;
  return D.97708;
}


streamsize std::ios_base::width (const struct ios_base * const this)
{
  streamsize D.97711;

  # DEBUG BEGIN_STMT
  D.97711 = this->_M_width;
  return D.97711;
}


struct __string_type std::__cxx11::basic_ostringstream<char>::str (const struct basic_ostringstream * const this)
{
  _1 = &this->_M_stringbuf;
  *<retval> = std::__cxx11::basic_stringbuf<char>::str (_1); [return slot optimization]
  return <retval>;
}


struct __string_type std::__cxx11::basic_stringbuf<char>::str (const struct basic_stringbuf * const this)
{
  struct allocator_type D.96746;
  struct __string_type __ret [value-expr: *<retval>];

  try
    {
      _1 = &this->_M_string;
      D.96746 = std::__cxx11::basic_string<char>::get_allocator (_1); [return slot optimization]
      try
        {
          std::__cxx11::basic_string<char>::basic_string (<retval>, &D.96746);
        }
      finally
        {
          std::allocator<char>::~allocator (&D.96746);
        }
    }
  finally
    {
      D.96746 = {CLOBBER(eol)};
    }
  try
    {
      {
        char_type * __hi;

        __hi = std::__cxx11::basic_stringbuf<char>::_M_high_mark (this);
        if (__hi != 0B) goto <D.97714>; else goto <D.97715>;
        <D.97714>:
        _2 = &this->D.76593;
        _3 = std::basic_streambuf<char>::pbase (_2);
        std::__cxx11::basic_string<char>::assign<char*> (<retval>, _3, __hi);
        goto <D.97716>;
        <D.97715>:
        _4 = &this->_M_string;
        std::__cxx11::basic_string<char>::operator= (<retval>, _4);
        <D.97716>:
      }
      return <retval>;
    }
  catch
    {
      std::__cxx11::basic_string<char>::~basic_string (<retval>);
    }
  __builtin_unreachable ();
}


struct allocator_type std::__cxx11::basic_string<char>::get_allocator (const struct basic_string * const this)
{
  try
    {
      _1 = std::__cxx11::basic_string<char>::_M_get_allocator (this);
      std::allocator<char>::allocator (<retval>, _1);
      return <retval>;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


void std::__cxx11::basic_string<char>::basic_string (struct basic_string * const this, const struct allocator & __a)
{
  try
    {
      *this = {CLOBBER};
      {
        _1 = &this->_M_dataplus;
        _2 = std::__cxx11::basic_string<char>::_M_local_data (this);
        std::__cxx11::basic_string<char>::_Alloc_hider::_Alloc_hider (_1, _2, __a);
        try
          {
            std::__cxx11::basic_string<char>::_M_use_local_data (this);
            std::__cxx11::basic_string<char>::_M_set_length (this, 0);
          }
        catch
          {
            _3 = &this->_M_dataplus;
            std::__cxx11::basic_string<char>::_Alloc_hider::~_Alloc_hider (_3);
          }
      }
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
}


__attribute__((always_inline))
char_type * std::__cxx11::basic_stringbuf<char>::_M_high_mark (const struct basic_stringbuf * const this)
{
  char_type * D.97724;

  try
    {
      {
        {
          char_type * __pptr;

          _1 = &this->D.76593;
          __pptr = std::basic_streambuf<char>::pptr (_1);
          if (__pptr != 0B) goto <D.97720>; else goto <D.97721>;
          <D.97720>:
          {
            char_type * __egptr;

            _2 = &this->D.76593;
            __egptr = std::basic_streambuf<char>::egptr (_2);
            _3 = __egptr == 0B;
            _4 = __pptr > __egptr;
            _5 = _3 | _4;
            if (_5 != 0) goto <D.97722>; else goto <D.97723>;
            <D.97722>:
            D.97724 = __pptr;
            // predicted unlikely by early return (on trees) predictor.
            return D.97724;
            <D.97723>:
            D.97724 = __egptr;
            // predicted unlikely by early return (on trees) predictor.
            return D.97724;
          }
          <D.97721>:
        }
        D.97724 = 0B;
        return D.97724;
      }
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


char_type * std::basic_streambuf<char>::pptr (const struct basic_streambuf * const this)
{
  char_type * D.97726;

  D.97726 = this->_M_out_cur;
  return D.97726;
}


char_type * std::basic_streambuf<char>::egptr (const struct basic_streambuf * const this)
{
  char_type * D.97728;

  D.97728 = this->_M_in_end;
  return D.97728;
}


char_type * std::basic_streambuf<char>::pbase (const struct basic_streambuf * const this)
{
  char_type * D.97730;

  D.97730 = this->_M_out_beg;
  return D.97730;
}


struct basic_string & std::__cxx11::basic_string<char>::assign<char*> (struct basic_string * const this, char * __first, char * __last)
{
  struct basic_string & D.97732;
  struct __const_iterator D.97131;
  struct iterator D.97114;
  struct __const_iterator D.97132;
  struct iterator D.97124;

  try
    {
      try
        {
          D.97114 = std::__cxx11::basic_string<char>::begin (this);
          __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >::__normal_iterator<char*> (&D.97131, &D.97114);
          try
            {
              try
                {
                  D.97124 = std::__cxx11::basic_string<char>::end (this);
                  __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >::__normal_iterator<char*> (&D.97132, &D.97124);
                  D.97732 = std::__cxx11::basic_string<char>::replace (this, D.97131, D.97132, __first, __last);
                  return D.97732;
                }
              finally
                {
                  D.97124 = {CLOBBER(eol)};
                }
            }
          finally
            {
              D.97132 = {CLOBBER(eol)};
            }
        }
      finally
        {
          D.97114 = {CLOBBER(eol)};
        }
    }
  finally
    {
      D.97131 = {CLOBBER(eol)};
    }
}


struct iterator std::__cxx11::basic_string<char>::begin (struct basic_string * const this)
{
  struct iterator D.97743;
  struct iterator D.97213;
  char * const D.97212;

  try
    {
      try
        {
          try
            {
              _1 = std::__cxx11::basic_string<char>::_M_data (this);
              D.97212 = _1;
              __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >::__normal_iterator (&D.97213, &D.97212);
              D.97743 = D.97213;
              return D.97743;
            }
          finally
            {
              D.97212 = {CLOBBER(eol)};
            }
        }
      finally
        {
          D.97213 = {CLOBBER(eol)};
        }
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


void __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >::__normal_iterator (struct __normal_iterator * const this, char * const & __i)
{
  try
    {
      *this = {CLOBBER};
      {
        _1 = *__i;
        this->_M_current = _1;
      }
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
}


struct iterator std::__cxx11::basic_string<char>::end (struct basic_string * const this)
{
  struct iterator D.97747;
  struct iterator D.97216;
  char * const D.97215;

  try
    {
      try
        {
          try
            {
              _1 = std::__cxx11::basic_string<char>::_M_data (this);
              _2 = std::__cxx11::basic_string<char>::size (this);
              _3 = _1 + _2;
              D.97215 = _3;
              __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >::__normal_iterator (&D.97216, &D.97215);
              D.97747 = D.97216;
              return D.97747;
            }
          finally
            {
              D.97215 = {CLOBBER(eol)};
            }
        }
      finally
        {
          D.97216 = {CLOBBER(eol)};
        }
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


void __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >::__normal_iterator<char*> (struct __normal_iterator * const this, const struct __normal_iterator & __i)
{
  try
    {
      *this = {CLOBBER};
      {
        _1 = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >::base (__i);
        _2 = *_1;
        this->_M_current = _2;
      }
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
}


char * const & __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >::base (const struct __normal_iterator * const this)
{
  char * const & D.97751;

  try
    {
      D.97751 = &this->_M_current;
      return D.97751;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


struct basic_string & std::__cxx11::basic_string<char>::replace (struct basic_string * const this, struct __const_iterator __i1, struct __const_iterator __i2, char * __k1, char * __k2)
{
  struct basic_string & D.97753;
  struct iterator D.97226;

  try
    {
      D.97226 = std::__cxx11::basic_string<char>::begin (this);
      _1 = __gnu_cxx::operator-<const char*, char*, std::__cxx11::basic_string<char> > (&__i1, &D.97226);
      _2 = (long unsigned int) _1;
      _3 = __gnu_cxx::operator-<const char*, std::__cxx11::basic_string<char> > (&__i2, &__i1);
      _4 = (long unsigned int) _3;
      _5 = __k2 - __k1;
      _6 = (long unsigned int) _5;
      D.97753 = std::__cxx11::basic_string<char>::replace (this, _2, _4, __k1, _6);
      return D.97753;
    }
  finally
    {
      D.97226 = {CLOBBER(eol)};
    }
}


__attribute__((nodiscard))
long int __gnu_cxx::operator-<const char*, char*, std::__cxx11::basic_string<char> > (const struct __normal_iterator & __lhs, const struct __normal_iterator & __rhs)
{
  long int D.97758;

  try
    {
      _1 = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >::base (__lhs);
      _2 = *_1;
      _3 = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >::base (__rhs);
      _4 = *_3;
      D.97758 = _2 - _4;
      return D.97758;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


__attribute__((nodiscard))
difference_type __gnu_cxx::operator-<const char*, std::__cxx11::basic_string<char> > (const struct __normal_iterator & __lhs, const struct __normal_iterator & __rhs)
{
  difference_type D.97760;

  try
    {
      _1 = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >::base (__lhs);
      _2 = *_1;
      _3 = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >::base (__rhs);
      _4 = *_3;
      D.97760 = _2 - _4;
      return D.97760;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


struct basic_string & std::__cxx11::basic_string<char>::operator= (struct basic_string * const this, const struct basic_string & __str)
{
  struct basic_string & D.97762;

  D.97762 = std::__cxx11::basic_string<char>::assign (this, __str);
  return D.97762;
}


struct basic_string & std::__cxx11::basic_string<char>::assign (struct basic_string * const this, const struct basic_string & __str)
{
  bool retval.22;
  struct basic_string & D.97775;

  {
    if (0 != 0) goto <D.97765>; else goto <D.97766>;
    <D.97765>:
    {
      {
        if (0 != 0) goto <D.97767>; else goto <D.97768>;
        <D.97767>:
        {
          {
            _1 = std::__cxx11::basic_string<char>::size (__str);
            retval.22 = _1 <= 15;
            if (retval.22 != 0) goto <D.97770>; else goto <D.97771>;
            <D.97770>:
            _2 = this->D.28191._M_allocated_capacity;
            std::__cxx11::basic_string<char>::_M_destroy (this, _2);
            _3 = std::__cxx11::basic_string<char>::_M_use_local_data (this);
            std::__cxx11::basic_string<char>::_M_data (this, _3);
            std::__cxx11::basic_string<char>::_M_set_length (this, 0);
            goto <D.97772>;
            <D.97771>:
            {
              const long unsigned int __len;
              struct allocator __alloc;
              char * __ptr;

              try
                {
                  __len = std::__cxx11::basic_string<char>::size (__str);
                  _4 = std::__cxx11::basic_string<char>::_M_get_allocator (__str);
                  std::allocator<char>::allocator (&__alloc, _4);
                  try
                    {
                      _5 = __len + 1;
                      __ptr = std::allocator_traits<std::allocator<char> >::allocate (&__alloc, _5);
                      _6 = this->D.28191._M_allocated_capacity;
                      std::__cxx11::basic_string<char>::_M_destroy (this, _6);
                      std::__cxx11::basic_string<char>::_M_data (this, __ptr);
                      std::__cxx11::basic_string<char>::_M_capacity (this, __len);
                      std::__cxx11::basic_string<char>::_M_set_length (this, __len);
                    }
                  finally
                    {
                      std::allocator<char>::~allocator (&__alloc);
                    }
                }
              finally
                {
                  __alloc = {CLOBBER(eol)};
                }
            }
            <D.97772>:
          }
        }
        goto <D.97773>;
        <D.97768>:
        <D.97773>:
      }
      _7 = std::__cxx11::basic_string<char>::_M_get_allocator (this);
      _8 = std::__cxx11::basic_string<char>::_M_get_allocator (__str);
      std::__alloc_on_copy<std::allocator<char> > (_7, _8);
    }
    goto <D.97774>;
    <D.97766>:
    <D.97774>:
  }
  std::__cxx11::basic_string<char>::_M_assign (this, __str);
  D.97775 = this;
  return D.97775;
}


void std::__cxx11::basic_ostringstream<char>::~basic_ostringstream (struct basic_ostringstream * const this)
{
  try
    {
      {
        _1 = &_ZTVNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE + 24;
        this->D.76876._vptr.basic_ostream = _1;
        _2 = this + 112;
        _3 = &_ZTVNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE + 64;
        MEM[(struct basic_ios *)_2].D.43795._vptr.ios_base = _3;
        try
          {
            try
              {
                try
                  {
                    try
                      {

                      }
                    finally
                      {
                        _4 = &this->_M_stringbuf;
                        std::__cxx11::basic_stringbuf<char>::~basic_stringbuf (_4);
                      }
                  }
                finally
                  {
                    _5 = &this->D.76876;
                    _6 = &_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE + 8;
                    std::basic_ostream<char>::~basic_ostream (_5, _6);
                  }
              }
            finally
              {
                _7 = &this->D.76880;
                std::basic_ios<char>::~basic_ios (_7);
              }
          }
        finally
          {
            *this = {CLOBBER};
          }
      }
      <D.96321>:
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
}


void write_log (const char * msg)
{
  struct string D.89060;
  bool retval.23;
  struct ofstream logfile;

  try
    {
      # DEBUG BEGIN_STMT
      try
        {
          D.89060 = get_log_path (); [return slot optimization]
          try
            {
              std::basic_ofstream<char>::basic_ofstream (&logfile, &D.89060, 1);
            }
          finally
            {
              std::__cxx11::basic_string<char>::~basic_string (&D.89060);
            }
        }
      finally
        {
          D.89060 = {CLOBBER(eol)};
        }
      try
        {
          # DEBUG BEGIN_STMT
          {
            retval.23 = std::basic_ofstream<char>::is_open (&logfile);
            if (retval.23 != 0) goto <D.97781>; else goto <D.97782>;
            <D.97781>:
            {
              time_t t;
              char timestamp[100];

              try
                {
                  # DEBUG BEGIN_STMT
                  _1 = time (0B);
                  t = _1;
                  # DEBUG BEGIN_STMT
                  # DEBUG BEGIN_STMT
                  _2 = localtime (&t);
                  strftime (&timestamp, 100, "%Y-%m-%d %H:%M:%S", _2);
                  # DEBUG BEGIN_STMT
                  _3 = std::operator<< <std::char_traits<char> > (&logfile.D.51725, "[");
                  _4 = std::operator<< <std::char_traits<char> > (_3, &timestamp);
                  _5 = std::operator<< <std::char_traits<char> > (_4, "] ");
                  _6 = std::operator<< <std::char_traits<char> > (_5, msg);
                  std::basic_ostream<char>::operator<< (_6, endl);
                  # DEBUG BEGIN_STMT
                  std::basic_ofstream<char>::close (&logfile);
                }
              finally
                {
                  t = {CLOBBER(eol)};
                  timestamp = {CLOBBER(eol)};
                }
            }
            goto <D.97783>;
            <D.97782>:
            # DEBUG BEGIN_STMT
            std::operator<< <std::char_traits<char> > (&cerr, "[ERROR] Failed to open log file.\n");
            # DEBUG BEGIN_STMT
            exit (123);
            <D.97783>:
          }
        }
      finally
        {
          std::basic_ofstream<char>::~basic_ofstream (&logfile);
        }
    }
  finally
    {
      logfile = {CLOBBER(eol)};
    }
}


struct string get_log_path ()
{
  # DEBUG BEGIN_STMT
  std::__cxx11::basic_string<char>::basic_string (<retval>, &log_path);
  return <retval>;
}


void std::__cxx11::basic_string<char>::basic_string (struct basic_string * const this, const struct basic_string & __str)
{
  struct allocator D.92567;
  struct forward_iterator_tag D.97794;

  *this = {CLOBBER};
  {
    _1 = &this->_M_dataplus;
    _2 = std::__cxx11::basic_string<char>::_M_local_data (this);
    try
      {
        _3 = std::__cxx11::basic_string<char>::_M_get_allocator (__str);
        D.92567 = __gnu_cxx::__alloc_traits<std::allocator<char>, char>::_S_select_on_copy (_3); [return slot optimization]
        try
          {
            std::__cxx11::basic_string<char>::_Alloc_hider::_Alloc_hider (_1, _2, &D.92567);
          }
        finally
          {
            std::allocator<char>::~allocator (&D.92567);
          }
      }
    finally
      {
        D.92567 = {CLOBBER(eol)};
      }
    try
      {
        _4 = std::__cxx11::basic_string<char>::_M_data (__str);
        _5 = std::__cxx11::basic_string<char>::_M_data (__str);
        _6 = std::__cxx11::basic_string<char>::length (__str);
        _7 = _5 + _6;
        std::__cxx11::basic_string<char>::_M_construct<char*> (this, _4, _7, D.97794);
      }
    catch
      {
        _8 = &this->_M_dataplus;
        std::__cxx11::basic_string<char>::_Alloc_hider::~_Alloc_hider (_8);
      }
  }
}


struct allocator __gnu_cxx::__alloc_traits<std::allocator<char>, char>::_S_select_on_copy (const struct allocator & __a)
{
  *<retval> = std::allocator_traits<std::allocator<char> >::select_on_container_copy_construction (__a); [return slot optimization]
  return <retval>;
}


struct allocator_type std::allocator_traits<std::allocator<char> >::select_on_container_copy_construction (const struct allocator_type & __rhs)
{
  std::allocator<char>::allocator (<retval>, __rhs);
  return <retval>;
}


void std::__cxx11::basic_string<char>::_M_construct<char*> (struct basic_string * const this, char * __beg, char * __end, struct forward_iterator_tag D.94910)
{
  size_type __dnew;
  typedef struct _Guard _Guard;
  struct _Guard __guard;

  try
    {
      _1 = std::distance<char*> (__beg, __end);
      _2 = (long unsigned int) _1;
      __dnew = _2;
      __dnew.24_3 = __dnew;
      if (__dnew.24_3 > 15) goto <D.97799>; else goto <D.97800>;
      <D.97799>:
      _4 = std::__cxx11::basic_string<char>::_M_create (this, &__dnew, 0);
      std::__cxx11::basic_string<char>::_M_data (this, _4);
      __dnew.25_5 = __dnew;
      std::__cxx11::basic_string<char>::_M_capacity (this, __dnew.25_5);
      goto <D.97801>;
      <D.97800>:
      std::__cxx11::basic_string<char>::_M_use_local_data (this);
      <D.97801>:
      std::__cxx11::basic_string<char>::_M_construct<char*>(char*, char*, std::forward_iterator_tag)::_Guard::_Guard (&__guard, this);
      try
        {
          _6 = std::__cxx11::basic_string<char>::_M_data (this);
          std::__cxx11::basic_string<char>::_S_copy_chars (_6, __beg, __end);
          __guard._M_guarded = 0B;
          __dnew.26_7 = __dnew;
          std::__cxx11::basic_string<char>::_M_set_length (this, __dnew.26_7);
        }
      finally
        {
          std::__cxx11::basic_string<char>::_M_construct<char*>(char*, char*, std::forward_iterator_tag)::_Guard::~_Guard (&__guard);
        }
    }
  finally
    {
      __dnew = {CLOBBER(eol)};
      __guard = {CLOBBER(eol)};
    }
}


__attribute__((nodiscard))
difference_type std::distance<char*> (char * __first, char * __last)
{
  difference_type D.97805;
  struct iterator_category D.96131;
  struct random_access_iterator_tag D.97806;

  __first.27_1 = __first;
  D.97805 = std::__distance<char*> (__first.27_1, __last, D.97806);
  return D.97805;
}


difference_type std::__distance<char*> (char * __first, char * __last, struct random_access_iterator_tag D.96582)
{
  difference_type D.97808;

  D.97808 = __last - __first;
  return D.97808;
}


void std::__cxx11::basic_string<char>::_M_construct<char*>(char*, char*, std::forward_iterator_tag)::_Guard::_Guard (struct _Guard * const this, struct basic_string * __s)
{
  *this = {CLOBBER};
  {
    this->_M_guarded = __s;
  }
}


void std::__cxx11::basic_string<char>::_S_copy_chars (char * __p, char * __k1, char * __k2)
{
  try
    {
      _1 = __k2 - __k1;
      _2 = (long unsigned int) _1;
      std::__cxx11::basic_string<char>::_S_copy (__p, __k1, _2);
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
}


void std::__cxx11::basic_string<char>::_M_construct<char*>(char*, char*, std::forward_iterator_tag)::_Guard::~_Guard (struct _Guard * const this)
{
  try
    {
      {
        try
          {
            _1 = this->_M_guarded;
            if (_1 != 0B) goto <D.97810>; else goto <D.97811>;
            <D.97810>:
            _2 = this->_M_guarded;
            std::__cxx11::basic_string<char>::_M_dispose (_2);
            goto <D.97812>;
            <D.97811>:
            <D.97812>:
          }
        finally
          {
            *this = {CLOBBER};
          }
      }
      <D.94947>:
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
}


void std::basic_ofstream<char>::basic_ofstream (struct basic_ofstream * const this, const struct string & __s, openmode __mode)
{
  *this = {CLOBBER};
  {
    _1 = &this->D.51729;
    std::basic_ios<char>::basic_ios (_1);
    try
      {
        _2 = &this->D.51725;
        _3 = &_ZTTSt14basic_ofstreamIcSt11char_traitsIcEE + 8;
        std::basic_ostream<char>::basic_ostream (_2, _3);
        try
          {
            _4 = &_ZTVSt14basic_ofstreamIcSt11char_traitsIcEE + 24;
            this->D.51725._vptr.basic_ostream = _4;
            _5 = this + 256;
            _6 = &_ZTVSt14basic_ofstreamIcSt11char_traitsIcEE + 64;
            MEM[(struct basic_ios *)_5].D.43795._vptr.ios_base = _6;
            _7 = &this->_M_filebuf;
            std::basic_filebuf<char>::basic_filebuf (_7);
            try
              {
                _8 = this + 256;
                _9 = &this->_M_filebuf.D.51363;
                std::basic_ios<char>::init (_8, _9);
                std::basic_ofstream<char>::open (this, __s, __mode);
              }
            catch
              {
                _10 = &this->_M_filebuf;
                std::basic_filebuf<char>::~basic_filebuf (_10);
              }
          }
        catch
          {
            _11 = &this->D.51725;
            _12 = &_ZTTSt14basic_ofstreamIcSt11char_traitsIcEE + 8;
            std::basic_ostream<char>::~basic_ostream (_11, _12);
          }
      }
    catch
      {
        _13 = &this->D.51729;
        std::basic_ios<char>::~basic_ios (_13);
      }
  }
}


void std::basic_ofstream<char>::~basic_ofstream (struct basic_ofstream * const this)
{
  try
    {
      std::basic_ofstream<char>::~basic_ofstream (this);
    }
  finally
    {
      operator delete (this, 520);
    }
}


void std::basic_ofstream<char>::open (struct basic_ofstream * const this, const struct string & __s, openmode __mode)
{
  bool retval.28;

  _1 = &this->_M_filebuf;
  _2 = std::operator| (__mode, 16);
  _3 = std::basic_filebuf<char>::open (_1, __s, _2);
  retval.28 = _3 == 0B;
  if (retval.28 != 0) goto <D.97817>; else goto <D.97818>;
  <D.97817>:
  _4 = this->D.51725._vptr.basic_ostream;
  _5 = _4 + 18446744073709551592;
  _6 = MEM[(long int *)_5];
  _7 = (sizetype) _6;
  _8 = this + _7;
  std::basic_ios<char>::setstate (_8, 4);
  goto <D.97819>;
  <D.97818>:
  _9 = this->D.51725._vptr.basic_ostream;
  _10 = _9 + 18446744073709551592;
  _11 = MEM[(long int *)_10];
  _12 = (sizetype) _11;
  _13 = this + _12;
  std::basic_ios<char>::clear (_13, 0);
  <D.97819>:
}


_Ios_Openmode std::operator| (_Ios_Openmode __a, _Ios_Openmode __b)
{
  _Ios_Openmode D.97821;

  # DEBUG BEGIN_STMT
  D.97821 = __a | __b;
  return D.97821;
}


struct __filebuf_type * std::basic_filebuf<char>::open (struct basic_filebuf * const this, const struct string & __s, openmode __mode)
{
  struct __filebuf_type * D.97823;

  _1 = std::__cxx11::basic_string<char>::c_str (__s);
  D.97823 = std::basic_filebuf<char>::open (this, _1, __mode);
  return D.97823;
}


void std::basic_filebuf<char>::~basic_filebuf (struct basic_filebuf * const this)
{
  try
    {
      {
        _1 = &_ZTVSt13basic_filebufIcSt11char_traitsIcEE + 16;
        this->D.51363._vptr.basic_streambuf = _1;
        try
          {
            try
              {
                try
                  {
                    try
                      {
                        std::basic_filebuf<char>::close (this);
                      }
                    catch
                      {
                        catch (NULL)
                          {
                            try
                              {
                                _2 = __builtin_eh_pointer (0);
                                __cxa_begin_catch (_2);
                              }
                            finally
                              {
                                __cxa_end_catch ();
                              }
                          }
                      }
                  }
                finally
                  {
                    _3 = &this->_M_file;
                    std::__basic_file<char>::~__basic_file (_3);
                  }
              }
            finally
              {
                _4 = &this->D.51363;
                std::basic_streambuf<char>::~basic_streambuf (_4);
              }
          }
        finally
          {
            *this = {CLOBBER};
          }
      }
      <D.95589>:
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
}


void std::basic_filebuf<char>::~basic_filebuf (struct basic_filebuf * const this)
{
  try
    {
      std::basic_filebuf<char>::~basic_filebuf (this);
    }
  finally
    {
      operator delete (this, 248);
    }
}


bool std::basic_ofstream<char>::is_open (struct basic_ofstream * const this)
{
  bool D.97829;

  _1 = &this->_M_filebuf;
  D.97829 = std::basic_filebuf<char>::is_open (_1);
  return D.97829;
}


bool std::basic_filebuf<char>::is_open (const struct basic_filebuf * const this)
{
  bool D.97831;

  try
    {
      _1 = &this->_M_file;
      D.97831 = std::__basic_file<char>::is_open (_1);
      return D.97831;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


void std::basic_ofstream<char>::close (struct basic_ofstream * const this)
{
  bool retval.29;

  _1 = &this->_M_filebuf;
  _2 = std::basic_filebuf<char>::close (_1);
  retval.29 = _2 == 0B;
  if (retval.29 != 0) goto <D.97834>; else goto <D.97835>;
  <D.97834>:
  _3 = this->D.51725._vptr.basic_ostream;
  _4 = _3 + 18446744073709551592;
  _5 = MEM[(long int *)_4];
  _6 = (sizetype) _5;
  _7 = this + _6;
  std::basic_ios<char>::setstate (_7, 4);
  goto <D.97836>;
  <D.97835>:
  <D.97836>:
}


void std::basic_ofstream<char>::~basic_ofstream (struct basic_ofstream * const this)
{
  try
    {
      {
        _1 = &_ZTVSt14basic_ofstreamIcSt11char_traitsIcEE + 24;
        this->D.51725._vptr.basic_ostream = _1;
        _2 = this + 256;
        _3 = &_ZTVSt14basic_ofstreamIcSt11char_traitsIcEE + 64;
        MEM[(struct basic_ios *)_2].D.43795._vptr.ios_base = _3;
        try
          {
            try
              {
                try
                  {
                    try
                      {

                      }
                    finally
                      {
                        _4 = &this->_M_filebuf;
                        std::basic_filebuf<char>::~basic_filebuf (_4);
                      }
                  }
                finally
                  {
                    _5 = &this->D.51725;
                    _6 = &_ZTTSt14basic_ofstreamIcSt11char_traitsIcEE + 8;
                    std::basic_ostream<char>::~basic_ostream (_5, _6);
                  }
              }
            finally
              {
                _7 = &this->D.51729;
                std::basic_ios<char>::~basic_ios (_7);
              }
          }
        finally
          {
            *this = {CLOBBER};
          }
      }
      <D.93465>:
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
}


void std::filesystem::__cxx11::path::~path (struct path * const this)
{
  {
    try
      {
        try
          {
            try
              {

              }
            finally
              {
                _1 = &this->_M_cmpts;
                std::filesystem::__cxx11::path::_List::~_List (_1);
              }
          }
        finally
          {
            _2 = &this->_M_pathname;
            std::__cxx11::basic_string<char>::~basic_string (_2);
          }
      }
    finally
      {
        *this = {CLOBBER};
      }
  }
  <D.83369>:
}


void std::filesystem::__cxx11::path::_List::~_List (struct _List * const this)
{
  {
    try
      {
        try
          {

          }
        finally
          {
            _1 = &this->_M_impl;
            std::unique_ptr<std::filesystem::__cxx11::path::_List::_Impl, std::filesystem::__cxx11::path::_List::_Impl_deleter>::~unique_ptr (_1);
          }
      }
    finally
      {
        *this = {CLOBBER};
      }
  }
  <D.83364>:
}


void std::unique_ptr<std::filesystem::__cxx11::path::_List::_Impl, std::filesystem::__cxx11::path::_List::_Impl_deleter>::~unique_ptr (struct unique_ptr * const this)
{
  try
    {
      {
        try
          {
            {
              struct _Impl * & __ptr;

              _1 = &this->_M_t.D.82893;
              __ptr = std::__uniq_ptr_impl<std::filesystem::__cxx11::path::_List::_Impl, std::filesystem::__cxx11::path::_List::_Impl_deleter>::_M_ptr (_1);
              _2 = *__ptr;
              if (_2 != 0B) goto <D.97838>; else goto <D.97839>;
              <D.97838>:
              _3 = std::unique_ptr<std::filesystem::__cxx11::path::_List::_Impl, std::filesystem::__cxx11::path::_List::_Impl_deleter>::get_deleter (this);
              _4 = MEM[(struct _Impl * &)__ptr];
              std::filesystem::__cxx11::path::_List::_Impl_deleter::operator() (_3, _4);
              goto <D.97840>;
              <D.97839>:
              <D.97840>:
              *__ptr = 0B;
            }
          }
        finally
          {
            *this = {CLOBBER};
          }
      }
      <D.92498>:
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
}


struct _Impl * & std::__uniq_ptr_impl<std::filesystem::__cxx11::path::_List::_Impl, std::filesystem::__cxx11::path::_List::_Impl_deleter>::_M_ptr (struct __uniq_ptr_impl * const this)
{
  struct _Impl * & D.97841;

  try
    {
      _1 = &this->_M_t;
      D.97841 = std::get<0, std::filesystem::__cxx11::path::_List::_Impl*, std::filesystem::__cxx11::path::_List::_Impl_deleter> (_1);
      return D.97841;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


struct _Impl * & std::get<0, std::filesystem::__cxx11::path::_List::_Impl*, std::filesystem::__cxx11::path::_List::_Impl_deleter> (struct tuple & __t)
{
  struct _Impl * & D.97843;

  try
    {
      _1 = &__t->D.82524;
      D.97843 = std::__get_helper<0, std::filesystem::__cxx11::path::_List::_Impl*, std::filesystem::__cxx11::path::_List::_Impl_deleter> (_1);
      return D.97843;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


struct _Impl * & std::__get_helper<0, std::filesystem::__cxx11::path::_List::_Impl*, std::filesystem::__cxx11::path::_List::_Impl_deleter> (struct _Tuple_impl & __t)
{
  struct _Impl * & D.97845;

  try
    {
      D.97845 = std::_Tuple_impl<0, std::filesystem::__cxx11::path::_List::_Impl*, std::filesystem::__cxx11::path::_List::_Impl_deleter>::_M_head (__t);
      return D.97845;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


struct _Impl * & std::_Tuple_impl<0, std::filesystem::__cxx11::path::_List::_Impl*, std::filesystem::__cxx11::path::_List::_Impl_deleter>::_M_head (struct _Tuple_impl & __t)
{
  struct _Impl * & D.97847;

  try
    {
      _1 = &__t->D.81359;
      D.97847 = std::_Head_base<0, std::filesystem::__cxx11::path::_List::_Impl*, false>::_M_head (_1);
      return D.97847;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


struct _Impl * & std::_Head_base<0, std::filesystem::__cxx11::path::_List::_Impl*, false>::_M_head (struct _Head_base & __b)
{
  struct _Impl * & D.97849;

  try
    {
      D.97849 = &__b->_M_head_impl;
      return D.97849;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


struct deleter_type & std::unique_ptr<std::filesystem::__cxx11::path::_List::_Impl, std::filesystem::__cxx11::path::_List::_Impl_deleter>::get_deleter (struct unique_ptr * const this)
{
  struct deleter_type & D.97851;

  try
    {
      _1 = &this->_M_t.D.82893;
      D.97851 = std::__uniq_ptr_impl<std::filesystem::__cxx11::path::_List::_Impl, std::filesystem::__cxx11::path::_List::_Impl_deleter>::_M_deleter (_1);
      return D.97851;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


struct _Impl_deleter & std::__uniq_ptr_impl<std::filesystem::__cxx11::path::_List::_Impl, std::filesystem::__cxx11::path::_List::_Impl_deleter>::_M_deleter (struct __uniq_ptr_impl * const this)
{
  struct _Impl_deleter & D.97853;

  try
    {
      _1 = &this->_M_t;
      D.97853 = std::get<1, std::filesystem::__cxx11::path::_List::_Impl*, std::filesystem::__cxx11::path::_List::_Impl_deleter> (_1);
      return D.97853;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


struct __tuple_element_t & std::get<1, std::filesystem::__cxx11::path::_List::_Impl*, std::filesystem::__cxx11::path::_List::_Impl_deleter> (struct tuple & __t)
{
  struct __tuple_element_t & D.97855;

  try
    {
      D.97855 = std::__get_helper<1, std::filesystem::__cxx11::path::_List::_Impl_deleter> (__t);
      return D.97855;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


struct _Impl_deleter & std::__get_helper<1, std::filesystem::__cxx11::path::_List::_Impl_deleter> (struct _Tuple_impl & __t)
{
  struct _Impl_deleter & D.97857;

  try
    {
      D.97857 = std::_Tuple_impl<1, std::filesystem::__cxx11::path::_List::_Impl_deleter>::_M_head (__t);
      return D.97857;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


struct _Impl_deleter & std::_Tuple_impl<1, std::filesystem::__cxx11::path::_List::_Impl_deleter>::_M_head (struct _Tuple_impl & __t)
{
  struct _Impl_deleter & D.97859;

  try
    {
      D.97859 = std::_Head_base<1, std::filesystem::__cxx11::path::_List::_Impl_deleter, true>::_M_head (__t);
      return D.97859;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


struct _Impl_deleter & std::_Head_base<1, std::filesystem::__cxx11::path::_List::_Impl_deleter, true>::_M_head (struct _Head_base & __b)
{
  struct _Impl_deleter & D.97861;

  try
    {
      D.97861 = &__b->_M_head_impl;
      return D.97861;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


void execute_script (const struct string & scriptPath)
{
  bool retval.31;
  bool retval.33;
  int stdout_pipe[2];
  int stderr_pipe[2];
  pid_t pid;

  try
    {
      # DEBUG BEGIN_STMT
      # DEBUG BEGIN_STMT
      pipe (&stdout_pipe);
      # DEBUG BEGIN_STMT
      pipe (&stderr_pipe);
      # DEBUG BEGIN_STMT
      pid = fork ();
      # DEBUG BEGIN_STMT
      {
        if (pid == 0) goto <D.97863>; else goto <D.97864>;
        <D.97863>:
        # DEBUG BEGIN_STMT
        _1 = stdout_pipe[0];
        close (_1);
        # DEBUG BEGIN_STMT
        _2 = stderr_pipe[0];
        close (_2);
        # DEBUG BEGIN_STMT
        _3 = stdout_pipe[1];
        dup2 (_3, 1);
        # DEBUG BEGIN_STMT
        _4 = stderr_pipe[1];
        dup2 (_4, 2);
        # DEBUG BEGIN_STMT
        _5 = std::__cxx11::basic_string<char>::c_str (scriptPath);
        execl ("/bin/bash", "bash", _5, 0);
        # DEBUG BEGIN_STMT
        _exit (1);
        <D.97864>:
        {
          # DEBUG BEGIN_STMT
          {
            if (pid > 0) goto <D.97865>; else goto <D.97866>;
            <D.97865>:
            {
              struct array buffer;
              ssize_t n;
              int status;

              try
                {
                  # DEBUG BEGIN_STMT
                  _6 = stdout_pipe[1];
                  close (_6);
                  # DEBUG BEGIN_STMT
                  _7 = stderr_pipe[1];
                  close (_7);
                  # DEBUG BEGIN_STMT
                  # DEBUG BEGIN_STMT
                  # DEBUG BEGIN_STMT
                  goto <D.89293>;
                  <D.89294>:
                  # DEBUG BEGIN_STMT
                  n.30_8 = (long unsigned int) n;
                  _9 = std::array<char, 128>::operator[] (&buffer, n.30_8);
                  *_9 = 0;
                  # DEBUG BEGIN_STMT
                  _10 = std::operator<< <std::char_traits<char> > (&cout, "[SHINFO] ");
                  _11 = std::array<char, 128>::data (&buffer);
                  std::operator<< <std::char_traits<char> > (_10, _11);
                  <D.89293>:
                  # DEBUG BEGIN_STMT
                  _12 = stdout_pipe[0];
                  _13 = std::array<char, 128>::data (&buffer);
                  n = read (_12, _13, 127);
                  retval.31 = n > 0;
                  if (retval.31 != 0) goto <D.89294>; else goto <D.89292>;
                  <D.89292>:
                  # DEBUG BEGIN_STMT
                  goto <D.89296>;
                  <D.89297>:
                  # DEBUG BEGIN_STMT
                  n.32_14 = (long unsigned int) n;
                  _15 = std::array<char, 128>::operator[] (&buffer, n.32_14);
                  *_15 = 0;
                  # DEBUG BEGIN_STMT
                  _16 = std::operator<< <std::char_traits<char> > (&cerr, "[SHERR] ");
                  _17 = std::array<char, 128>::data (&buffer);
                  std::operator<< <std::char_traits<char> > (_16, _17);
                  <D.89296>:
                  # DEBUG BEGIN_STMT
                  _18 = stderr_pipe[0];
                  _19 = std::array<char, 128>::data (&buffer);
                  n = read (_18, _19, 127);
                  retval.33 = n > 0;
                  if (retval.33 != 0) goto <D.89297>; else goto <D.89295>;
                  <D.89295>:
                  # DEBUG BEGIN_STMT
                  _20 = stdout_pipe[0];
                  close (_20);
                  # DEBUG BEGIN_STMT
                  _21 = stderr_pipe[0];
                  close (_21);
                  # DEBUG BEGIN_STMT
                  # DEBUG BEGIN_STMT
                  waitpid (pid, &status, 0);
                  # DEBUG BEGIN_STMT
                  status.34_22 = status;
                  _23 = status.34_22 & 127;
                  if (_23 == 0) goto <D.97869>; else goto <D.97870>;
                  <D.97869>:
                  # DEBUG BEGIN_STMT
                  _24 = std::operator<< <std::char_traits<char> > (&cout, "[INFO] Script ");
                  _25 = std::operator<< <char, std::char_traits<char>, std::allocator<char> > (_24, scriptPath);
                  _26 = std::operator<< <std::char_traits<char> > (_25, " exited with status ");
                  status.35_27 = status;
                  _28 = status.35_27 >> 8;
                  _29 = _28 & 255;
                  _30 = std::basic_ostream<char>::operator<< (_26, _29);
                  std::basic_ostream<char>::operator<< (_30, endl);
                  goto <D.97871>;
                  <D.97870>:
                  # DEBUG BEGIN_STMT
                  status.36_31 = status;
                  _32 = (unsigned char) status.36_31;
                  _33 = _32 & 127;
                  _34 = _33 + 1;
                  _35 = (signed char) _34;
                  _36 = _35 >> 1;
                  if (_36 > 0) goto <D.97872>; else goto <D.97873>;
                  <D.97872>:
                  # DEBUG BEGIN_STMT
                  _37 = std::operator<< <std::char_traits<char> > (&cout, "[ERROR] Script ");
                  _38 = std::operator<< <char, std::char_traits<char>, std::allocator<char> > (_37, scriptPath);
                  _39 = std::operator<< <std::char_traits<char> > (_38, " terminated by signal ");
                  status.37_40 = status;
                  _41 = status.37_40 & 127;
                  _42 = std::basic_ostream<char>::operator<< (_39, _41);
                  std::basic_ostream<char>::operator<< (_42, endl);
                  goto <D.97874>;
                  <D.97873>:
                  <D.97874>:
                  <D.97871>:
                }
              finally
                {
                  buffer = {CLOBBER(eol)};
                  status = {CLOBBER(eol)};
                }
            }
            goto <D.97875>;
            <D.97866>:
            # DEBUG BEGIN_STMT
            std::operator<< <std::char_traits<char> > (&cerr, "[ERROR] Failed to fork process.\n");
            # DEBUG BEGIN_STMT
            exit (1);
            <D.97875>:
          }
        }
      }
    }
  finally
    {
      stdout_pipe = {CLOBBER(eol)};
      stderr_pipe = {CLOBBER(eol)};
    }
}


__attribute__((nodiscard))
value_type & std::array<char, 128>::operator[] (struct array * const this, size_type __n)
{
  value_type & D.97890;

  try
    {
      _1 = &this->_M_elems;
      D.97890 = std::__array_traits<char, 128>::_S_ref (_1, __n);
      return D.97890;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


char & std::__array_traits<char, 128>::_S_ref (const char[128] & __t, size_t __n)
{
  char & D.97892;

  try
    {
      D.97892 = &(*__t)[__n];
      return D.97892;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


__attribute__((nodiscard, const))
value_type * std::array<char, 128>::data (struct array * const this)
{
  value_type * D.97894;

  try
    {
      _1 = &this->_M_elems;
      D.97894 = std::__array_traits<char, 128>::_S_ptr (_1);
      return D.97894;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


char * std::__array_traits<char, 128>::_S_ptr (const char[128] & __t)
{
  char * D.97896;

  try
    {
      D.97896 = __t;
      return D.97896;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
  __builtin_unreachable ();
}


void monitor_child (pid_t pid)
{
  bool retval.38;
  bool retval.43;
  int status;
  const int timeout;

  try
    {
      # DEBUG BEGIN_STMT
      # DEBUG BEGIN_STMT
      timeout = 400;
      # DEBUG BEGIN_STMT
      {
        int i;

        i = 0;
        goto <D.89307>;
        <D.89306>:
        # DEBUG BEGIN_STMT
        _1 = waitpid (pid, &status, 1);
        retval.38 = pid == _1;
        if (retval.38 != 0) goto <D.97899>; else goto <D.97900>;
        <D.97899>:
        # DEBUG BEGIN_STMT
        status.39_2 = status;
        _3 = status.39_2 & 127;
        if (_3 == 0) goto <D.97901>; else goto <D.97902>;
        <D.97901>:
        # DEBUG BEGIN_STMT
        _4 = std::operator<< <std::char_traits<char> > (&cout, "[INFO] Script exited with status ");
        status.40_5 = status;
        _6 = status.40_5 >> 8;
        _7 = _6 & 255;
        _8 = std::basic_ostream<char>::operator<< (_4, _7);
        std::basic_ostream<char>::operator<< (_8, endl);
        goto <D.97903>;
        <D.97902>:
        # DEBUG BEGIN_STMT
        status.41_9 = status;
        _10 = (unsigned char) status.41_9;
        _11 = _10 & 127;
        _12 = _11 + 1;
        _13 = (signed char) _12;
        _14 = _13 >> 1;
        if (_14 > 0) goto <D.97904>; else goto <D.97905>;
        <D.97904>:
        # DEBUG BEGIN_STMT
        _15 = std::operator<< <std::char_traits<char> > (&cout, "[ERROR] Script terminated by signal ");
        status.42_16 = status;
        _17 = status.42_16 & 127;
        _18 = std::basic_ostream<char>::operator<< (_15, _17);
        std::basic_ostream<char>::operator<< (_18, endl);
        goto <D.97906>;
        <D.97905>:
        <D.97906>:
        <D.97903>:
        # DEBUG BEGIN_STMT
        // predicted unlikely by early return (on trees) predictor.
        return;
        <D.97900>:
        # DEBUG BEGIN_STMT
        sleep (1);
        # DEBUG BEGIN_STMT
        i = i + 1;
        <D.89307>:
        # DEBUG BEGIN_STMT
        if (i <= 399) goto <D.89306>; else goto <D.89304>;
        <D.89304>:
      }
      # DEBUG BEGIN_STMT
      _19 = kill (pid, 9);
      retval.43 = _19 == 0;
      if (retval.43 != 0) goto <D.97908>; else goto <D.97909>;
      <D.97908>:
      # DEBUG BEGIN_STMT
      waitpid (pid, &status, 0);
      # DEBUG BEGIN_STMT
      std::operator<< <std::char_traits<char> > (&cerr, "[INFO] Child process killed due to timeout.\n");
      goto <D.97910>;
      <D.97909>:
      # DEBUG BEGIN_STMT
      std::operator<< <std::char_traits<char> > (&cerr, "[ERROR] Failed to kill child process.\n");
      # DEBUG BEGIN_STMT
      exit (4);
      <D.97910>:
    }
  finally
    {
      status = {CLOBBER(eol)};
    }
}


int main ()
{
  const struct string D.89313;
  struct allocator D.89312;
  int D.97920;

  {
    struct array buffer;
    struct string result;

    try
      {
        # DEBUG BEGIN_STMT
        register_signal ();
        # DEBUG BEGIN_STMT
        # DEBUG BEGIN_STMT
        std::__cxx11::basic_string<char>::basic_string (&result);
        try
          {
            # DEBUG BEGIN_STMT
            try
              {
                try
                  {
                    std::allocator<char>::allocator (&D.89312);
                    try
                      {
                        std::__cxx11::basic_string<char>::basic_string<> (&D.89313, "./log.sh", &D.89312);
                        try
                          {
                            execute_script (&D.89313);
                          }
                        finally
                          {
                            std::__cxx11::basic_string<char>::~basic_string (&D.89313);
                          }
                      }
                    finally
                      {
                        std::allocator<char>::~allocator (&D.89312);
                      }
                  }
                finally
                  {
                    D.89312 = {CLOBBER(eol)};
                  }
              }
            finally
              {
                D.89313 = {CLOBBER(eol)};
              }
            # DEBUG BEGIN_STMT
            _1 = std::__cxx11::basic_string<char>::c_str (&result);
            write_log (_1);
            # DEBUG BEGIN_STMT
            D.97920 = 0;
            return D.97920;
          }
        finally
          {
            std::__cxx11::basic_string<char>::~basic_string (&result);
          }
      }
    finally
      {
        buffer = {CLOBBER(eol)};
        result = {CLOBBER(eol)};
      }
  }
  D.97920 = 0;
  return D.97920;
}


void _GLOBAL__sub_I__Z8logErrorRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_i ()
{
  __static_initialization_and_destruction_0 (1, 65535);
}


void __static_initialization_and_destruction_0 (int __initialize_p, int __priority)
{
  struct allocator D.89048;

  if (__initialize_p == 1) goto <D.97930>; else goto <D.97931>;
  <D.97930>:
  if (__priority == 65535) goto <D.97932>; else goto <D.97933>;
  <D.97932>:
  std::ios_base::Init::Init (&__ioinit);
  __cxxabiv1::__cxa_atexit (__dt_comp , &__ioinit, &__dso_handle);
  try
    {
      std::allocator<char>::allocator (&D.89048);
      try
        {
          std::__cxx11::basic_string<char>::basic_string<> (&log_path, "./program_crash.log", &D.89048);
        }
      finally
        {
          std::allocator<char>::~allocator (&D.89048);
        }
    }
  finally
    {
      D.89048 = {CLOBBER(eol)};
    }
  __cxxabiv1::__cxa_atexit (__dt_comp , &log_path, &__dso_handle);
  goto <D.97934>;
  <D.97933>:
  <D.97934>:
  goto <D.97935>;
  <D.97931>:
  <D.97935>:
}


